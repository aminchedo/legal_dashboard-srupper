import { BaseClient, type Parsed, type RequestParams } from "./base-client";
import { SandboxResponse, CommandResponse, CommandFinishedResponse, LogLine } from "./validators";
import { FileWriter } from "./file-writer";
import { z } from "zod";
export declare class APIClient extends BaseClient {
    private teamId;
    constructor(params: {
        host?: string;
        teamId: string;
        token: string;
    });
    protected request(path: string, params?: RequestParams): Promise<Response>;
    getSandbox(params: {
        sandboxId: string;
    }): Promise<Parsed<{
        sandbox: {
            region: string;
            status: "pending" | "running" | "stopping" | "stopped" | "failed";
            id: string;
            memory: number;
            vcpus: number;
            runtime: string;
            timeout: number;
            requestedAt: number;
            createdAt: number;
            updatedAt: number;
            duration?: number | undefined;
            startedAt?: number | undefined;
            requestedStopAt?: number | undefined;
            stoppedAt?: number | undefined;
        };
        routes: {
            url: string;
            subdomain: string;
            port: number;
        }[];
    }>>;
    createSandbox(params: {
        ports?: number[];
        projectId: string;
        source?: {
            type: "git";
            url: string;
            depth?: number;
            revision?: string;
            username?: string;
            password?: string;
        } | {
            type: "tarball";
            url: string;
        };
        timeout?: number;
        resources?: {
            vcpus: number;
        };
        runtime?: "node22" | "python3.13" | (string & {});
    }): Promise<Parsed<{
        sandbox: {
            region: string;
            status: "pending" | "running" | "stopping" | "stopped" | "failed";
            id: string;
            memory: number;
            vcpus: number;
            runtime: string;
            timeout: number;
            requestedAt: number;
            createdAt: number;
            updatedAt: number;
            duration?: number | undefined;
            startedAt?: number | undefined;
            requestedStopAt?: number | undefined;
            stoppedAt?: number | undefined;
        };
        routes: {
            url: string;
            subdomain: string;
            port: number;
        }[];
    }>>;
    runCommand(params: {
        sandboxId: string;
        cwd?: string;
        command: string;
        args: string[];
        env: Record<string, string>;
        sudo: boolean;
    }): Promise<Parsed<{
        command: {
            name: string;
            args: string[];
            id: string;
            startedAt: number;
            cwd: string;
            sandboxId: string;
            exitCode: number | null;
        };
    }>>;
    getCommand(params: {
        sandboxId: string;
        cmdId: string;
        wait: true;
    }): Promise<Parsed<z.infer<typeof CommandFinishedResponse>>>;
    getCommand(params: {
        sandboxId: string;
        cmdId: string;
        wait?: boolean;
    }): Promise<Parsed<z.infer<typeof CommandResponse>>>;
    mkDir(params: {
        sandboxId: string;
        path: string;
        cwd?: string;
    }): Promise<Parsed<{}>>;
    getFileWriter(params: {
        sandboxId: string;
    }): {
        response: Promise<Response>;
        writer: FileWriter;
    };
    writeFiles(params: {
        sandboxId: string;
        files: {
            path: string;
            content: Buffer;
        }[];
    }): Promise<void>;
    readFile(params: {
        sandboxId: string;
        path: string;
        cwd?: string;
    }): Promise<NodeJS.ReadableStream | null>;
    killCommand(params: {
        sandboxId: string;
        commandId: string;
        signal: number;
    }): Promise<Parsed<{
        command: {
            name: string;
            args: string[];
            id: string;
            startedAt: number;
            cwd: string;
            sandboxId: string;
            exitCode: number | null;
        };
    }>>;
    getLogs(params: {
        sandboxId: string;
        cmdId: string;
    }): AsyncIterable<z.infer<typeof LogLine>>;
    stopSandbox(params: {
        sandboxId: string;
    }): Promise<Parsed<z.infer<typeof SandboxResponse>>>;
}
