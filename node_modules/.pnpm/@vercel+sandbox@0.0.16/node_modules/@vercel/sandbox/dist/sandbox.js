"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sandbox = void 0;
const api_client_1 = require("./api-client");
const command_1 = require("./command");
const get_credentials_1 = require("./utils/get-credentials");
/**
 * A Sandbox is an isolated Linux MicroVM to run commands in.
 *
 * Use {@link Sandbox.create} or {@link Sandbox.get} to construct.
 * @hideconstructor
 */
class Sandbox {
    /**
     * Unique ID of this sandbox.
     */
    get sandboxId() {
        return this.sandbox.id;
    }
    /**
     * The status of the sandbox.
     */
    get status() {
        return this.sandbox.status;
    }
    /**
     * Create a new sandbox.
     *
     * @param params - Creation parameters and optional credentials.
     * @returns A promise resolving to the created {@link Sandbox}.
     */
    static async create(params) {
        const credentials = (0, get_credentials_1.getCredentials)(params);
        const client = new api_client_1.APIClient({
            teamId: credentials.teamId,
            token: credentials.token,
        });
        const sandbox = await client.createSandbox({
            source: params?.source,
            projectId: credentials.projectId,
            ports: params?.ports ?? [],
            timeout: params?.timeout,
            resources: params?.resources,
            runtime: params?.runtime,
        });
        return new Sandbox({
            client,
            sandbox: sandbox.json.sandbox,
            routes: sandbox.json.routes,
        });
    }
    /**
     * Retrieve an existing sandbox.
     *
     * @param params - Get parameters and optional credentials.
     * @returns A promise resolving to the {@link Sandbox}.
     */
    static async get(params) {
        const credentials = (0, get_credentials_1.getCredentials)(params);
        const client = new api_client_1.APIClient({
            teamId: credentials.teamId,
            token: credentials.token,
        });
        const sandbox = await client.getSandbox({
            sandboxId: params.sandboxId,
        });
        return new Sandbox({
            client,
            sandbox: sandbox.json.sandbox,
            routes: sandbox.json.routes,
        });
    }
    /**
     * Create a new Sandbox instance.
     *
     * @param client - API client used to communicate with the backend
     * @param routes - Port-to-subdomain mappings for exposed ports
     * @param sandboxId - Unique identifier for the sandbox
     */
    constructor({ client, routes, sandbox, }) {
        this.client = client;
        this.routes = routes;
        this.sandbox = sandbox;
    }
    /**
     * Get a previously run command by its ID.
     *
     * @param cmdId - ID of the command to retrieve
     * @returns A {@link Command} instance representing the command
     */
    async getCommand(cmdId) {
        const command = await this.client.getCommand({
            sandboxId: this.sandbox.id,
            cmdId,
        });
        return new command_1.Command({
            client: this.client,
            sandboxId: this.sandbox.id,
            cmd: command.json.command,
        });
    }
    async runCommand(commandOrParams, args) {
        return typeof commandOrParams === "string"
            ? this._runCommand({ cmd: commandOrParams, args })
            : this._runCommand(commandOrParams);
    }
    /**
     * Internal helper to start a command in the sandbox.
     *
     * @param params - Command execution parameters.
     * @returns A {@link Command} or {@link CommandFinished}, depending on `detached`.
     * @internal
     */
    async _runCommand(params) {
        const commandResponse = await this.client.runCommand({
            sandboxId: this.sandbox.id,
            command: params.cmd,
            args: params.args ?? [],
            cwd: params.cwd,
            env: params.env ?? {},
            sudo: params.sudo ?? false,
        });
        const command = new command_1.Command({
            client: this.client,
            sandboxId: this.sandbox.id,
            cmd: commandResponse.json.command,
        });
        if (params.stdout || params.stderr) {
            (async () => {
                for await (const log of command.logs()) {
                    if (log.stream === "stdout") {
                        params.stdout?.write(log.data);
                    }
                    else if (log.stream === "stderr") {
                        params.stderr?.write(log.data);
                    }
                }
            })();
        }
        return params.detached ? command : command.wait();
    }
    /**
     * Create a directory in the filesystem of this sandbox.
     *
     * @param path - Path of the directory to create
     */
    async mkDir(path) {
        await this.client.mkDir({
            sandboxId: this.sandbox.id,
            path: path,
        });
    }
    /**
     * Read a file from the filesystem of this sandbox.
     *
     * @param file - File to read, with path and optional cwd
     * @returns A promise that resolves to a ReadableStream containing the file contents
     */
    async readFile(file) {
        return this.client.readFile({
            sandboxId: this.sandbox.id,
            path: file.path,
            cwd: file.cwd,
        });
    }
    /**
     * Write files to the filesystem of this sandbox.
     *
     * @param files - Array of files with path and stream/buffer contents
     * @returns A promise that resolves when the files are written
     */
    async writeFiles(files) {
        return this.client.writeFiles({
            sandboxId: this.sandbox.id,
            files: files,
        });
    }
    /**
     * Get the public domain of a port of this sandbox.
     *
     * @param p - Port number to resolve
     * @returns A full domain (e.g. `https://subdomain.vercel.run`)
     * @throws If the port has no associated route
     */
    domain(p) {
        const route = this.routes.find(({ port }) => port == p);
        if (route) {
            return `https://${route.subdomain}.vercel.run`;
        }
        else {
            throw new Error(`No route for port ${p}`);
        }
    }
    /**
     * Stop the sandbox.
     *
     * @returns A promise that resolves when the sandbox is stopped
     */
    async stop() {
        await this.client.stopSandbox({
            sandboxId: this.sandbox.id,
        });
    }
}
exports.Sandbox = Sandbox;
