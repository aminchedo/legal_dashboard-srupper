import { getVercelOidcTokenSync } from "@vercel/oidc";
import { decodeBase64Url } from "./decode-base64-url";
import { z } from "zod";

export interface Credentials {
  /**
   * Authentication token for the Vercel API. It could be an OIDC token
   * or a personal access token.
   */
  token: string;
  /**
   * The ID of the project to associate Sandbox operations.
   */
  projectId: string;
  /**
   * The ID of the team to associate Sandbox operations.
   */
  teamId: string;
}

/**
 * Allow to get credentials to access the Vercel API. Credentials can be
 * provided in two different ways:
 *
 * 1. By passing an object with the `teamId`, `token`, and `projectId` properties.
 * 2. By using an environment variable VERCEL_OIDC_TOKEN.
 *
 * If both methods are used, the object properties take precedence over the
 * environment variable. If neither method is used, an error is thrown.
 */
export function getCredentials<T>(params?: T | Credentials): Credentials {
  const credentials = getCredentialsFromParams(params ?? {});
  if (credentials) {
    return credentials;
  }

  const oidcToken = getVercelOidcTokenSync();
  if (oidcToken) {
    return getCredentialsFromOIDCToken(oidcToken);
  }

  throw new Error(
    "You must provide credentials to access the Vercel API \n" +
      "either through parameters or using OpenID Connect [https://vercel.com/docs/oidc]",
  );
}

/**
 * Attempt to extract credentials from the provided parameters. Either all
 * required fields (`token`, `teamId`, and `projectId`) must be present
 * or none of them, otherwise an error is thrown.
 */
function getCredentialsFromParams<Params extends Record<string, unknown>>(
  params: Params | Credentials,
): Credentials | null {
  const missing = [
    "token" in params && typeof params.token === "string" ? null : "token",
    "teamId" in params && typeof params.teamId === "string" ? null : "teamId",
    "projectId" in params && typeof params.projectId === "string"
      ? null
      : "projectId",
  ].filter((value) => value !== null);

  if (missing.length === 0) {
    return {
      token: params.token as string,
      projectId: params.projectId as string,
      teamId: params.teamId as string,
    };
  }

  if (missing.length < 3) {
    throw new Error(
      `Missing credentials parameters to access the Vercel API: ${missing
        .filter((value) => value !== null)
        .join(", ")}`,
    );
  }

  return null;
}

/**
 * Schema to validate the payload of the Vercel OIDC token where we expect
 * to find the `teamId` and `projectId`.
 */
const schema = z.object({
  owner_id: z.string(),
  project_id: z.string(),
});

/**
 * Extracts credentials from a Vercel OIDC token. The token is expected to be
 * a JWT with a payload that contains `project_id` and `owner_id`.
 *
 * @param token - The Vercel OIDC token.
 * @returns An object containing the token, projectId, and teamId.
 * @throws If the token is invalid or does not contain the required fields.
 */
function getCredentialsFromOIDCToken(token: string): Credentials {
  try {
    const payload = schema.parse(decodeBase64Url(token.split(".")[1]));
    return {
      token,
      projectId: payload.project_id,
      teamId: payload.owner_id,
    };
  } catch (error) {
    throw new Error(
      `Invalid Vercel OIDC token: ${error instanceof Error ? error.message : String(error)}`,
    );
  }
}
