{
  "version": 3,
  "sources": ["../../date-fns/locale/af/_lib/formatDistance.js", "../../date-fns/locale/af/_lib/formatLong.js", "../../date-fns/locale/af/_lib/formatRelative.js", "../../date-fns/locale/af/_lib/localize.js", "../../date-fns/locale/af/_lib/match.js", "../../date-fns/locale/af.js", "../../date-fns/locale/ar/_lib/formatDistance.js", "../../date-fns/locale/ar/_lib/formatLong.js", "../../date-fns/locale/ar/_lib/formatRelative.js", "../../date-fns/locale/ar/_lib/localize.js", "../../date-fns/locale/ar/_lib/match.js", "../../date-fns/locale/ar.js", "../../date-fns/locale/ar-DZ/_lib/formatDistance.js", "../../date-fns/locale/ar-DZ/_lib/formatLong.js", "../../date-fns/locale/ar-DZ/_lib/formatRelative.js", "../../date-fns/locale/ar-DZ/_lib/localize.js", "../../date-fns/locale/ar-DZ/_lib/match.js", "../../date-fns/locale/ar-DZ.js", "../../date-fns/locale/ar-EG/_lib/formatDistance.js", "../../date-fns/locale/ar-EG/_lib/formatLong.js", "../../date-fns/locale/ar-EG/_lib/formatRelative.js", "../../date-fns/locale/ar-EG/_lib/localize.js", "../../date-fns/locale/ar-EG/_lib/match.js", "../../date-fns/locale/ar-EG.js", "../../date-fns/locale/ar-MA/_lib/formatDistance.js", "../../date-fns/locale/ar-MA/_lib/formatLong.js", "../../date-fns/locale/ar-MA/_lib/formatRelative.js", "../../date-fns/locale/ar-MA/_lib/localize.js", "../../date-fns/locale/ar-MA/_lib/match.js", "../../date-fns/locale/ar-MA.js", "../../date-fns/locale/ar-SA/_lib/formatDistance.js", "../../date-fns/locale/ar-SA/_lib/formatLong.js", "../../date-fns/locale/ar-SA/_lib/formatRelative.js", "../../date-fns/locale/ar-SA/_lib/localize.js", "../../date-fns/locale/ar-SA/_lib/match.js", "../../date-fns/locale/ar-SA.js", "../../date-fns/locale/ar-TN/_lib/formatDistance.js", "../../date-fns/locale/ar-TN/_lib/formatLong.js", "../../date-fns/locale/ar-TN/_lib/formatRelative.js", "../../date-fns/locale/ar-TN/_lib/localize.js", "../../date-fns/locale/ar-TN/_lib/match.js", "../../date-fns/locale/ar-TN.js", "../../date-fns/locale/az/_lib/formatDistance.js", "../../date-fns/locale/az/_lib/formatLong.js", "../../date-fns/locale/az/_lib/formatRelative.js", "../../date-fns/locale/az/_lib/localize.js", "../../date-fns/locale/az/_lib/match.js", "../../date-fns/locale/az.js", "../../date-fns/locale/be/_lib/formatDistance.js", "../../date-fns/locale/be/_lib/formatLong.js", "../../date-fns/locale/be/_lib/formatRelative.js", "../../date-fns/locale/be/_lib/localize.js", "../../date-fns/locale/be/_lib/match.js", "../../date-fns/locale/be.js", "../../date-fns/locale/be-tarask/_lib/formatDistance.js", "../../date-fns/locale/be-tarask/_lib/formatLong.js", "../../date-fns/locale/be-tarask/_lib/formatRelative.js", "../../date-fns/locale/be-tarask/_lib/localize.js", "../../date-fns/locale/be-tarask/_lib/match.js", "../../date-fns/locale/be-tarask.js", "../../date-fns/locale/bg/_lib/formatDistance.js", "../../date-fns/locale/bg/_lib/formatLong.js", "../../date-fns/locale/bg/_lib/formatRelative.js", "../../date-fns/locale/bg/_lib/localize.js", "../../date-fns/locale/bg/_lib/match.js", "../../date-fns/locale/bg.js", "../../date-fns/locale/bn/_lib/localize.js", "../../date-fns/locale/bn/_lib/formatDistance.js", "../../date-fns/locale/bn/_lib/formatLong.js", "../../date-fns/locale/bn/_lib/formatRelative.js", "../../date-fns/locale/bn/_lib/match.js", "../../date-fns/locale/bn.js", "../../date-fns/locale/bs/_lib/formatDistance.js", "../../date-fns/locale/bs/_lib/formatLong.js", "../../date-fns/locale/bs/_lib/formatRelative.js", "../../date-fns/locale/bs/_lib/localize.js", "../../date-fns/locale/bs/_lib/match.js", "../../date-fns/locale/bs.js", "../../date-fns/locale/ca/_lib/formatDistance.js", "../../date-fns/locale/ca/_lib/formatLong.js", "../../date-fns/locale/ca/_lib/formatRelative.js", "../../date-fns/locale/ca/_lib/localize.js", "../../date-fns/locale/ca/_lib/match.js", "../../date-fns/locale/ca.js", "../../date-fns/locale/ckb/_lib/formatDistance.js", "../../date-fns/locale/ckb/_lib/formatLong.js", "../../date-fns/locale/ckb/_lib/formatRelative.js", "../../date-fns/locale/ckb/_lib/localize.js", "../../date-fns/locale/ckb/_lib/match.js", "../../date-fns/locale/ckb.js", "../../date-fns/locale/cs/_lib/formatDistance.js", "../../date-fns/locale/cs/_lib/formatLong.js", "../../date-fns/locale/cs/_lib/formatRelative.js", "../../date-fns/locale/cs/_lib/localize.js", "../../date-fns/locale/cs/_lib/match.js", "../../date-fns/locale/cs.js", "../../date-fns/locale/cy/_lib/formatDistance.js", "../../date-fns/locale/cy/_lib/formatLong.js", "../../date-fns/locale/cy/_lib/formatRelative.js", "../../date-fns/locale/cy/_lib/localize.js", "../../date-fns/locale/cy/_lib/match.js", "../../date-fns/locale/cy.js", "../../date-fns/locale/da/_lib/formatDistance.js", "../../date-fns/locale/da/_lib/formatLong.js", "../../date-fns/locale/da/_lib/formatRelative.js", "../../date-fns/locale/da/_lib/localize.js", "../../date-fns/locale/da/_lib/match.js", "../../date-fns/locale/da.js", "../../date-fns/locale/de/_lib/formatDistance.js", "../../date-fns/locale/de/_lib/formatLong.js", "../../date-fns/locale/de/_lib/formatRelative.js", "../../date-fns/locale/de/_lib/localize.js", "../../date-fns/locale/de/_lib/match.js", "../../date-fns/locale/de.js", "../../date-fns/locale/de-AT/_lib/localize.js", "../../date-fns/locale/de-AT.js", "../../date-fns/locale/el/_lib/formatDistance.js", "../../date-fns/locale/el/_lib/formatLong.js", "../../date-fns/locale/el/_lib/formatRelative.js", "../../date-fns/locale/el/_lib/localize.js", "../../date-fns/locale/el/_lib/match.js", "../../date-fns/locale/el.js", "../../date-fns/locale/en-AU/_lib/formatLong.js", "../../date-fns/locale/en-AU.js", "../../date-fns/locale/en-CA/_lib/formatDistance.js", "../../date-fns/locale/en-CA/_lib/formatLong.js", "../../date-fns/locale/en-CA.js", "../../date-fns/locale/en-GB/_lib/formatLong.js", "../../date-fns/locale/en-GB.js", "../../date-fns/locale/en-IE.js", "../../date-fns/locale/en-IN/_lib/formatLong.js", "../../date-fns/locale/en-IN.js", "../../date-fns/locale/en-NZ/_lib/formatLong.js", "../../date-fns/locale/en-NZ.js", "../../date-fns/locale/en-ZA/_lib/formatLong.js", "../../date-fns/locale/en-ZA.js", "../../date-fns/locale/eo/_lib/formatDistance.js", "../../date-fns/locale/eo/_lib/formatLong.js", "../../date-fns/locale/eo/_lib/formatRelative.js", "../../date-fns/locale/eo/_lib/localize.js", "../../date-fns/locale/eo/_lib/match.js", "../../date-fns/locale/eo.js", "../../date-fns/locale/es/_lib/formatDistance.js", "../../date-fns/locale/es/_lib/formatLong.js", "../../date-fns/locale/es/_lib/formatRelative.js", "../../date-fns/locale/es/_lib/localize.js", "../../date-fns/locale/es/_lib/match.js", "../../date-fns/locale/es.js", "../../date-fns/locale/et/_lib/formatDistance.js", "../../date-fns/locale/et/_lib/formatLong.js", "../../date-fns/locale/et/_lib/formatRelative.js", "../../date-fns/locale/et/_lib/localize.js", "../../date-fns/locale/et/_lib/match.js", "../../date-fns/locale/et.js", "../../date-fns/locale/eu/_lib/formatDistance.js", "../../date-fns/locale/eu/_lib/formatLong.js", "../../date-fns/locale/eu/_lib/formatRelative.js", "../../date-fns/locale/eu/_lib/localize.js", "../../date-fns/locale/eu/_lib/match.js", "../../date-fns/locale/eu.js", "../../date-fns/locale/fa-IR/_lib/formatDistance.js", "../../date-fns/locale/fa-IR/_lib/formatLong.js", "../../date-fns/locale/fa-IR/_lib/formatRelative.js", "../../date-fns/locale/fa-IR/_lib/localize.js", "../../date-fns/locale/fa-IR/_lib/match.js", "../../date-fns/locale/fa-IR.js", "../../date-fns/locale/fi/_lib/formatDistance.js", "../../date-fns/locale/fi/_lib/formatLong.js", "../../date-fns/locale/fi/_lib/formatRelative.js", "../../date-fns/locale/fi/_lib/localize.js", "../../date-fns/locale/fi/_lib/match.js", "../../date-fns/locale/fi.js", "../../date-fns/locale/fr/_lib/formatDistance.js", "../../date-fns/locale/fr/_lib/formatLong.js", "../../date-fns/locale/fr/_lib/formatRelative.js", "../../date-fns/locale/fr/_lib/localize.js", "../../date-fns/locale/fr/_lib/match.js", "../../date-fns/locale/fr.js", "../../date-fns/locale/fr-CA/_lib/formatLong.js", "../../date-fns/locale/fr-CA.js", "../../date-fns/locale/fr-CH/_lib/formatLong.js", "../../date-fns/locale/fr-CH/_lib/formatRelative.js", "../../date-fns/locale/fr-CH.js", "../../date-fns/locale/fy/_lib/formatDistance.js", "../../date-fns/locale/fy/_lib/formatLong.js", "../../date-fns/locale/fy/_lib/formatRelative.js", "../../date-fns/locale/fy/_lib/localize.js", "../../date-fns/locale/fy/_lib/match.js", "../../date-fns/locale/fy.js", "../../date-fns/locale/gd/_lib/formatDistance.js", "../../date-fns/locale/gd/_lib/formatLong.js", "../../date-fns/locale/gd/_lib/formatRelative.js", "../../date-fns/locale/gd/_lib/localize.js", "../../date-fns/locale/gd/_lib/match.js", "../../date-fns/locale/gd.js", "../../date-fns/locale/gl/_lib/formatDistance.js", "../../date-fns/locale/gl/_lib/formatLong.js", "../../date-fns/locale/gl/_lib/formatRelative.js", "../../date-fns/locale/gl/_lib/localize.js", "../../date-fns/locale/gl/_lib/match.js", "../../date-fns/locale/gl.js", "../../date-fns/locale/gu/_lib/formatDistance.js", "../../date-fns/locale/gu/_lib/formatLong.js", "../../date-fns/locale/gu/_lib/formatRelative.js", "../../date-fns/locale/gu/_lib/localize.js", "../../date-fns/locale/gu/_lib/match.js", "../../date-fns/locale/gu.js", "../../date-fns/locale/he/_lib/formatDistance.js", "../../date-fns/locale/he/_lib/formatLong.js", "../../date-fns/locale/he/_lib/formatRelative.js", "../../date-fns/locale/he/_lib/localize.js", "../../date-fns/locale/he/_lib/match.js", "../../date-fns/locale/he.js", "../../date-fns/locale/hi/_lib/localize.js", "../../date-fns/locale/hi/_lib/formatDistance.js", "../../date-fns/locale/hi/_lib/formatLong.js", "../../date-fns/locale/hi/_lib/formatRelative.js", "../../date-fns/locale/hi/_lib/match.js", "../../date-fns/locale/hi.js", "../../date-fns/locale/hr/_lib/formatDistance.js", "../../date-fns/locale/hr/_lib/formatLong.js", "../../date-fns/locale/hr/_lib/formatRelative.js", "../../date-fns/locale/hr/_lib/localize.js", "../../date-fns/locale/hr/_lib/match.js", "../../date-fns/locale/hr.js", "../../date-fns/locale/ht/_lib/formatDistance.js", "../../date-fns/locale/ht/_lib/formatLong.js", "../../date-fns/locale/ht/_lib/formatRelative.js", "../../date-fns/locale/ht/_lib/localize.js", "../../date-fns/locale/ht/_lib/match.js", "../../date-fns/locale/ht.js", "../../date-fns/locale/hu/_lib/formatDistance.js", "../../date-fns/locale/hu/_lib/formatLong.js", "../../date-fns/locale/hu/_lib/formatRelative.js", "../../date-fns/locale/hu/_lib/localize.js", "../../date-fns/locale/hu/_lib/match.js", "../../date-fns/locale/hu.js", "../../date-fns/locale/hy/_lib/formatDistance.js", "../../date-fns/locale/hy/_lib/formatLong.js", "../../date-fns/locale/hy/_lib/formatRelative.js", "../../date-fns/locale/hy/_lib/localize.js", "../../date-fns/locale/hy/_lib/match.js", "../../date-fns/locale/hy.js", "../../date-fns/locale/id/_lib/formatDistance.js", "../../date-fns/locale/id/_lib/formatLong.js", "../../date-fns/locale/id/_lib/formatRelative.js", "../../date-fns/locale/id/_lib/localize.js", "../../date-fns/locale/id/_lib/match.js", "../../date-fns/locale/id.js", "../../date-fns/locale/is/_lib/formatDistance.js", "../../date-fns/locale/is/_lib/formatLong.js", "../../date-fns/locale/is/_lib/formatRelative.js", "../../date-fns/locale/is/_lib/localize.js", "../../date-fns/locale/is/_lib/match.js", "../../date-fns/locale/is.js", "../../date-fns/locale/it/_lib/formatDistance.js", "../../date-fns/locale/it/_lib/formatLong.js", "../../date-fns/locale/it/_lib/formatRelative.js", "../../date-fns/locale/it/_lib/localize.js", "../../date-fns/locale/it/_lib/match.js", "../../date-fns/locale/it.js", "../../date-fns/locale/it-CH/_lib/formatLong.js", "../../date-fns/locale/it-CH.js", "../../date-fns/locale/ja/_lib/formatDistance.js", "../../date-fns/locale/ja/_lib/formatLong.js", "../../date-fns/locale/ja/_lib/formatRelative.js", "../../date-fns/locale/ja/_lib/localize.js", "../../date-fns/locale/ja/_lib/match.js", "../../date-fns/locale/ja.js", "../../date-fns/locale/ja-Hira/_lib/formatDistance.js", "../../date-fns/locale/ja-Hira/_lib/formatLong.js", "../../date-fns/locale/ja-Hira/_lib/formatRelative.js", "../../date-fns/locale/ja-Hira/_lib/localize.js", "../../date-fns/locale/ja-Hira/_lib/match.js", "../../date-fns/locale/ja-Hira.js", "../../date-fns/locale/ka/_lib/formatDistance.js", "../../date-fns/locale/ka/_lib/formatLong.js", "../../date-fns/locale/ka/_lib/formatRelative.js", "../../date-fns/locale/ka/_lib/localize.js", "../../date-fns/locale/ka/_lib/match.js", "../../date-fns/locale/ka.js", "../../date-fns/locale/kk/_lib/formatDistance.js", "../../date-fns/locale/kk/_lib/formatLong.js", "../../date-fns/locale/kk/_lib/formatRelative.js", "../../date-fns/locale/kk/_lib/localize.js", "../../date-fns/locale/kk/_lib/match.js", "../../date-fns/locale/kk.js", "../../date-fns/locale/km/_lib/formatDistance.js", "../../date-fns/locale/km/_lib/formatLong.js", "../../date-fns/locale/km/_lib/formatRelative.js", "../../date-fns/locale/km/_lib/localize.js", "../../date-fns/locale/km/_lib/match.js", "../../date-fns/locale/km.js", "../../date-fns/locale/kn/_lib/formatDistance.js", "../../date-fns/locale/kn/_lib/formatLong.js", "../../date-fns/locale/kn/_lib/formatRelative.js", "../../date-fns/locale/kn/_lib/localize.js", "../../date-fns/locale/kn/_lib/match.js", "../../date-fns/locale/kn.js", "../../date-fns/locale/ko/_lib/formatDistance.js", "../../date-fns/locale/ko/_lib/formatLong.js", "../../date-fns/locale/ko/_lib/formatRelative.js", "../../date-fns/locale/ko/_lib/localize.js", "../../date-fns/locale/ko/_lib/match.js", "../../date-fns/locale/ko.js", "../../date-fns/locale/lb/_lib/formatDistance.js", "../../date-fns/locale/lb/_lib/formatLong.js", "../../date-fns/locale/lb/_lib/formatRelative.js", "../../date-fns/locale/lb/_lib/localize.js", "../../date-fns/locale/lb/_lib/match.js", "../../date-fns/locale/lb.js", "../../date-fns/locale/lt/_lib/formatDistance.js", "../../date-fns/locale/lt/_lib/formatLong.js", "../../date-fns/locale/lt/_lib/formatRelative.js", "../../date-fns/locale/lt/_lib/localize.js", "../../date-fns/locale/lt/_lib/match.js", "../../date-fns/locale/lt.js", "../../date-fns/locale/lv/_lib/formatDistance.js", "../../date-fns/locale/lv/_lib/formatLong.js", "../../date-fns/locale/lv/_lib/formatRelative.js", "../../date-fns/locale/lv/_lib/localize.js", "../../date-fns/locale/lv/_lib/match.js", "../../date-fns/locale/lv.js", "../../date-fns/locale/mk/_lib/formatDistance.js", "../../date-fns/locale/mk/_lib/formatLong.js", "../../date-fns/locale/mk/_lib/formatRelative.js", "../../date-fns/locale/mk/_lib/localize.js", "../../date-fns/locale/mk/_lib/match.js", "../../date-fns/locale/mk.js", "../../date-fns/locale/mn/_lib/formatDistance.js", "../../date-fns/locale/mn/_lib/formatLong.js", "../../date-fns/locale/mn/_lib/formatRelative.js", "../../date-fns/locale/mn/_lib/localize.js", "../../date-fns/locale/mn/_lib/match.js", "../../date-fns/locale/mn.js", "../../date-fns/locale/ms/_lib/formatDistance.js", "../../date-fns/locale/ms/_lib/formatLong.js", "../../date-fns/locale/ms/_lib/formatRelative.js", "../../date-fns/locale/ms/_lib/localize.js", "../../date-fns/locale/ms/_lib/match.js", "../../date-fns/locale/ms.js", "../../date-fns/locale/mt/_lib/formatDistance.js", "../../date-fns/locale/mt/_lib/formatLong.js", "../../date-fns/locale/mt/_lib/formatRelative.js", "../../date-fns/locale/mt/_lib/localize.js", "../../date-fns/locale/mt/_lib/match.js", "../../date-fns/locale/mt.js", "../../date-fns/locale/nb/_lib/formatDistance.js", "../../date-fns/locale/nb/_lib/formatLong.js", "../../date-fns/locale/nb/_lib/formatRelative.js", "../../date-fns/locale/nb/_lib/localize.js", "../../date-fns/locale/nb/_lib/match.js", "../../date-fns/locale/nb.js", "../../date-fns/locale/nl/_lib/formatDistance.js", "../../date-fns/locale/nl/_lib/formatLong.js", "../../date-fns/locale/nl/_lib/formatRelative.js", "../../date-fns/locale/nl/_lib/localize.js", "../../date-fns/locale/nl/_lib/match.js", "../../date-fns/locale/nl.js", "../../date-fns/locale/nl-BE/_lib/formatDistance.js", "../../date-fns/locale/nl-BE/_lib/formatLong.js", "../../date-fns/locale/nl-BE/_lib/formatRelative.js", "../../date-fns/locale/nl-BE/_lib/localize.js", "../../date-fns/locale/nl-BE/_lib/match.js", "../../date-fns/locale/nl-BE.js", "../../date-fns/locale/nn/_lib/formatDistance.js", "../../date-fns/locale/nn/_lib/formatLong.js", "../../date-fns/locale/nn/_lib/formatRelative.js", "../../date-fns/locale/nn/_lib/localize.js", "../../date-fns/locale/nn/_lib/match.js", "../../date-fns/locale/nn.js", "../../date-fns/locale/oc/_lib/formatDistance.js", "../../date-fns/locale/oc/_lib/formatLong.js", "../../date-fns/locale/oc/_lib/formatRelative.js", "../../date-fns/locale/oc/_lib/localize.js", "../../date-fns/locale/oc/_lib/match.js", "../../date-fns/locale/oc.js", "../../date-fns/locale/pl/_lib/formatDistance.js", "../../date-fns/locale/pl/_lib/formatLong.js", "../../date-fns/locale/pl/_lib/formatRelative.js", "../../date-fns/locale/pl/_lib/localize.js", "../../date-fns/locale/pl/_lib/match.js", "../../date-fns/locale/pl.js", "../../date-fns/locale/pt/_lib/formatDistance.js", "../../date-fns/locale/pt/_lib/formatLong.js", "../../date-fns/locale/pt/_lib/formatRelative.js", "../../date-fns/locale/pt/_lib/localize.js", "../../date-fns/locale/pt/_lib/match.js", "../../date-fns/locale/pt.js", "../../date-fns/locale/pt-BR/_lib/formatDistance.js", "../../date-fns/locale/pt-BR/_lib/formatLong.js", "../../date-fns/locale/pt-BR/_lib/formatRelative.js", "../../date-fns/locale/pt-BR/_lib/localize.js", "../../date-fns/locale/pt-BR/_lib/match.js", "../../date-fns/locale/pt-BR.js", "../../date-fns/locale/ro/_lib/formatDistance.js", "../../date-fns/locale/ro/_lib/formatLong.js", "../../date-fns/locale/ro/_lib/formatRelative.js", "../../date-fns/locale/ro/_lib/localize.js", "../../date-fns/locale/ro/_lib/match.js", "../../date-fns/locale/ro.js", "../../date-fns/locale/ru/_lib/formatDistance.js", "../../date-fns/locale/ru/_lib/formatLong.js", "../../date-fns/locale/ru/_lib/formatRelative.js", "../../date-fns/locale/ru/_lib/localize.js", "../../date-fns/locale/ru/_lib/match.js", "../../date-fns/locale/ru.js", "../../date-fns/locale/se/_lib/formatDistance.js", "../../date-fns/locale/se/_lib/formatLong.js", "../../date-fns/locale/se/_lib/formatRelative.js", "../../date-fns/locale/se/_lib/localize.js", "../../date-fns/locale/se/_lib/match.js", "../../date-fns/locale/se.js", "../../date-fns/locale/sk/_lib/formatDistance.js", "../../date-fns/locale/sk/_lib/formatLong.js", "../../date-fns/locale/sk/_lib/formatRelative.js", "../../date-fns/locale/sk/_lib/localize.js", "../../date-fns/locale/sk/_lib/match.js", "../../date-fns/locale/sk.js", "../../date-fns/locale/sl/_lib/formatDistance.js", "../../date-fns/locale/sl/_lib/formatLong.js", "../../date-fns/locale/sl/_lib/formatRelative.js", "../../date-fns/locale/sl/_lib/localize.js", "../../date-fns/locale/sl/_lib/match.js", "../../date-fns/locale/sl.js", "../../date-fns/locale/sq/_lib/formatDistance.js", "../../date-fns/locale/sq/_lib/formatLong.js", "../../date-fns/locale/sq/_lib/formatRelative.js", "../../date-fns/locale/sq/_lib/localize.js", "../../date-fns/locale/sq/_lib/match.js", "../../date-fns/locale/sq.js", "../../date-fns/locale/sr/_lib/formatDistance.js", "../../date-fns/locale/sr/_lib/formatLong.js", "../../date-fns/locale/sr/_lib/formatRelative.js", "../../date-fns/locale/sr/_lib/localize.js", "../../date-fns/locale/sr/_lib/match.js", "../../date-fns/locale/sr.js", "../../date-fns/locale/sr-Latn/_lib/formatDistance.js", "../../date-fns/locale/sr-Latn/_lib/formatLong.js", "../../date-fns/locale/sr-Latn/_lib/formatRelative.js", "../../date-fns/locale/sr-Latn/_lib/localize.js", "../../date-fns/locale/sr-Latn/_lib/match.js", "../../date-fns/locale/sr-Latn.js", "../../date-fns/locale/sv/_lib/formatDistance.js", "../../date-fns/locale/sv/_lib/formatLong.js", "../../date-fns/locale/sv/_lib/formatRelative.js", "../../date-fns/locale/sv/_lib/localize.js", "../../date-fns/locale/sv/_lib/match.js", "../../date-fns/locale/sv.js", "../../date-fns/locale/ta/_lib/formatDistance.js", "../../date-fns/locale/ta/_lib/formatLong.js", "../../date-fns/locale/ta/_lib/formatRelative.js", "../../date-fns/locale/ta/_lib/localize.js", "../../date-fns/locale/ta/_lib/match.js", "../../date-fns/locale/ta.js", "../../date-fns/locale/te/_lib/formatDistance.js", "../../date-fns/locale/te/_lib/formatLong.js", "../../date-fns/locale/te/_lib/formatRelative.js", "../../date-fns/locale/te/_lib/localize.js", "../../date-fns/locale/te/_lib/match.js", "../../date-fns/locale/te.js", "../../date-fns/locale/th/_lib/formatDistance.js", "../../date-fns/locale/th/_lib/formatLong.js", "../../date-fns/locale/th/_lib/formatRelative.js", "../../date-fns/locale/th/_lib/localize.js", "../../date-fns/locale/th/_lib/match.js", "../../date-fns/locale/th.js", "../../date-fns/locale/tr/_lib/formatDistance.js", "../../date-fns/locale/tr/_lib/formatLong.js", "../../date-fns/locale/tr/_lib/formatRelative.js", "../../date-fns/locale/tr/_lib/localize.js", "../../date-fns/locale/tr/_lib/match.js", "../../date-fns/locale/tr.js", "../../date-fns/locale/ug/_lib/formatDistance.js", "../../date-fns/locale/ug/_lib/formatLong.js", "../../date-fns/locale/ug/_lib/formatRelative.js", "../../date-fns/locale/ug/_lib/localize.js", "../../date-fns/locale/ug/_lib/match.js", "../../date-fns/locale/ug.js", "../../date-fns/locale/uk/_lib/formatDistance.js", "../../date-fns/locale/uk/_lib/formatLong.js", "../../date-fns/locale/uk/_lib/formatRelative.js", "../../date-fns/locale/uk/_lib/localize.js", "../../date-fns/locale/uk/_lib/match.js", "../../date-fns/locale/uk.js", "../../date-fns/locale/uz/_lib/formatDistance.js", "../../date-fns/locale/uz/_lib/formatLong.js", "../../date-fns/locale/uz/_lib/formatRelative.js", "../../date-fns/locale/uz/_lib/localize.js", "../../date-fns/locale/uz/_lib/match.js", "../../date-fns/locale/uz.js", "../../date-fns/locale/uz-Cyrl/_lib/formatDistance.js", "../../date-fns/locale/uz-Cyrl/_lib/formatLong.js", "../../date-fns/locale/uz-Cyrl/_lib/formatRelative.js", "../../date-fns/locale/uz-Cyrl/_lib/localize.js", "../../date-fns/locale/uz-Cyrl/_lib/match.js", "../../date-fns/locale/uz-Cyrl.js", "../../date-fns/locale/vi/_lib/formatDistance.js", "../../date-fns/locale/vi/_lib/formatLong.js", "../../date-fns/locale/vi/_lib/formatRelative.js", "../../date-fns/locale/vi/_lib/localize.js", "../../date-fns/locale/vi/_lib/match.js", "../../date-fns/locale/vi.js", "../../date-fns/locale/zh-CN/_lib/formatDistance.js", "../../date-fns/locale/zh-CN/_lib/formatLong.js", "../../date-fns/locale/zh-CN/_lib/formatRelative.js", "../../date-fns/locale/zh-CN/_lib/localize.js", "../../date-fns/locale/zh-CN/_lib/match.js", "../../date-fns/locale/zh-CN.js", "../../date-fns/locale/zh-HK/_lib/formatDistance.js", "../../date-fns/locale/zh-HK/_lib/formatLong.js", "../../date-fns/locale/zh-HK/_lib/formatRelative.js", "../../date-fns/locale/zh-HK/_lib/localize.js", "../../date-fns/locale/zh-HK/_lib/match.js", "../../date-fns/locale/zh-HK.js", "../../date-fns/locale/zh-TW/_lib/formatDistance.js", "../../date-fns/locale/zh-TW/_lib/formatLong.js", "../../date-fns/locale/zh-TW/_lib/formatRelative.js", "../../date-fns/locale/zh-TW/_lib/localize.js", "../../date-fns/locale/zh-TW/_lib/match.js", "../../date-fns/locale/zh-TW.js"],
  "sourcesContent": ["const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"minder as 'n sekonde\",\n    other: \"minder as {{count}} sekondes\",\n  },\n\n  xSeconds: {\n    one: \"1 sekonde\",\n    other: \"{{count}} sekondes\",\n  },\n\n  halfAMinute: \"'n halwe minuut\",\n\n  lessThanXMinutes: {\n    one: \"minder as 'n minuut\",\n    other: \"minder as {{count}} minute\",\n  },\n\n  xMinutes: {\n    one: \"'n minuut\",\n    other: \"{{count}} minute\",\n  },\n\n  aboutXHours: {\n    one: \"ongeveer 1 uur\",\n    other: \"ongeveer {{count}} ure\",\n  },\n\n  xHours: {\n    one: \"1 uur\",\n    other: \"{{count}} ure\",\n  },\n\n  xDays: {\n    one: \"1 dag\",\n    other: \"{{count}} dae\",\n  },\n\n  aboutXWeeks: {\n    one: \"ongeveer 1 week\",\n    other: \"ongeveer {{count}} weke\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weke\",\n  },\n\n  aboutXMonths: {\n    one: \"ongeveer 1 maand\",\n    other: \"ongeveer {{count}} maande\",\n  },\n\n  xMonths: {\n    one: \"1 maand\",\n    other: \"{{count}} maande\",\n  },\n\n  aboutXYears: {\n    one: \"ongeveer 1 jaar\",\n    other: \"ongeveer {{count}} jaar\",\n  },\n\n  xYears: {\n    one: \"1 jaar\",\n    other: \"{{count}} jaar\",\n  },\n\n  overXYears: {\n    one: \"meer as 1 jaar\",\n    other: \"meer as {{count}} jaar\",\n  },\n\n  almostXYears: {\n    one: \"byna 1 jaar\",\n    other: \"byna {{count}} jaar\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"oor \" + result;\n    } else {\n      return result + \" gelede\";\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM yyyy\",\n  long: \"d MMMM yyyy\",\n  medium: \"d MMM yyyy\",\n  short: \"yyyy/MM/dd\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss zzzz\",\n  long: \"HH:mm:ss z\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'om' {{time}}\",\n  long: \"{{date}} 'om' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'verlede' eeee 'om' p\",\n  yesterday: \"'gister om' p\",\n  today: \"'vandag om' p\",\n  tomorrow: \"'môre om' p\",\n  nextWeek: \"eeee 'om' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"vC\", \"nC\"],\n  abbreviated: [\"vC\", \"nC\"],\n  wide: [\"voor Christus\", \"na Christus\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"K1\", \"K2\", \"K3\", \"K4\"],\n  wide: [\"1ste kwartaal\", \"2de kwartaal\", \"3de kwartaal\", \"4de kwartaal\"],\n};\n\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mrt\",\n    \"Apr\",\n    \"Mei\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Okt\",\n    \"Nov\",\n    \"Des\",\n  ],\n\n  wide: [\n    \"Januarie\",\n    \"Februarie\",\n    \"Maart\",\n    \"April\",\n    \"Mei\",\n    \"Junie\",\n    \"Julie\",\n    \"Augustus\",\n    \"September\",\n    \"Oktober\",\n    \"November\",\n    \"Desember\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"D\", \"W\", \"D\", \"V\", \"S\"],\n  short: [\"So\", \"Ma\", \"Di\", \"Wo\", \"Do\", \"Vr\", \"Sa\"],\n  abbreviated: [\"Son\", \"Maa\", \"Din\", \"Woe\", \"Don\", \"Vry\", \"Sat\"],\n  wide: [\n    \"Sondag\",\n    \"Maandag\",\n    \"Dinsdag\",\n    \"Woensdag\",\n    \"Donderdag\",\n    \"Vrydag\",\n    \"Saterdag\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"middaguur\",\n    morning: \"oggend\",\n    afternoon: \"middag\",\n    evening: \"laat middag\",\n    night: \"aand\",\n  },\n  abbreviated: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"middaguur\",\n    morning: \"oggend\",\n    afternoon: \"middag\",\n    evening: \"laat middag\",\n    night: \"aand\",\n  },\n  wide: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"middaguur\",\n    morning: \"oggend\",\n    afternoon: \"middag\",\n    evening: \"laat middag\",\n    night: \"aand\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"uur die middag\",\n    morning: \"uur die oggend\",\n    afternoon: \"uur die middag\",\n    evening: \"uur die aand\",\n    night: \"uur die aand\",\n  },\n  abbreviated: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"uur die middag\",\n    morning: \"uur die oggend\",\n    afternoon: \"uur die middag\",\n    evening: \"uur die aand\",\n    night: \"uur die aand\",\n  },\n  wide: {\n    am: \"vm\",\n    pm: \"nm\",\n    midnight: \"middernag\",\n    noon: \"uur die middag\",\n    morning: \"uur die oggend\",\n    afternoon: \"uur die middag\",\n    evening: \"uur die aand\",\n    night: \"uur die aand\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber) => {\n  const number = Number(dirtyNumber);\n  const rem100 = number % 100;\n  if (rem100 < 20) {\n    switch (rem100) {\n      case 1:\n      case 8:\n        return number + \"ste\";\n      default:\n        return number + \"de\";\n    }\n  }\n  return number + \"ste\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(ste|de)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^([vn]\\.? ?C\\.?)/,\n  abbreviated: /^([vn]\\. ?C\\.?)/,\n  wide: /^((voor|na) Christus)/,\n};\nconst parseEraPatterns = {\n  any: [/^v/, /^n/],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^K[1234]/i,\n  wide: /^[1234](st|d)e kwartaal/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\\.?/i,\n  wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^J/i,\n    /^F/i,\n    /^M/i,\n    /^A/i,\n    /^M/i,\n    /^J/i,\n    /^J/i,\n    /^A/i,\n    /^S/i,\n    /^O/i,\n    /^N/i,\n    /^D/i,\n  ],\n\n  any: [\n    /^Jan/i,\n    /^Feb/i,\n    /^Mrt/i,\n    /^Apr/i,\n    /^Mei/i,\n    /^Jun/i,\n    /^Jul/i,\n    /^Aug/i,\n    /^Sep/i,\n    /^Okt/i,\n    /^Nov/i,\n    /^Dec/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smdwv]/i,\n  short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,\n  abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,\n  wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],\n  any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^vm/i,\n    pm: /^nm/i,\n    midnight: /^middernag/i,\n    noon: /^middaguur/i,\n    morning: /oggend/i,\n    afternoon: /middag/i,\n    evening: /laat middag/i,\n    night: /aand/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./af/_lib/formatDistance.js\";\nimport { formatLong } from \"./af/_lib/formatLong.js\";\nimport { formatRelative } from \"./af/_lib/formatRelative.js\";\nimport { localize } from \"./af/_lib/localize.js\";\nimport { match } from \"./af/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Afrikaans locale.\n * @language Afrikaans\n * @iso-639-2 afr\n * @author Marnus Weststrate [@marnusw](https://github.com/marnusw)\n */\nexport const af = {\n  code: \"af\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default af;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية\",\n    two: \"أقل من ثانيتين\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية واحدة\",\n    two: \"ثانيتان\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نصف دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقائق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة واحدة\",\n    two: \"دقيقتان\",\n    threeToTen: \"{{count}} دقائق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"ساعة واحدة تقريباً\",\n    two: \"ساعتين تقريبا\",\n    threeToTen: \"{{count}} ساعات تقريباً\",\n    other: \"{{count}} ساعة تقريباً\",\n  },\n\n  xHours: {\n    one: \"ساعة واحدة\",\n    two: \"ساعتان\",\n    threeToTen: \"{{count}} ساعات\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"يوم واحد\",\n    two: \"يومان\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"أسبوع واحد تقريبا\",\n    two: \"أسبوعين تقريبا\",\n    threeToTen: \"{{count}} أسابيع تقريبا\",\n    other: \"{{count}} أسبوعا تقريبا\",\n  },\n\n  xWeeks: {\n    one: \"أسبوع واحد\",\n    two: \"أسبوعان\",\n    threeToTen: \"{{count}} أسابيع\",\n    other: \"{{count}} أسبوعا\",\n  },\n\n  aboutXMonths: {\n    one: \"شهر واحد تقريباً\",\n    two: \"شهرين تقريبا\",\n    threeToTen: \"{{count}} أشهر تقريبا\",\n    other: \"{{count}} شهرا تقريباً\",\n  },\n\n  xMonths: {\n    one: \"شهر واحد\",\n    two: \"شهران\",\n    threeToTen: \"{{count}} أشهر\",\n    other: \"{{count}} شهرا\",\n  },\n\n  aboutXYears: {\n    one: \"سنة واحدة تقريباً\",\n    two: \"سنتين تقريبا\",\n    threeToTen: \"{{count}} سنوات تقريباً\",\n    other: \"{{count}} سنة تقريباً\",\n  },\n\n  xYears: {\n    one: \"سنة واحد\",\n    two: \"سنتان\",\n    threeToTen: \"{{count}} سنوات\",\n    other: \"{{count}} سنة\",\n  },\n\n  overXYears: {\n    one: \"أكثر من سنة\",\n    two: \"أكثر من سنتين\",\n    threeToTen: \"أكثر من {{count}} سنوات\",\n    other: \"أكثر من {{count}} سنة\",\n  },\n\n  almostXYears: {\n    one: \"ما يقارب سنة واحدة\",\n    two: \"ما يقارب سنتين\",\n    threeToTen: \"ما يقارب {{count}} سنوات\",\n    other: \"ما يقارب {{count}} سنة\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  const usageGroup = formatDistanceLocale[token];\n  let result;\n  if (typeof usageGroup === \"string\") {\n    result = usageGroup;\n  } else if (count === 1) {\n    result = usageGroup.one;\n  } else if (count === 2) {\n    result = usageGroup.two;\n  } else if (count <= 10) {\n    result = usageGroup.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = usageGroup.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"خلال \" + result;\n    } else {\n      return \"منذ \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE، do MMMM y\",\n  long: \"do MMMM y\",\n  medium: \"d MMM y\",\n  short: \"dd/MM/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss\",\n  long: \"HH:mm:ss\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'عند الساعة' {{time}}\",\n  long: \"{{date}} 'عند الساعة' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"eeee 'الماضي عند الساعة' p\",\n  yesterday: \"'الأمس عند الساعة' p\",\n  today: \"'اليوم عند الساعة' p\",\n  tomorrow: \"'غدا عند الساعة' p\",\n  nextWeek: \"eeee 'القادم عند الساعة' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token) => formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م.\", \"ب.م.\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"ي\", \"ف\", \"م\", \"أ\", \"م\", \"ي\", \"ي\", \"أ\", \"س\", \"أ\", \"ن\", \"د\"],\n  abbreviated: [\n    \"يناير\",\n    \"فبراير\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونيو\",\n    \"يوليو\",\n    \"أغسطس\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n\n  wide: [\n    \"يناير\",\n    \"فبراير\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونيو\",\n    \"يوليو\",\n    \"أغسطس\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n\n  wide: [\n    \"الأحد\",\n    \"الاثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"المساء\",\n    night: \"الليل\",\n    midnight: \"منتصف الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"المساء\",\n    night: \"الليل\",\n    midnight: \"منتصف الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"المساء\",\n    night: \"الليل\",\n    midnight: \"منتصف الليل\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"في الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n    midnight: \"منتصف الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"في الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n    midnight: \"منتصف الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    morning: \"في الصباح\",\n    noon: \"الظهر\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n    midnight: \"منتصف الليل\",\n  },\n};\n\nconst ordinalNumber = (num) => String(num);\n\nexport const localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\nimport { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /[قب]/,\n  abbreviated: /[قب]\\.م\\./,\n  wide: /(قبل|بعد) الميلاد/,\n};\nconst parseEraPatterns = {\n  any: [/قبل/, /بعد/],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /ر[1234]/,\n  wide: /الربع (الأول|الثاني|الثالث|الرابع)/,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[أيفمسند]/,\n  abbreviated:\n    /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,\n  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ي/i,\n    /^ف/i,\n    /^م/i,\n    /^أ/i,\n    /^م/i,\n    /^ي/i,\n    /^ي/i,\n    /^أ/i,\n    /^س/i,\n    /^أ/i,\n    /^ن/i,\n    /^د/i,\n  ],\n\n  any: [\n    /^يناير/i,\n    /^فبراير/i,\n    /^مارس/i,\n    /^أبريل/i,\n    /^مايو/i,\n    /^يونيو/i,\n    /^يوليو/i,\n    /^أغسطس/i,\n    /^سبتمبر/i,\n    /^أكتوبر/i,\n    /^نوفمبر/i,\n    /^ديسمبر/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[حنثرخجس]/i,\n  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],\n  wide: [\n    /^الأحد/i,\n    /^الاثنين/i,\n    /^الثلاثاء/i,\n    /^الأربعاء/i,\n    /^الخميس/i,\n    /^الجمعة/i,\n    /^السبت/i,\n  ],\n\n  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,\n  any: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^ص/,\n    pm: /^م/,\n    midnight: /منتصف الليل/,\n    noon: /الظهر/,\n    afternoon: /بعد الظهر/,\n    morning: /في الصباح/,\n    evening: /في المساء/,\n    night: /في الليل/,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar/_lib/formatRelative.js\";\nimport { localize } from \"./ar/_lib/localize.js\";\nimport { match } from \"./ar/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Modern Standard Arabic - Al-fussha).\n * @language Modern Standard Arabic\n * @iso-639-2 ara\n * @author Abdallah Hassan [@AbdallahAHO](https://github.com/AbdallahAHO)\n * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)\n */\nexport const ar = {\n  code: \"ar\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 6 /* Saturday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ar;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية واحدة\",\n    two: \"أقل من ثانتين\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية واحدة\",\n    two: \"ثانتين\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نصف دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقائق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة واحدة\",\n    two: \"دقيقتين\",\n    threeToTen: \"{{count}} دقائق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"ساعة واحدة تقريباً\",\n    two: \"ساعتين تقريباً\",\n    threeToTen: \"{{count}} ساعات تقريباً\",\n    other: \"{{count}} ساعة تقريباً\",\n  },\n\n  xHours: {\n    one: \"ساعة واحدة\",\n    two: \"ساعتين\",\n    threeToTen: \"{{count}} ساعات\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"يوم واحد\",\n    two: \"يومين\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"أسبوع واحد تقريباً\",\n    two: \"أسبوعين تقريباً\",\n    threeToTen: \"{{count}} أسابيع تقريباً\",\n    other: \"{{count}} أسبوع تقريباً\",\n  },\n\n  xWeeks: {\n    one: \"أسبوع واحد\",\n    two: \"أسبوعين\",\n    threeToTen: \"{{count}} أسابيع\",\n    other: \"{{count}} أسبوع\",\n  },\n\n  aboutXMonths: {\n    one: \"شهر واحد تقريباً\",\n    two: \"شهرين تقريباً\",\n    threeToTen: \"{{count}} أشهر تقريباً\",\n    other: \"{{count}} شهر تقريباً\",\n  },\n\n  xMonths: {\n    one: \"شهر واحد\",\n    two: \"شهرين\",\n    threeToTen: \"{{count}} أشهر\",\n    other: \"{{count}} شهر\",\n  },\n\n  aboutXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n\n  xYears: {\n    one: \"عام واحد\",\n    two: \"عامين\",\n    threeToTen: \"{{count}} أعوام\",\n    other: \"{{count}} عام\",\n  },\n\n  overXYears: {\n    one: \"أكثر من عام\",\n    two: \"أكثر من عامين\",\n    threeToTen: \"أكثر من {{count}} أعوام\",\n    other: \"أكثر من {{count}} عام\",\n  },\n\n  almostXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  options = options || {};\n\n  const usageGroup = formatDistanceLocale[token];\n  let result;\n  if (typeof usageGroup === \"string\") {\n    result = usageGroup;\n  } else if (count === 1) {\n    result = usageGroup.one;\n  } else if (count === 2) {\n    result = usageGroup.two;\n  } else if (count <= 10) {\n    result = usageGroup.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = usageGroup.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"في خلال \" + result;\n    } else {\n      return \"منذ \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'عند' {{time}}\",\n  long: \"{{date}} 'عند' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'أخر' eeee 'عند' p\",\n  yesterday: \"'أمس عند' p\",\n  today: \"'اليوم عند' p\",\n  tomorrow: \"'غداً عند' p\",\n  nextWeek: \"eeee 'عند' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) => {\n  return formatRelativeLocale[token];\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م.\", \"ب.م.\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"ج\", \"ف\", \"م\", \"أ\", \"م\", \"ج\", \"ج\", \"أ\", \"س\", \"أ\", \"ن\", \"د\"],\n  abbreviated: [\n    \"جانـ\",\n    \"فيفـ\",\n    \"مارس\",\n    \"أفريل\",\n    \"مايـ\",\n    \"جوانـ\",\n    \"جويـ\",\n    \"أوت\",\n    \"سبتـ\",\n    \"أكتـ\",\n    \"نوفـ\",\n    \"ديسـ\",\n  ],\n\n  wide: [\n    \"جانفي\",\n    \"فيفري\",\n    \"مارس\",\n    \"أفريل\",\n    \"ماي\",\n    \"جوان\",\n    \"جويلية\",\n    \"أوت\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنـ\", \"ثلا\", \"أربـ\", \"خميـ\", \"جمعة\", \"سبت\"],\n  wide: [\n    \"الأحد\",\n    \"الاثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber) => {\n  return String(dirtyNumber);\n};\n\nexport const localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => Number(quarter) - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\nimport { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(ق|ب)/i,\n  abbreviated: /^(ق\\.?\\s?م\\.?|ق\\.?\\s?م\\.?\\s?|a\\.?\\s?d\\.?|c\\.?\\s?)/i,\n  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i,\n};\nconst parseEraPatterns = {\n  any: [/^قبل/i, /^بعد/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^ر[1234]/i,\n  wide: /^الربع [1234]/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[جفمأسند]/i,\n  abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,\n  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i,\n};\n\nconst parseMonthPatterns = {\n  narrow: [\n    /^ج/i,\n    /^ف/i,\n    /^م/i,\n    /^أ/i,\n    /^م/i,\n    /^ج/i,\n    /^ج/i,\n    /^أ/i,\n    /^س/i,\n    /^أ/i,\n    /^ن/i,\n    /^د/i,\n  ],\n\n  any: [\n    /^جان/i,\n    /^فيف/i,\n    /^مار/i,\n    /^أفر/i,\n    /^ماي/i,\n    /^جوا/i,\n    /^جوي/i,\n    /^أوت/i,\n    /^سبت/i,\n    /^أكت/i,\n    /^نوف/i,\n    /^ديس/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[حنثرخجس]/i,\n  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,\n  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],\n  wide: [\n    /^الأحد/i,\n    /^الاثنين/i,\n    /^الثلاثاء/i,\n    /^الأربعاء/i,\n    /^الخميس/i,\n    /^الجمعة/i,\n    /^السبت/i,\n  ],\n\n  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => Number(index) + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar-DZ/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar-DZ/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar-DZ/_lib/formatRelative.js\";\nimport { localize } from \"./ar-DZ/_lib/localize.js\";\nimport { match } from \"./ar-DZ/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Algerian Arabic).\n * @language Algerian Arabic\n * @iso-639-2 ara\n * @author Badreddine Boumaza [@badre429](https://github.com/badre429)\n * @author Ahmed ElShahat [@elshahat](https://github.com/elshahat)\n */\nexport const arDZ = {\n  code: \"ar-DZ\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default arDZ;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية\",\n    two: \"أقل من ثانيتين\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية\",\n    two: \"ثانيتين\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نص دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقايق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة\",\n    two: \"دقيقتين\",\n    threeToTen: \"{{count}} دقايق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"حوالي ساعة\",\n    two: \"حوالي ساعتين\",\n    threeToTen: \"حوالي {{count}} ساعات\",\n    other: \"حوالي {{count}} ساعة\",\n  },\n\n  xHours: {\n    one: \"ساعة\",\n    two: \"ساعتين\",\n    threeToTen: \"{{count}} ساعات\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"يوم\",\n    two: \"يومين\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"حوالي أسبوع\",\n    two: \"حوالي أسبوعين\",\n    threeToTen: \"حوالي {{count}} أسابيع\",\n    other: \"حوالي {{count}} أسبوع\",\n  },\n\n  xWeeks: {\n    one: \"أسبوع\",\n    two: \"أسبوعين\",\n    threeToTen: \"{{count}} أسابيع\",\n    other: \"{{count}} أسبوع\",\n  },\n\n  aboutXMonths: {\n    one: \"حوالي شهر\",\n    two: \"حوالي شهرين\",\n    threeToTen: \"حوالي {{count}} أشهر\",\n    other: \"حوالي {{count}} شهر\",\n  },\n\n  xMonths: {\n    one: \"شهر\",\n    two: \"شهرين\",\n    threeToTen: \"{{count}} أشهر\",\n    other: \"{{count}} شهر\",\n  },\n\n  aboutXYears: {\n    one: \"حوالي سنة\",\n    two: \"حوالي سنتين\",\n    threeToTen: \"حوالي {{count}} سنين\",\n    other: \"حوالي {{count}} سنة\",\n  },\n\n  xYears: {\n    one: \"عام\",\n    two: \"عامين\",\n    threeToTen: \"{{count}} أعوام\",\n    other: \"{{count}} عام\",\n  },\n\n  overXYears: {\n    one: \"أكثر من سنة\",\n    two: \"أكثر من سنتين\",\n    threeToTen: \"أكثر من {{count}} سنين\",\n    other: \"أكثر من {{count}} سنة\",\n  },\n\n  almostXYears: {\n    one: \"عام تقريبًا\",\n    two: \"عامين تقريبًا\",\n    threeToTen: \"{{count}} أعوام تقريبًا\",\n    other: \"{{count}} عام تقريبًا\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else if (count === 2) {\n    result = tokenValue.two;\n  } else if (count <= 10) {\n    result = tokenValue.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return `في خلال ${result}`;\n    } else {\n      return `منذ ${result}`;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE، do MMMM y\",\n  long: \"do MMMM y\",\n  medium: \"dd/MMM/y\",\n  short: \"d/MM/y\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'الساعة' {{time}}\",\n  long: \"{{date}} 'الساعة' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"eeee 'اللي جاي الساعة' p\",\n  yesterday: \"'إمبارح الساعة' p\",\n  today: \"'النهاردة الساعة' p\",\n  tomorrow: \"'بكرة الساعة' p\",\n  nextWeek: \"eeee 'الساعة' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م\", \"ب.م\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"ي\", \"ف\", \"م\", \"أ\", \"م\", \"ي\", \"ي\", \"أ\", \"س\", \"أ\", \"ن\", \"د\"],\n  abbreviated: [\n    \"ينا\",\n    \"فبر\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونـ\",\n    \"يولـ\",\n    \"أغسـ\",\n    \"سبتـ\",\n    \"أكتـ\",\n    \"نوفـ\",\n    \"ديسـ\",\n  ],\n\n  wide: [\n    \"يناير\",\n    \"فبراير\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونيو\",\n    \"يوليو\",\n    \"أغسطس\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n\n  wide: [\n    \"الأحد\",\n    \"الاثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءً\",\n    night: \"ليلاً\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهراً\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءً\",\n    night: \"ليلاً\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهراً\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءً\",\n    night: \"ليلاً\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهراً\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    morning: \"في الصباح\",\n    noon: \"ظهراً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  return String(dirtyNumber);\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)/;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(ق|ب)/g,\n  abbreviated: /^(ق.م|ب.م)/g,\n  wide: /^(قبل الميلاد|بعد الميلاد)/g,\n};\nconst parseEraPatterns = {\n  any: [/^ق/g, /^ب/g],\n};\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/,\n  abbreviated: /^ر[1234]/,\n  wide: /^الربع (الأول|الثاني|الثالث|الرابع)/,\n};\nconst parseQuarterPatterns = {\n  wide: [/الربع الأول/, /الربع الثاني/, /الربع الثالث/, /الربع الرابع/],\n\n  any: [/1/, /2/, /3/, /4/],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^(ي|ف|م|أ|س|ن|د)/,\n  abbreviated: /^(ينا|فبر|مارس|أبريل|مايو|يونـ|يولـ|أغسـ|سبتـ|أكتـ|نوفـ|ديسـ)/,\n  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ي/,\n    /^ف/,\n    /^م/,\n    /^أ/,\n    /^م/,\n    /^ي/,\n    /^ي/,\n    /^أ/,\n    /^س/,\n    /^أ/,\n    /^ن/,\n    /^د/,\n  ],\n\n  any: [\n    /^ينا/,\n    /^فبر/,\n    /^مارس/,\n    /^أبريل/,\n    /^مايو/,\n    /^يون/,\n    /^يول/,\n    /^أغس/,\n    /^سبت/,\n    /^أكت/,\n    /^نوف/,\n    /^ديس/,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^(ح|ن|ث|ر|خ|ج|س)/,\n  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,\n  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,\n  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/, /^ن/, /^ث/, /^ر/, /^خ/, /^ج/, /^س/],\n  any: [/أحد/, /اثنين/, /ثلاثاء/, /أربعاء/, /خميس/, /جمعة/, /سبت/],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(ص|م|ن|ظ|في الصباح|بعد الظهر|في المساء|في الليل)/,\n  abbreviated: /^(ص|م|نصف الليل|ظهراً|في الصباح|بعد الظهر|في المساء|في الليل)/,\n  wide: /^(ص|م|نصف الليل|في الصباح|ظهراً|بعد الظهر|في المساء|في الليل)/,\n  any: /^(ص|م|صباح|ظهر|مساء|ليل)/,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^ص/,\n    pm: /^م/,\n    midnight: /^ن/,\n    noon: /^ظ/,\n    morning: /^ص/,\n    afternoon: /^بعد/,\n    evening: /^م/,\n    night: /^ل/,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    },\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar-EG/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar-EG/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar-EG/_lib/formatRelative.js\";\nimport { localize } from \"./ar-EG/_lib/localize.js\";\nimport { match } from \"./ar-EG/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Egypt).\n * @language Arabic\n * @iso-639-2 ara\n * @author AbdAllah AbdElFattah [@AbdAllahAbdElFattah13](https://github.com/AbdAllahAbdElFattah13)\n */\nexport const arEG = {\n  code: \"ar-EG\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default arEG;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية واحدة\",\n    two: \"أقل من ثانتين\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية واحدة\",\n    two: \"ثانتين\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نصف دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقائق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة واحدة\",\n    two: \"دقيقتين\",\n    threeToTen: \"{{count}} دقائق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"ساعة واحدة تقريباً\",\n    two: \"ساعتين تقريباً\",\n    threeToTen: \"{{count}} ساعات تقريباً\",\n    other: \"{{count}} ساعة تقريباً\",\n  },\n\n  xHours: {\n    one: \"ساعة واحدة\",\n    two: \"ساعتين\",\n    threeToTen: \"{{count}} ساعات\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"يوم واحد\",\n    two: \"يومين\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"أسبوع واحد تقريباً\",\n    two: \"أسبوعين تقريباً\",\n    threeToTen: \"{{count}} أسابيع تقريباً\",\n    other: \"{{count}} أسبوع تقريباً\",\n  },\n\n  xWeeks: {\n    one: \"أسبوع واحد\",\n    two: \"أسبوعين\",\n    threeToTen: \"{{count}} أسابيع\",\n    other: \"{{count}} أسبوع\",\n  },\n\n  aboutXMonths: {\n    one: \"شهر واحد تقريباً\",\n    two: \"شهرين تقريباً\",\n    threeToTen: \"{{count}} أشهر تقريباً\",\n    other: \"{{count}} شهر تقريباً\",\n  },\n\n  xMonths: {\n    one: \"شهر واحد\",\n    two: \"شهرين\",\n    threeToTen: \"{{count}} أشهر\",\n    other: \"{{count}} شهر\",\n  },\n\n  aboutXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n\n  xYears: {\n    one: \"عام واحد\",\n    two: \"عامين\",\n    threeToTen: \"{{count}} أعوام\",\n    other: \"{{count}} عام\",\n  },\n\n  overXYears: {\n    one: \"أكثر من عام\",\n    two: \"أكثر من عامين\",\n    threeToTen: \"أكثر من {{count}} أعوام\",\n    other: \"أكثر من {{count}} عام\",\n  },\n\n  almostXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  options = options || {};\n\n  const usageGroup = formatDistanceLocale[token];\n  let result;\n  if (typeof usageGroup === \"string\") {\n    result = usageGroup;\n  } else if (count === 1) {\n    result = usageGroup.one;\n  } else if (count === 2) {\n    result = usageGroup.two;\n  } else if (count <= 10) {\n    result = usageGroup.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = usageGroup.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"في خلال \" + result;\n    } else {\n      return \"منذ \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'عند' {{time}}\",\n  long: \"{{date}} 'عند' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'أخر' eeee 'عند' p\",\n  yesterday: \"'أمس عند' p\",\n  today: \"'اليوم عند' p\",\n  tomorrow: \"'غداً عند' p\",\n  nextWeek: \"eeee 'عند' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) => {\n  return formatRelativeLocale[token];\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م.\", \"ب.م.\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"ي\", \"ف\", \"م\", \"أ\", \"م\", \"ي\", \"ي\", \"غ\", \"ش\", \"أ\", \"ن\", \"د\"],\n  abbreviated: [\n    \"ينا\",\n    \"فبر\",\n    \"مارس\",\n    \"أبريل\",\n    \"ماي\",\n    \"يونـ\",\n    \"يولـ\",\n    \"غشت\",\n    \"شتنـ\",\n    \"أكتـ\",\n    \"نونـ\",\n    \"دجنـ\",\n  ],\n\n  wide: [\n    \"يناير\",\n    \"فبراير\",\n    \"مارس\",\n    \"أبريل\",\n    \"ماي\",\n    \"يونيو\",\n    \"يوليوز\",\n    \"غشت\",\n    \"شتنبر\",\n    \"أكتوبر\",\n    \"نونبر\",\n    \"دجنبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنـ\", \"ثلا\", \"أربـ\", \"خميـ\", \"جمعة\", \"سبت\"],\n  wide: [\n    \"الأحد\",\n    \"الإثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber) => {\n  return String(dirtyNumber);\n};\n\nexport const localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => Number(quarter) - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\nimport { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(ق|ب)/i,\n  abbreviated: /^(ق\\.?\\s?م\\.?|ق\\.?\\s?م\\.?\\s?|a\\.?\\s?d\\.?|c\\.?\\s?)/i,\n  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i,\n};\nconst parseEraPatterns = {\n  any: [/^قبل/i, /^بعد/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^ر[1234]/i,\n  wide: /^الربع [1234]/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[يفمأمسند]/i,\n  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,\n  wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ي/i,\n    /^ف/i,\n    /^م/i,\n    /^أ/i,\n    /^م/i,\n    /^ي/i,\n    /^ي/i,\n    /^غ/i,\n    /^ش/i,\n    /^أ/i,\n    /^ن/i,\n    /^د/i,\n  ],\n\n  any: [\n    /^ين/i,\n    /^فب/i,\n    /^مار/i,\n    /^أب/i,\n    /^ماي/i,\n    /^يون/i,\n    /^يول/i,\n    /^غشت/i,\n    /^ش/i,\n    /^أك/i,\n    /^ن/i,\n    /^د/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[حنثرخجس]/i,\n  short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,\n  wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],\n  wide: [\n    /^الأحد/i,\n    /^الإثنين/i,\n    /^الثلاثاء/i,\n    /^الأربعاء/i,\n    /^الخميس/i,\n    /^الجمعة/i,\n    /^السبت/i,\n  ],\n\n  any: [/^أح/i, /^إث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => Number(index) + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar-MA/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar-MA/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar-MA/_lib/formatRelative.js\";\nimport { localize } from \"./ar-MA/_lib/localize.js\";\nimport { match } from \"./ar-MA/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Moroccan Arabic).\n * @language Moroccan Arabic\n * @iso-639-2 ara\n * @author Achraf Rrami [@rramiachraf](https://github.com/rramiachraf)\n */\nexport const arMA = {\n  code: \"ar-MA\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    // Monday is 1\n    weekStartsOn: 1,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default arMA;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية واحدة\",\n    two: \"أقل من ثانتين\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية واحدة\",\n    two: \"ثانتين\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نصف دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقائق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة واحدة\",\n    two: \"دقيقتين\",\n    threeToTen: \"{{count}} دقائق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"ساعة واحدة تقريباً\",\n    two: \"ساعتين تقريباً\",\n    threeToTen: \"{{count}} ساعات تقريباً\",\n    other: \"{{count}} ساعة تقريباً\",\n  },\n\n  xHours: {\n    one: \"ساعة واحدة\",\n    two: \"ساعتين\",\n    threeToTen: \"{{count}} ساعات\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"يوم واحد\",\n    two: \"يومين\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"أسبوع واحد تقريباً\",\n    two: \"أسبوعين تقريباً\",\n    threeToTen: \"{{count}} أسابيع تقريباً\",\n    other: \"{{count}} أسبوع تقريباً\",\n  },\n\n  xWeeks: {\n    one: \"أسبوع واحد\",\n    two: \"أسبوعين\",\n    threeToTen: \"{{count}} أسابيع\",\n    other: \"{{count}} أسبوع\",\n  },\n\n  aboutXMonths: {\n    one: \"شهر واحد تقريباً\",\n    two: \"شهرين تقريباً\",\n    threeToTen: \"{{count}} أشهر تقريباً\",\n    other: \"{{count}} شهر تقريباً\",\n  },\n\n  xMonths: {\n    one: \"شهر واحد\",\n    two: \"شهرين\",\n    threeToTen: \"{{count}} أشهر\",\n    other: \"{{count}} شهر\",\n  },\n\n  aboutXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n\n  xYears: {\n    one: \"عام واحد\",\n    two: \"عامين\",\n    threeToTen: \"{{count}} أعوام\",\n    other: \"{{count}} عام\",\n  },\n\n  overXYears: {\n    one: \"أكثر من عام\",\n    two: \"أكثر من عامين\",\n    threeToTen: \"أكثر من {{count}} أعوام\",\n    other: \"أكثر من {{count}} عام\",\n  },\n\n  almostXYears: {\n    one: \"عام واحد تقريباً\",\n    two: \"عامين تقريباً\",\n    threeToTen: \"{{count}} أعوام تقريباً\",\n    other: \"{{count}} عام تقريباً\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else if (count === 2) {\n    result = tokenValue.two;\n  } else if (count <= 10) {\n    result = tokenValue.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"في خلال \" + result;\n    } else {\n      return \"منذ \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'عند' {{time}}\",\n  long: \"{{date}} 'عند' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'أخر' eeee 'عند' p\",\n  yesterday: \"'أمس عند' p\",\n  today: \"'اليوم عند' p\",\n  tomorrow: \"'غداً عند' p\",\n  nextWeek: \"eeee 'عند' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م.\", \"ب.م.\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"ي\", \"ف\", \"م\", \"أ\", \"م\", \"ي\", \"ي\", \"أ\", \"س\", \"أ\", \"ن\", \"د\"],\n  abbreviated: [\n    \"ينا\",\n    \"فبر\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونـ\",\n    \"يولـ\",\n    \"أغسـ\",\n    \"سبتـ\",\n    \"أكتـ\",\n    \"نوفـ\",\n    \"ديسـ\",\n  ],\n\n  wide: [\n    \"يناير\",\n    \"فبراير\",\n    \"مارس\",\n    \"أبريل\",\n    \"مايو\",\n    \"يونيو\",\n    \"يوليو\",\n    \"أغسطس\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنـ\", \"ثلا\", \"أربـ\", \"خميـ\", \"جمعة\", \"سبت\"],\n  wide: [\n    \"الأحد\",\n    \"الاثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظهر\",\n    evening: \"مساءاً\",\n    night: \"ليلاً\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"ن\",\n    noon: \"ظ\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"في الصباح\",\n    afternoon: \"بعد الظهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"م\",\n    midnight: \"نصف الليل\",\n    noon: \"ظهر\",\n    morning: \"صباحاً\",\n    afternoon: \"بعد الظـهر\",\n    evening: \"في المساء\",\n    night: \"في الليل\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber) => {\n  return String(dirtyNumber);\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(ق|ب)/i,\n  abbreviated: /^(ق\\.?\\s?م\\.?|ق\\.?\\s?م\\.?\\s?|a\\.?\\s?d\\.?|c\\.?\\s?)/i,\n  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i,\n};\nconst parseEraPatterns = {\n  any: [/^قبل/i, /^بعد/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^ر[1234]/i,\n  wide: /^الربع [1234]/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[يفمأمسند]/i,\n  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,\n  wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ي/i,\n    /^ف/i,\n    /^م/i,\n    /^أ/i,\n    /^م/i,\n    /^ي/i,\n    /^ي/i,\n    /^أ/i,\n    /^س/i,\n    /^أ/i,\n    /^ن/i,\n    /^د/i,\n  ],\n\n  any: [\n    /^ين/i,\n    /^ف/i,\n    /^مار/i,\n    /^أب/i,\n    /^ماي/i,\n    /^يون/i,\n    /^يول/i,\n    /^أغ/i,\n    /^س/i,\n    /^أك/i,\n    /^ن/i,\n    /^د/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[حنثرخجس]/i,\n  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,\n  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],\n  wide: [\n    /^الأحد/i,\n    /^الاثنين/i,\n    /^الثلاثاء/i,\n    /^الأربعاء/i,\n    /^الخميس/i,\n    /^الجمعة/i,\n    /^السبت/i,\n  ],\n\n  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar-SA/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar-SA/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar-SA/_lib/formatRelative.js\";\nimport { localize } from \"./ar-SA/_lib/localize.js\";\nimport { match } from \"./ar-SA/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Sauid Arabic).\n * @language Arabic\n * @iso-639-2 ara\n * @author Dhaifallah Alwadani [@dalwadani](https://github.com/dalwadani)\n */\nexport const arSA = {\n  code: \"ar-SA\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default arSA;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"أقل من ثانية\",\n    two: \"أقل من زوز ثواني\",\n    threeToTen: \"أقل من {{count}} ثواني\",\n    other: \"أقل من {{count}} ثانية\",\n  },\n\n  xSeconds: {\n    one: \"ثانية\",\n    two: \"زوز ثواني\",\n    threeToTen: \"{{count}} ثواني\",\n    other: \"{{count}} ثانية\",\n  },\n\n  halfAMinute: \"نص دقيقة\",\n\n  lessThanXMinutes: {\n    one: \"أقل من دقيقة\",\n    two: \"أقل من دقيقتين\",\n    threeToTen: \"أقل من {{count}} دقايق\",\n    other: \"أقل من {{count}} دقيقة\",\n  },\n\n  xMinutes: {\n    one: \"دقيقة\",\n    two: \"دقيقتين\",\n    threeToTen: \"{{count}} دقايق\",\n    other: \"{{count}} دقيقة\",\n  },\n\n  aboutXHours: {\n    one: \"ساعة تقريب\",\n    two: \"ساعتين تقريب\",\n    threeToTen: \"{{count}} سوايع تقريب\",\n    other: \"{{count}} ساعة تقريب\",\n  },\n\n  xHours: {\n    one: \"ساعة\",\n    two: \"ساعتين\",\n    threeToTen: \"{{count}} سوايع\",\n    other: \"{{count}} ساعة\",\n  },\n\n  xDays: {\n    one: \"نهار\",\n    two: \"نهارين\",\n    threeToTen: \"{{count}} أيام\",\n    other: \"{{count}} يوم\",\n  },\n\n  aboutXWeeks: {\n    one: \"جمعة تقريب\",\n    two: \"جمعتين تقريب\",\n    threeToTen: \"{{count}} جماع تقريب\",\n    other: \"{{count}} جمعة تقريب\",\n  },\n\n  xWeeks: {\n    one: \"جمعة\",\n    two: \"جمعتين\",\n    threeToTen: \"{{count}} جماع\",\n    other: \"{{count}} جمعة\",\n  },\n\n  aboutXMonths: {\n    one: \"شهر تقريب\",\n    two: \"شهرين تقريب\",\n    threeToTen: \"{{count}} أشهرة تقريب\",\n    other: \"{{count}} شهر تقريب\",\n  },\n\n  xMonths: {\n    one: \"شهر\",\n    two: \"شهرين\",\n    threeToTen: \"{{count}} أشهرة\",\n    other: \"{{count}} شهر\",\n  },\n\n  aboutXYears: {\n    one: \"عام تقريب\",\n    two: \"عامين تقريب\",\n    threeToTen: \"{{count}} أعوام تقريب\",\n    other: \"{{count}} عام تقريب\",\n  },\n\n  xYears: {\n    one: \"عام\",\n    two: \"عامين\",\n    threeToTen: \"{{count}} أعوام\",\n    other: \"{{count}} عام\",\n  },\n\n  overXYears: {\n    one: \"أكثر من عام\",\n    two: \"أكثر من عامين\",\n    threeToTen: \"أكثر من {{count}} أعوام\",\n    other: \"أكثر من {{count}} عام\",\n  },\n\n  almostXYears: {\n    one: \"عام تقريب\",\n    two: \"عامين تقريب\",\n    threeToTen: \"{{count}} أعوام تقريب\",\n    other: \"{{count}} عام تقريب\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  const usageGroup = formatDistanceLocale[token];\n  let result;\n  if (typeof usageGroup === \"string\") {\n    result = usageGroup;\n  } else if (count === 1) {\n    result = usageGroup.one;\n  } else if (count === 2) {\n    result = usageGroup.two;\n  } else if (count <= 10) {\n    result = usageGroup.threeToTen.replace(\"{{count}}\", String(count));\n  } else {\n    result = usageGroup.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"في \" + result;\n    } else {\n      return \"عندو \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE، do MMMM y\",\n  long: \"do MMMM y\",\n  medium: \"d MMM y\",\n  short: \"dd/MM/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss\",\n  long: \"HH:mm:ss\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'مع' {{time}}\",\n  long: \"{{date}} 'مع' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"eeee 'إلي فات مع' p\",\n  yesterday: \"'البارح مع' p\",\n  today: \"'اليوم مع' p\",\n  tomorrow: \"'غدوة مع' p\",\n  nextWeek: \"eeee 'الجمعة الجاية مع' p 'نهار'\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token) => formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"ق\", \"ب\"],\n  abbreviated: [\"ق.م.\", \"ب.م.\"],\n  wide: [\"قبل الميلاد\", \"بعد الميلاد\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"ر1\", \"ر2\", \"ر3\", \"ر4\"],\n  wide: [\"الربع الأول\", \"الربع الثاني\", \"الربع الثالث\", \"الربع الرابع\"],\n};\n\nconst monthValues = {\n  narrow: [\"د\", \"ن\", \"أ\", \"س\", \"أ\", \"ج\", \"ج\", \"م\", \"أ\", \"م\", \"ف\", \"ج\"],\n  abbreviated: [\n    \"جانفي\",\n    \"فيفري\",\n    \"مارس\",\n    \"أفريل\",\n    \"ماي\",\n    \"جوان\",\n    \"جويلية\",\n    \"أوت\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n\n  wide: [\n    \"جانفي\",\n    \"فيفري\",\n    \"مارس\",\n    \"أفريل\",\n    \"ماي\",\n    \"جوان\",\n    \"جويلية\",\n    \"أوت\",\n    \"سبتمبر\",\n    \"أكتوبر\",\n    \"نوفمبر\",\n    \"ديسمبر\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"],\n  short: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n  abbreviated: [\"أحد\", \"اثنين\", \"ثلاثاء\", \"أربعاء\", \"خميس\", \"جمعة\", \"سبت\"],\n\n  wide: [\n    \"الأحد\",\n    \"الاثنين\",\n    \"الثلاثاء\",\n    \"الأربعاء\",\n    \"الخميس\",\n    \"الجمعة\",\n    \"السبت\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"الصباح\",\n    noon: \"القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"العشية\",\n    night: \"الليل\",\n    midnight: \"نص الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"الصباح\",\n    noon: \"القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"العشية\",\n    night: \"الليل\",\n    midnight: \"نص الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"الصباح\",\n    noon: \"القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"العشية\",\n    night: \"الليل\",\n    midnight: \"نص الليل\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"في الصباح\",\n    noon: \"في القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"في العشية\",\n    night: \"في الليل\",\n    midnight: \"نص الليل\",\n  },\n  abbreviated: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"في الصباح\",\n    noon: \"في القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"في العشية\",\n    night: \"في الليل\",\n    midnight: \"نص الليل\",\n  },\n  wide: {\n    am: \"ص\",\n    pm: \"ع\",\n    morning: \"في الصباح\",\n    noon: \"في القايلة\",\n    afternoon: \"بعد القايلة\",\n    evening: \"في العشية\",\n    night: \"في الليل\",\n    midnight: \"نص الليل\",\n  },\n};\n\nconst ordinalNumber = (num) => String(num);\n\nexport const localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\nimport { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /[قب]/,\n  abbreviated: /[قب]\\.م\\./,\n  wide: /(قبل|بعد) الميلاد/,\n};\nconst parseEraPatterns = {\n  any: [/قبل/, /بعد/],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /ر[1234]/,\n  wide: /الربع (الأول|الثاني|الثالث|الرابع)/,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[جفمأسند]/,\n  abbreviated:\n    /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,\n  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ج/i,\n    /^ف/i,\n    /^م/i,\n    /^أ/i,\n    /^م/i,\n    /^ج/i,\n    /^ج/i,\n    /^أ/i,\n    /^س/i,\n    /^أ/i,\n    /^ن/i,\n    /^د/i,\n  ],\n\n  any: [\n    /^جانفي/i,\n    /^فيفري/i,\n    /^مارس/i,\n    /^أفريل/i,\n    /^ماي/i,\n    /^جوان/i,\n    /^جويلية/i,\n    /^أوت/i,\n    /^سبتمبر/i,\n    /^أكتوبر/i,\n    /^نوفمبر/i,\n    /^ديسمبر/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[حنثرخجس]/i,\n  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,\n  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],\n  wide: [\n    /^الأحد/i,\n    /^الاثنين/i,\n    /^الثلاثاء/i,\n    /^الأربعاء/i,\n    /^الخميس/i,\n    /^الجمعة/i,\n    /^السبت/i,\n  ],\n\n  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(ص|ع|ن ل|ل|(في|مع) (صباح|قايلة|عشية|ليل))/,\n  any: /^([صع]|نص الليل|قايلة|(في|مع) (صباح|قايلة|عشية|ليل))/,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^ص/,\n    pm: /^ع/,\n    midnight: /نص الليل/,\n    noon: /قايلة/,\n    afternoon: /بعد القايلة/,\n    morning: /صباح/,\n    evening: /عشية/,\n    night: /ليل/,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ar-TN/_lib/formatDistance.js\";\nimport { formatLong } from \"./ar-TN/_lib/formatLong.js\";\nimport { formatRelative } from \"./ar-TN/_lib/formatRelative.js\";\nimport { localize } from \"./ar-TN/_lib/localize.js\";\nimport { match } from \"./ar-TN/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Arabic locale (Tunisian Arabic).\n * @language Arabic\n * @iso-639-2 ara\n * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)\n */\nexport const arTN = {\n  code: \"ar-TN\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default arTN;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"bir saniyədən az\",\n    other: \"{{count}} bir saniyədən az\",\n  },\n\n  xSeconds: {\n    one: \"1 saniyə\",\n    other: \"{{count}} saniyə\",\n  },\n\n  halfAMinute: \"yarım dəqiqə\",\n\n  lessThanXMinutes: {\n    one: \"bir dəqiqədən az\",\n    other: \"{{count}} bir dəqiqədən az\",\n  },\n\n  xMinutes: {\n    one: \"bir dəqiqə\",\n    other: \"{{count}} dəqiqə\",\n  },\n\n  aboutXHours: {\n    one: \"təxminən 1 saat\",\n    other: \"təxminən {{count}} saat\",\n  },\n\n  xHours: {\n    one: \"1 saat\",\n    other: \"{{count}} saat\",\n  },\n\n  xDays: {\n    one: \"1 gün\",\n    other: \"{{count}} gün\",\n  },\n\n  aboutXWeeks: {\n    one: \"təxminən 1 həftə\",\n    other: \"təxminən {{count}} həftə\",\n  },\n\n  xWeeks: {\n    one: \"1 həftə\",\n    other: \"{{count}} həftə\",\n  },\n\n  aboutXMonths: {\n    one: \"təxminən 1 ay\",\n    other: \"təxminən {{count}} ay\",\n  },\n\n  xMonths: {\n    one: \"1 ay\",\n    other: \"{{count}} ay\",\n  },\n\n  aboutXYears: {\n    one: \"təxminən 1 il\",\n    other: \"təxminən {{count}} il\",\n  },\n\n  xYears: {\n    one: \"1 il\",\n    other: \"{{count}} il\",\n  },\n\n  overXYears: {\n    one: \"1 ildən çox\",\n    other: \"{{count}} ildən çox\",\n  },\n\n  almostXYears: {\n    one: \"demək olar ki 1 il\",\n    other: \"demək olar ki {{count}} il\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return result + \" sonra\";\n    } else {\n      return result + \" əvvəl\";\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, do MMMM y 'il'\",\n  long: \"do MMMM y 'il'\",\n  medium: \"d MMM y 'il'\",\n  short: \"dd.MM.yyyy\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} {{time}} - 'də'\",\n  long: \"{{date}} {{time}} - 'də'\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'sonuncu' eeee p -'də'\",\n  yesterday: \"'dünən' p -'də'\",\n  today: \"'bugün' p -'də'\",\n  tomorrow: \"'sabah' p -'də'\",\n  nextWeek: \"eeee p -'də'\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"e.ə\", \"b.e\"],\n  abbreviated: [\"e.ə\", \"b.e\"],\n  wide: [\"eramızdan əvvəl\", \"bizim era\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"K1\", \"K2\", \"K3\", \"K4\"],\n  wide: [\"1ci kvartal\", \"2ci kvartal\", \"3cü kvartal\", \"4cü kvartal\"],\n};\nconst monthValues = {\n  narrow: [\"Y\", \"F\", \"M\", \"A\", \"M\", \"İ\", \"İ\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Yan\",\n    \"Fev\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"İyun\",\n    \"İyul\",\n    \"Avq\",\n    \"Sen\",\n    \"Okt\",\n    \"Noy\",\n    \"Dek\",\n  ],\n\n  wide: [\n    \"Yanvar\",\n    \"Fevral\",\n    \"Mart\",\n    \"Aprel\",\n    \"May\",\n    \"İyun\",\n    \"İyul\",\n    \"Avqust\",\n    \"Sentyabr\",\n    \"Oktyabr\",\n    \"Noyabr\",\n    \"Dekabr\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"B.\", \"B.e\", \"Ç.a\", \"Ç.\", \"C.a\", \"C.\", \"Ş.\"],\n  short: [\"B.\", \"B.e\", \"Ç.a\", \"Ç.\", \"C.a\", \"C.\", \"Ş.\"],\n  abbreviated: [\"Baz\", \"Baz.e\", \"Çər.a\", \"Çər\", \"Cüm.a\", \"Cüm\", \"Şə\"],\n  wide: [\n    \"Bazar\",\n    \"Bazar ertəsi\",\n    \"Çərşənbə axşamı\",\n    \"Çərşənbə\",\n    \"Cümə axşamı\",\n    \"Cümə\",\n    \"Şənbə\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"am\",\n    pm: \"pm\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"gecəyarı\",\n    noon: \"gün\",\n    morning: \"səhər\",\n    afternoon: \"gündüz\",\n    evening: \"axşam\",\n    night: \"gecə\",\n  },\n};\n\nconst suffixes = {\n  1: \"-inci\",\n  5: \"-inci\",\n  8: \"-inci\",\n  70: \"-inci\",\n  80: \"-inci\",\n  2: \"-nci\",\n  7: \"-nci\",\n  20: \"-nci\",\n  50: \"-nci\",\n  3: \"-üncü\",\n  4: \"-üncü\",\n  100: \"-üncü\",\n  6: \"-ncı\",\n  9: \"-uncu\",\n  10: \"-uncu\",\n  30: \"-uncu\",\n  60: \"-ıncı\",\n  90: \"-ıncı\",\n};\n\nconst getSuffix = (number) => {\n  if (number === 0) {\n    // special case for zero\n    return number + \"-ıncı\";\n  }\n\n  const a = number % 10;\n  const b = (number % 100) - a;\n  const c = number >= 100 ? 100 : null;\n\n  if (suffixes[a]) {\n    return suffixes[a];\n  } else if (suffixes[b]) {\n    return suffixes[b];\n  } else if (c !== null) {\n    return suffixes[c];\n  }\n  return \"\";\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n  const suffix = getSuffix(number);\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)$/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)$/i,\n  wide: /^(bizim eradan əvvəl|bizim era)$/i,\n};\nconst parseEraPatterns = {\n  any: [/^b$/i, /^(a|c)$/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]$/i,\n  abbreviated: /^K[1234]$/i,\n  wide: /^[1234](ci)? kvartal$/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[(?-i)yfmaisond]$/i,\n  abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,\n  wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^[(?-i)y]$/i,\n    /^[(?-i)f]$/i,\n    /^[(?-i)m]$/i,\n    /^[(?-i)a]$/i,\n    /^[(?-i)m]$/i,\n    /^[(?-i)i]$/i,\n    /^[(?-i)i]$/i,\n    /^[(?-i)a]$/i,\n    /^[(?-i)s]$/i,\n    /^[(?-i)o]$/i,\n    /^[(?-i)n]$/i,\n    /^[(?-i)d]$/i,\n  ],\n\n  abbreviated: [\n    /^Yan$/i,\n    /^Fev$/i,\n    /^Mar$/i,\n    /^Apr$/i,\n    /^May$/i,\n    /^İyun$/i,\n    /^İyul$/i,\n    /^Avg$/i,\n    /^Sen$/i,\n    /^Okt$/i,\n    /^Noy$/i,\n    /^Dek$/i,\n  ],\n\n  wide: [\n    /^Yanvar$/i,\n    /^Fevral$/i,\n    /^Mart$/i,\n    /^Aprel$/i,\n    /^May$/i,\n    /^İyun$/i,\n    /^İyul$/i,\n    /^Avgust$/i,\n    /^Sentyabr$/i,\n    /^Oktyabr$/i,\n    /^Noyabr$/i,\n    /^Dekabr$/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^(B\\.|B\\.e|Ç\\.a|Ç\\.|C\\.a|C\\.|Ş\\.)$/i,\n  short: /^(B\\.|B\\.e|Ç\\.a|Ç\\.|C\\.a|C\\.|Ş\\.)$/i,\n  abbreviated: /^(Baz\\.e|Çər|Çər\\.a|Cüm|Cüm\\.a|Şə)$/i,\n  wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i,\n};\nconst parseDayPatterns = {\n  narrow: [\n    /^B\\.$/i,\n    /^B\\.e$/i,\n    /^Ç\\.a$/i,\n    /^Ç\\.$/i,\n    /^C\\.a$/i,\n    /^C\\.$/i,\n    /^Ş\\.$/i,\n  ],\n\n  abbreviated: [\n    /^Baz$/i,\n    /^Baz\\.e$/i,\n    /^Çər\\.a$/i,\n    /^Çər$/i,\n    /^Cüm\\.a$/i,\n    /^Cüm$/i,\n    /^Şə$/i,\n  ],\n\n  wide: [\n    /^Bazar$/i,\n    /^Bazar ertəsi$/i,\n    /^Çərşənbə axşamı$/i,\n    /^Çərşənbə$/i,\n    /^Cümə axşamı$/i,\n    /^Cümə$/i,\n    /^Şənbə$/i,\n  ],\n\n  any: [\n    /^B\\.$/i,\n    /^B\\.e$/i,\n    /^Ç\\.a$/i,\n    /^Ç\\.$/i,\n    /^C\\.a$/i,\n    /^C\\.$/i,\n    /^Ş\\.$/i,\n  ],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,\n  any: /^(am|pm|a\\.m\\.|p\\.m\\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a$/i,\n    pm: /^p$/i,\n    midnight: /^gecəyarı$/i,\n    noon: /^gün$/i,\n    morning: /səhər$/i,\n    afternoon: /gündüz$/i,\n    evening: /axşam$/i,\n    night: /gecə$/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"narrow\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./az/_lib/formatDistance.js\";\nimport { formatLong } from \"./az/_lib/formatLong.js\";\nimport { formatRelative } from \"./az/_lib/formatRelative.js\";\nimport { localize } from \"./az/_lib/localize.js\";\nimport { match } from \"./az/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Azerbaijani locale.\n * @language Azerbaijani\n * @iso-639-2 aze\n */\n\nexport const az = {\n  code: \"az\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default az;\n", "function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n\n  const rem10 = count % 10;\n  const rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace(\"{{count}}\", String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace(\"{{count}}\", String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace(\"{{count}}\", String(count));\n  }\n}\n\nfunction buildLocalizeTokenFn(scheme) {\n  return (count, options) => {\n    if (options && options.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return \"праз \" + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + \" таму\";\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\n\nconst halfAMinute = (_, options) => {\n  if (options && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"праз паўхвіліны\";\n    } else {\n      return \"паўхвіліны таму\";\n    }\n  }\n\n  return \"паўхвіліны\";\n};\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: \"менш за секунду\",\n      singularNominative: \"менш за {{count}} секунду\",\n      singularGenitive: \"менш за {{count}} секунды\",\n      pluralGenitive: \"менш за {{count}} секунд\",\n    },\n    future: {\n      one: \"менш, чым праз секунду\",\n      singularNominative: \"менш, чым праз {{count}} секунду\",\n      singularGenitive: \"менш, чым праз {{count}} секунды\",\n      pluralGenitive: \"менш, чым праз {{count}} секунд\",\n    },\n  }),\n\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} секунда\",\n      singularGenitive: \"{{count}} секунды\",\n      pluralGenitive: \"{{count}} секунд\",\n    },\n    past: {\n      singularNominative: \"{{count}} секунду таму\",\n      singularGenitive: \"{{count}} секунды таму\",\n      pluralGenitive: \"{{count}} секунд таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} секунду\",\n      singularGenitive: \"праз {{count}} секунды\",\n      pluralGenitive: \"праз {{count}} секунд\",\n    },\n  }),\n\n  halfAMinute: halfAMinute,\n\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: \"менш за хвіліну\",\n      singularNominative: \"менш за {{count}} хвіліну\",\n      singularGenitive: \"менш за {{count}} хвіліны\",\n      pluralGenitive: \"менш за {{count}} хвілін\",\n    },\n    future: {\n      one: \"менш, чым праз хвіліну\",\n      singularNominative: \"менш, чым праз {{count}} хвіліну\",\n      singularGenitive: \"менш, чым праз {{count}} хвіліны\",\n      pluralGenitive: \"менш, чым праз {{count}} хвілін\",\n    },\n  }),\n\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} хвіліна\",\n      singularGenitive: \"{{count}} хвіліны\",\n      pluralGenitive: \"{{count}} хвілін\",\n    },\n    past: {\n      singularNominative: \"{{count}} хвіліну таму\",\n      singularGenitive: \"{{count}} хвіліны таму\",\n      pluralGenitive: \"{{count}} хвілін таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} хвіліну\",\n      singularGenitive: \"праз {{count}} хвіліны\",\n      pluralGenitive: \"праз {{count}} хвілін\",\n    },\n  }),\n\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} гадзіны\",\n      singularGenitive: \"каля {{count}} гадзін\",\n      pluralGenitive: \"каля {{count}} гадзін\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} гадзіну\",\n      singularGenitive: \"прыблізна праз {{count}} гадзіны\",\n      pluralGenitive: \"прыблізна праз {{count}} гадзін\",\n    },\n  }),\n\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} гадзіна\",\n      singularGenitive: \"{{count}} гадзіны\",\n      pluralGenitive: \"{{count}} гадзін\",\n    },\n    past: {\n      singularNominative: \"{{count}} гадзіну таму\",\n      singularGenitive: \"{{count}} гадзіны таму\",\n      pluralGenitive: \"{{count}} гадзін таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} гадзіну\",\n      singularGenitive: \"праз {{count}} гадзіны\",\n      pluralGenitive: \"праз {{count}} гадзін\",\n    },\n  }),\n\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} дзень\",\n      singularGenitive: \"{{count}} дні\",\n      pluralGenitive: \"{{count}} дзён\",\n    },\n  }),\n\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} тыдні\",\n      singularGenitive: \"каля {{count}} тыдняў\",\n      pluralGenitive: \"каля {{count}} тыдняў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} тыдзень\",\n      singularGenitive: \"прыблізна праз {{count}} тыдні\",\n      pluralGenitive: \"прыблізна праз {{count}} тыдняў\",\n    },\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} тыдзень\",\n      singularGenitive: \"{{count}} тыдні\",\n      pluralGenitive: \"{{count}} тыдняў\",\n    },\n  }),\n\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} месяца\",\n      singularGenitive: \"каля {{count}} месяцаў\",\n      pluralGenitive: \"каля {{count}} месяцаў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} месяц\",\n      singularGenitive: \"прыблізна праз {{count}} месяцы\",\n      pluralGenitive: \"прыблізна праз {{count}} месяцаў\",\n    },\n  }),\n\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} месяц\",\n      singularGenitive: \"{{count}} месяцы\",\n      pluralGenitive: \"{{count}} месяцаў\",\n    },\n  }),\n\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} года\",\n      singularGenitive: \"каля {{count}} гадоў\",\n      pluralGenitive: \"каля {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} год\",\n      singularGenitive: \"прыблізна праз {{count}} гады\",\n      pluralGenitive: \"прыблізна праз {{count}} гадоў\",\n    },\n  }),\n\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} год\",\n      singularGenitive: \"{{count}} гады\",\n      pluralGenitive: \"{{count}} гадоў\",\n    },\n  }),\n\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"больш за {{count}} год\",\n      singularGenitive: \"больш за {{count}} гады\",\n      pluralGenitive: \"больш за {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"больш, чым праз {{count}} год\",\n      singularGenitive: \"больш, чым праз {{count}} гады\",\n      pluralGenitive: \"больш, чым праз {{count}} гадоў\",\n    },\n  }),\n\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"амаль {{count}} год\",\n      singularGenitive: \"амаль {{count}} гады\",\n      pluralGenitive: \"амаль {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"амаль праз {{count}} год\",\n      singularGenitive: \"амаль праз {{count}} гады\",\n      pluralGenitive: \"амаль праз {{count}} гадоў\",\n    },\n  }),\n};\n\nexport const formatDistance = (token, count, options) => {\n  options = options || {};\n  return formatDistanceLocale[token](count, options);\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: \"dd.MM.y\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n", "import { isSameWeek } from \"../../../isSameWeek.js\";\nimport { toDate } from \"../../../toDate.js\";\n\nconst accusativeWeekdays = [\n  \"нядзелю\",\n  \"панядзелак\",\n  \"аўторак\",\n  \"сераду\",\n  \"чацвер\",\n  \"пятніцу\",\n  \"суботу\",\n];\n\nfunction lastWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у мінулую \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у мінулы \" + weekday + \" а' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  return \"'у \" + weekday + \" а' p\";\n}\n\nfunction nextWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у наступную \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у наступны \" + weekday + \" а' p\";\n  }\n}\n\nconst lastWeekFormat = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return lastWeek(day);\n  }\n};\n\nconst nextWeekFormat = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return nextWeek(day);\n  }\n};\n\nconst formatRelativeLocale = {\n  lastWeek: lastWeekFormat,\n  yesterday: \"'учора а' p\",\n  today: \"'сёння а' p\",\n  tomorrow: \"'заўтра а' p\",\n  nextWeek: nextWeekFormat,\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"да н.э.\", \"н.э.\"],\n  abbreviated: [\"да н. э.\", \"н. э.\"],\n  wide: [\"да нашай эры\", \"нашай эры\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-ы кв.\", \"2-і кв.\", \"3-і кв.\", \"4-ы кв.\"],\n  wide: [\"1-ы квартал\", \"2-і квартал\", \"3-і квартал\", \"4-ы квартал\"],\n};\n\nconst monthValues = {\n  narrow: [\"С\", \"Л\", \"С\", \"К\", \"М\", \"Ч\", \"Л\", \"Ж\", \"В\", \"К\", \"Л\", \"С\"],\n  abbreviated: [\n    \"студз.\",\n    \"лют.\",\n    \"сак.\",\n    \"крас.\",\n    \"май\",\n    \"чэрв.\",\n    \"ліп.\",\n    \"жн.\",\n    \"вер.\",\n    \"кастр.\",\n    \"ліст.\",\n    \"снеж.\",\n  ],\n\n  wide: [\n    \"студзень\",\n    \"люты\",\n    \"сакавік\",\n    \"красавік\",\n    \"май\",\n    \"чэрвень\",\n    \"ліпень\",\n    \"жнівень\",\n    \"верасень\",\n    \"кастрычнік\",\n    \"лістапад\",\n    \"снежань\",\n  ],\n};\nconst formattingMonthValues = {\n  narrow: [\"С\", \"Л\", \"С\", \"К\", \"М\", \"Ч\", \"Л\", \"Ж\", \"В\", \"К\", \"Л\", \"С\"],\n  abbreviated: [\n    \"студз.\",\n    \"лют.\",\n    \"сак.\",\n    \"крас.\",\n    \"мая\",\n    \"чэрв.\",\n    \"ліп.\",\n    \"жн.\",\n    \"вер.\",\n    \"кастр.\",\n    \"ліст.\",\n    \"снеж.\",\n  ],\n\n  wide: [\n    \"студзеня\",\n    \"лютага\",\n    \"сакавіка\",\n    \"красавіка\",\n    \"мая\",\n    \"чэрвеня\",\n    \"ліпеня\",\n    \"жніўня\",\n    \"верасня\",\n    \"кастрычніка\",\n    \"лістапада\",\n    \"снежня\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"Н\", \"П\", \"А\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"],\n  abbreviated: [\"нядз\", \"пан\", \"аўт\", \"сер\", \"чац\", \"пят\", \"суб\"],\n  wide: [\n    \"нядзеля\",\n    \"панядзелак\",\n    \"аўторак\",\n    \"серада\",\n    \"чацвер\",\n    \"пятніца\",\n    \"субота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дзень\",\n    evening: \"веч.\",\n    night: \"ноч\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дзень\",\n    evening: \"веч.\",\n    night: \"ноч\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўнач\",\n    noon: \"поўдзень\",\n    morning: \"раніца\",\n    afternoon: \"дзень\",\n    evening: \"вечар\",\n    night: \"ноч\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночы\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночы\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўнач\",\n    noon: \"поўдзень\",\n    morning: \"раніцы\",\n    afternoon: \"дня\",\n    evening: \"вечара\",\n    night: \"ночы\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const unit = String(options?.unit);\n  const number = Number(dirtyNumber);\n  let suffix;\n\n  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)\n   *  For date-month combinations should be used `d` formatter.\n   *  Correct:   `d MMMM` (4 верасня)\n   *  Incorrect: `do MMMM` (4-га верасня)\n   *\n   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).\n   *  So for phrase \"5th day of month\" (`do дзень месяца`)\n   *  library will produce:            `5-га дзень месяца`\n   *  but correct spelling should be:  `5-ы дзень месяца`\n   *\n   *  So I guess there should be a stand-alone and a formatting version of \"day of month\" formatters\n   */\n  if (unit === \"date\") {\n    suffix = \"-га\";\n  } else if (unit === \"hour\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix =\n      (number % 10 === 2 || number % 10 === 3) &&\n      number % 100 !== 12 &&\n      number % 100 !== 13\n        ? \"-і\"\n        : \"-ы\";\n  }\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"any\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern =\n  /^(\\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((да )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((да )?н\\.?\\s?э\\.?)/i,\n  wide: /^(да нашай эры|нашай эры|наша эра)/i,\n};\nconst parseEraPatterns = {\n  any: [/^д/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,\n  wide: /^[1234](-?[ыі]?)? квартал/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[слкмчжв]/i,\n  abbreviated:\n    /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\\.?/i,\n  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^с/i,\n    /^л/i,\n    /^с/i,\n    /^к/i,\n    /^м/i,\n    /^ч/i,\n    /^л/i,\n    /^ж/i,\n    /^в/i,\n    /^к/i,\n    /^л/i,\n    /^с/i,\n  ],\n\n  any: [\n    /^ст/i,\n    /^лю/i,\n    /^са/i,\n    /^кр/i,\n    /^ма/i,\n    /^ч/i,\n    /^ліп/i,\n    /^ж/i,\n    /^в/i,\n    /^ка/i,\n    /^ліс/i,\n    /^сн/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[нпасч]/i,\n  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,\n  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  abbreviated: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^поўн/i,\n    noon: /^поўд/i,\n    morning: /^р/i,\n    afternoon: /^д[зн]/i,\n    evening: /^в/i,\n    night: /^н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./be/_lib/formatDistance.js\";\nimport { formatLong } from \"./be/_lib/formatLong.js\";\nimport { formatRelative } from \"./be/_lib/formatRelative.js\";\nimport { localize } from \"./be/_lib/localize.js\";\nimport { match } from \"./be/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Belarusian locale.\n * @language Belarusian\n * @iso-639-2 bel\n * @author Kiryl Anokhin [@alyrik](https://github.com/alyrik)\n * @author Martin Wind [@arvigeus](https://github.com/mawi12345)\n */\nexport const be = {\n  code: \"be\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default be;\n", "function declension(scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one;\n  }\n\n  const rem10 = count % 10;\n  const rem100 = count % 100;\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace(\"{{count}}\", String(count));\n\n    // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace(\"{{count}}\", String(count));\n\n    // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace(\"{{count}}\", String(count));\n  }\n}\n\nfunction buildLocalizeTokenFn(scheme) {\n  return (count, options) => {\n    if (options && options.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count);\n        } else {\n          return \"праз \" + declension(scheme.regular, count);\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count);\n        } else {\n          return declension(scheme.regular, count) + \" таму\";\n        }\n      }\n    } else {\n      return declension(scheme.regular, count);\n    }\n  };\n}\n\nconst halfAMinute = (_, options) => {\n  if (options && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"праз паўхвіліны\";\n    } else {\n      return \"паўхвіліны таму\";\n    }\n  }\n\n  return \"паўхвіліны\";\n};\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: buildLocalizeTokenFn({\n    regular: {\n      one: \"менш за секунду\",\n      singularNominative: \"менш за {{count}} секунду\",\n      singularGenitive: \"менш за {{count}} секунды\",\n      pluralGenitive: \"менш за {{count}} секунд\",\n    },\n    future: {\n      one: \"менш, чым праз секунду\",\n      singularNominative: \"менш, чым праз {{count}} секунду\",\n      singularGenitive: \"менш, чым праз {{count}} секунды\",\n      pluralGenitive: \"менш, чым праз {{count}} секунд\",\n    },\n  }),\n\n  xSeconds: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} секунда\",\n      singularGenitive: \"{{count}} секунды\",\n      pluralGenitive: \"{{count}} секунд\",\n    },\n    past: {\n      singularNominative: \"{{count}} секунду таму\",\n      singularGenitive: \"{{count}} секунды таму\",\n      pluralGenitive: \"{{count}} секунд таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} секунду\",\n      singularGenitive: \"праз {{count}} секунды\",\n      pluralGenitive: \"праз {{count}} секунд\",\n    },\n  }),\n\n  halfAMinute: halfAMinute,\n\n  lessThanXMinutes: buildLocalizeTokenFn({\n    regular: {\n      one: \"менш за хвіліну\",\n      singularNominative: \"менш за {{count}} хвіліну\",\n      singularGenitive: \"менш за {{count}} хвіліны\",\n      pluralGenitive: \"менш за {{count}} хвілін\",\n    },\n    future: {\n      one: \"менш, чым праз хвіліну\",\n      singularNominative: \"менш, чым праз {{count}} хвіліну\",\n      singularGenitive: \"менш, чым праз {{count}} хвіліны\",\n      pluralGenitive: \"менш, чым праз {{count}} хвілін\",\n    },\n  }),\n\n  xMinutes: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} хвіліна\",\n      singularGenitive: \"{{count}} хвіліны\",\n      pluralGenitive: \"{{count}} хвілін\",\n    },\n    past: {\n      singularNominative: \"{{count}} хвіліну таму\",\n      singularGenitive: \"{{count}} хвіліны таму\",\n      pluralGenitive: \"{{count}} хвілін таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} хвіліну\",\n      singularGenitive: \"праз {{count}} хвіліны\",\n      pluralGenitive: \"праз {{count}} хвілін\",\n    },\n  }),\n\n  aboutXHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} гадзіны\",\n      singularGenitive: \"каля {{count}} гадзін\",\n      pluralGenitive: \"каля {{count}} гадзін\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} гадзіну\",\n      singularGenitive: \"прыблізна праз {{count}} гадзіны\",\n      pluralGenitive: \"прыблізна праз {{count}} гадзін\",\n    },\n  }),\n\n  xHours: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} гадзіна\",\n      singularGenitive: \"{{count}} гадзіны\",\n      pluralGenitive: \"{{count}} гадзін\",\n    },\n    past: {\n      singularNominative: \"{{count}} гадзіну таму\",\n      singularGenitive: \"{{count}} гадзіны таму\",\n      pluralGenitive: \"{{count}} гадзін таму\",\n    },\n    future: {\n      singularNominative: \"праз {{count}} гадзіну\",\n      singularGenitive: \"праз {{count}} гадзіны\",\n      pluralGenitive: \"праз {{count}} гадзін\",\n    },\n  }),\n\n  xDays: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} дзень\",\n      singularGenitive: \"{{count}} дні\",\n      pluralGenitive: \"{{count}} дзён\",\n    },\n  }),\n\n  aboutXWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} тыдні\",\n      singularGenitive: \"каля {{count}} тыдняў\",\n      pluralGenitive: \"каля {{count}} тыдняў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} тыдзень\",\n      singularGenitive: \"прыблізна праз {{count}} тыдні\",\n      pluralGenitive: \"прыблізна праз {{count}} тыдняў\",\n    },\n  }),\n\n  xWeeks: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} тыдзень\",\n      singularGenitive: \"{{count}} тыдні\",\n      pluralGenitive: \"{{count}} тыдняў\",\n    },\n  }),\n\n  aboutXMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} месяца\",\n      singularGenitive: \"каля {{count}} месяцаў\",\n      pluralGenitive: \"каля {{count}} месяцаў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} месяц\",\n      singularGenitive: \"прыблізна праз {{count}} месяцы\",\n      pluralGenitive: \"прыблізна праз {{count}} месяцаў\",\n    },\n  }),\n\n  xMonths: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} месяц\",\n      singularGenitive: \"{{count}} месяцы\",\n      pluralGenitive: \"{{count}} месяцаў\",\n    },\n  }),\n\n  aboutXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"каля {{count}} года\",\n      singularGenitive: \"каля {{count}} гадоў\",\n      pluralGenitive: \"каля {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"прыблізна праз {{count}} год\",\n      singularGenitive: \"прыблізна праз {{count}} гады\",\n      pluralGenitive: \"прыблізна праз {{count}} гадоў\",\n    },\n  }),\n\n  xYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"{{count}} год\",\n      singularGenitive: \"{{count}} гады\",\n      pluralGenitive: \"{{count}} гадоў\",\n    },\n  }),\n\n  overXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"больш за {{count}} год\",\n      singularGenitive: \"больш за {{count}} гады\",\n      pluralGenitive: \"больш за {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"больш, чым праз {{count}} год\",\n      singularGenitive: \"больш, чым праз {{count}} гады\",\n      pluralGenitive: \"больш, чым праз {{count}} гадоў\",\n    },\n  }),\n\n  almostXYears: buildLocalizeTokenFn({\n    regular: {\n      singularNominative: \"амаль {{count}} год\",\n      singularGenitive: \"амаль {{count}} гады\",\n      pluralGenitive: \"амаль {{count}} гадоў\",\n    },\n    future: {\n      singularNominative: \"амаль праз {{count}} год\",\n      singularGenitive: \"амаль праз {{count}} гады\",\n      pluralGenitive: \"амаль праз {{count}} гадоў\",\n    },\n  }),\n};\n\nexport const formatDistance = (token, count, options) => {\n  options = options || {};\n  return formatDistanceLocale[token](count, options);\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM y 'г.'\",\n  long: \"d MMMM y 'г.'\",\n  medium: \"d MMM y 'г.'\",\n  short: \"dd.MM.y\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n", "import { isSameWeek } from \"../../../isSameWeek.js\";\nimport { toDate } from \"../../../toDate.js\";\n\nconst accusativeWeekdays = [\n  \"нядзелю\",\n  \"панядзелак\",\n  \"аўторак\",\n  \"сераду\",\n  \"чацьвер\",\n  \"пятніцу\",\n  \"суботу\",\n];\n\nfunction lastWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у мінулую \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у мінулы \" + weekday + \" а' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  return \"'у \" + weekday + \" а' p\";\n}\n\nfunction nextWeek(day) {\n  const weekday = accusativeWeekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 5:\n    case 6:\n      return \"'у наступную \" + weekday + \" а' p\";\n    case 1:\n    case 2:\n    case 4:\n      return \"'у наступны \" + weekday + \" а' p\";\n  }\n}\n\nconst lastWeekFormat = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return lastWeek(day);\n  }\n};\n\nconst nextWeekFormat = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return nextWeek(day);\n  }\n};\n\nconst formatRelativeLocale = {\n  lastWeek: lastWeekFormat,\n  yesterday: \"'учора а' p\",\n  today: \"'сёньня а' p\",\n  tomorrow: \"'заўтра а' p\",\n  nextWeek: nextWeekFormat,\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"да н.э.\", \"н.э.\"],\n  abbreviated: [\"да н. э.\", \"н. э.\"],\n  wide: [\"да нашай эры\", \"нашай эры\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-ы кв.\", \"2-і кв.\", \"3-і кв.\", \"4-ы кв.\"],\n  wide: [\"1-ы квартал\", \"2-і квартал\", \"3-і квартал\", \"4-ы квартал\"],\n};\n\nconst monthValues = {\n  narrow: [\"С\", \"Л\", \"С\", \"К\", \"Т\", \"Ч\", \"Л\", \"Ж\", \"В\", \"К\", \"Л\", \"С\"],\n  abbreviated: [\n    \"студз.\",\n    \"лют.\",\n    \"сак.\",\n    \"крас.\",\n    \"трав.\",\n    \"чэрв.\",\n    \"ліп.\",\n    \"жн.\",\n    \"вер.\",\n    \"кастр.\",\n    \"ліст.\",\n    \"сьнеж.\",\n  ],\n\n  wide: [\n    \"студзень\",\n    \"люты\",\n    \"сакавік\",\n    \"красавік\",\n    \"травень\",\n    \"чэрвень\",\n    \"ліпень\",\n    \"жнівень\",\n    \"верасень\",\n    \"кастрычнік\",\n    \"лістапад\",\n    \"сьнежань\",\n  ],\n};\nconst formattingMonthValues = {\n  narrow: [\"С\", \"Л\", \"С\", \"К\", \"Т\", \"Ч\", \"Л\", \"Ж\", \"В\", \"К\", \"Л\", \"С\"],\n  abbreviated: [\n    \"студз.\",\n    \"лют.\",\n    \"сак.\",\n    \"крас.\",\n    \"трав.\",\n    \"чэрв.\",\n    \"ліп.\",\n    \"жн.\",\n    \"вер.\",\n    \"кастр.\",\n    \"ліст.\",\n    \"сьнеж.\",\n  ],\n\n  wide: [\n    \"студзеня\",\n    \"лютага\",\n    \"сакавіка\",\n    \"красавіка\",\n    \"траўня\",\n    \"чэрвеня\",\n    \"ліпеня\",\n    \"жніўня\",\n    \"верасня\",\n    \"кастрычніка\",\n    \"лістапада\",\n    \"сьнежня\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"Н\", \"П\", \"А\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"],\n  abbreviated: [\"нядз\", \"пан\", \"аўт\", \"сер\", \"чаць\", \"пят\", \"суб\"],\n  wide: [\n    \"нядзеля\",\n    \"панядзелак\",\n    \"аўторак\",\n    \"серада\",\n    \"чацьвер\",\n    \"пятніца\",\n    \"субота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дзень\",\n    evening: \"веч.\",\n    night: \"ноч\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дзень\",\n    evening: \"веч.\",\n    night: \"ноч\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўнач\",\n    noon: \"поўдзень\",\n    morning: \"раніца\",\n    afternoon: \"дзень\",\n    evening: \"вечар\",\n    night: \"ноч\",\n  },\n};\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночы\",\n  },\n  abbreviated: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўн.\",\n    noon: \"поўд.\",\n    morning: \"ран.\",\n    afternoon: \"дня\",\n    evening: \"веч.\",\n    night: \"ночы\",\n  },\n  wide: {\n    am: \"ДП\",\n    pm: \"ПП\",\n    midnight: \"поўнач\",\n    noon: \"поўдзень\",\n    morning: \"раніцы\",\n    afternoon: \"дня\",\n    evening: \"вечара\",\n    night: \"ночы\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const unit = String(options?.unit);\n  const number = Number(dirtyNumber);\n  let suffix;\n\n  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)\n   *  For date-month combinations should be used `d` formatter.\n   *  Correct:   `d MMMM` (4 верасня)\n   *  Incorrect: `do MMMM` (4-га верасня)\n   *\n   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).\n   *  So for phrase \"5th day of month\" (`do дзень месяца`)\n   *  library will produce:            `5-га дзень месяца`\n   *  but correct spelling should be:  `5-ы дзень месяца`\n   *\n   *  So I guess there should be a stand-alone and a formatting version of \"day of month\" formatters\n   */\n  if (unit === \"date\") {\n    suffix = \"-га\";\n  } else if (unit === \"hour\" || unit === \"minute\" || unit === \"second\") {\n    suffix = \"-я\";\n  } else {\n    suffix =\n      (number % 10 === 2 || number % 10 === 3) &&\n      number % 100 !== 12 &&\n      number % 100 !== 13\n        ? \"-і\"\n        : \"-ы\";\n  }\n\n  return number + suffix;\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"any\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern =\n  /^(\\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((да )?н\\.?\\s?э\\.?)/i,\n  abbreviated: /^((да )?н\\.?\\s?э\\.?)/i,\n  wide: /^(да нашай эры|нашай эры|наша эра)/i,\n};\nconst parseEraPatterns = {\n  any: [/^д/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,\n  wide: /^[1234](-?[ыі]?)? квартал/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[слкмчжв]/i,\n  abbreviated:\n    /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\\.?/i,\n  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^с/i,\n    /^л/i,\n    /^с/i,\n    /^к/i,\n    /^т/i,\n    /^ч/i,\n    /^л/i,\n    /^ж/i,\n    /^в/i,\n    /^к/i,\n    /^л/i,\n    /^с/i,\n  ],\n\n  any: [\n    /^ст/i,\n    /^лю/i,\n    /^са/i,\n    /^кр/i,\n    /^тр/i,\n    /^ч/i,\n    /^ліп/i,\n    /^ж/i,\n    /^в/i,\n    /^ка/i,\n    /^ліс/i,\n    /^сн/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[нпасч]/i,\n  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\\.?/i,\n  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,\n  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  abbreviated: /^([дп]п|поўн\\.?|поўд\\.?|ран\\.?|дзень|дня|веч\\.?|ночы?)/i,\n  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^дп/i,\n    pm: /^пп/i,\n    midnight: /^поўн/i,\n    noon: /^поўд/i,\n    morning: /^р/i,\n    afternoon: /^д[зн]/i,\n    evening: /^в/i,\n    night: /^н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./be-tarask/_lib/formatDistance.js\";\nimport { formatLong } from \"./be-tarask/_lib/formatLong.js\";\nimport { formatRelative } from \"./be-tarask/_lib/formatRelative.js\";\nimport { localize } from \"./be-tarask/_lib/localize.js\";\nimport { match } from \"./be-tarask/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Belarusian Classic locale.\n * @language Belarusian Classic\n * @iso-639-2 bel\n * @author Ryhor Nopears [@nopears](https://github.com/nopears)\n */\nexport const beTarask = {\n  code: \"be-tarask\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default beTarask;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"по-малко от секунда\",\n    other: \"по-малко от {{count}} секунди\",\n  },\n\n  xSeconds: {\n    one: \"1 секунда\",\n    other: \"{{count}} секунди\",\n  },\n\n  halfAMinute: \"половин минута\",\n\n  lessThanXMinutes: {\n    one: \"по-малко от минута\",\n    other: \"по-малко от {{count}} минути\",\n  },\n\n  xMinutes: {\n    one: \"1 минута\",\n    other: \"{{count}} минути\",\n  },\n\n  aboutXHours: {\n    one: \"около час\",\n    other: \"около {{count}} часа\",\n  },\n\n  xHours: {\n    one: \"1 час\",\n    other: \"{{count}} часа\",\n  },\n\n  xDays: {\n    one: \"1 ден\",\n    other: \"{{count}} дни\",\n  },\n\n  aboutXWeeks: {\n    one: \"около седмица\",\n    other: \"около {{count}} седмици\",\n  },\n\n  xWeeks: {\n    one: \"1 седмица\",\n    other: \"{{count}} седмици\",\n  },\n\n  aboutXMonths: {\n    one: \"около месец\",\n    other: \"около {{count}} месеца\",\n  },\n\n  xMonths: {\n    one: \"1 месец\",\n    other: \"{{count}} месеца\",\n  },\n\n  aboutXYears: {\n    one: \"около година\",\n    other: \"около {{count}} години\",\n  },\n\n  xYears: {\n    one: \"1 година\",\n    other: \"{{count}} години\",\n  },\n\n  overXYears: {\n    one: \"над година\",\n    other: \"над {{count}} години\",\n  },\n\n  almostXYears: {\n    one: \"почти година\",\n    other: \"почти {{count}} години\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"след \" + result;\n    } else {\n      return \"преди \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, dd MMMM yyyy\",\n  long: \"dd MMMM yyyy\",\n  medium: \"dd MMM yyyy\",\n  short: \"dd.MM.yyyy\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss zzzz\",\n  long: \"HH:mm:ss z\",\n  medium: \"HH:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  any: \"{{date}} {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"any\",\n  }),\n};\n", "import { isSameWeek } from \"../../../isSameWeek.js\";\nimport { toDate } from \"../../../toDate.js\";\n\n// Adapted from the `ru` translation\n\nconst weekdays = [\n  \"неделя\",\n  \"понеделник\",\n  \"вторник\",\n  \"сряда\",\n  \"четвъртък\",\n  \"петък\",\n  \"събота\",\n];\n\nfunction lastWeek(day) {\n  const weekday = weekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 6:\n      return \"'миналата \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n    case 5:\n      return \"'миналия \" + weekday + \" в' p\";\n  }\n}\n\nfunction thisWeek(day) {\n  const weekday = weekdays[day];\n\n  if (day === 2 /* Tue */) {\n    return \"'във \" + weekday + \" в' p\";\n  } else {\n    return \"'в \" + weekday + \" в' p\";\n  }\n}\n\nfunction nextWeek(day) {\n  const weekday = weekdays[day];\n\n  switch (day) {\n    case 0:\n    case 3:\n    case 6:\n      return \"'следващата \" + weekday + \" в' p\";\n    case 1:\n    case 2:\n    case 4:\n    case 5:\n      return \"'следващия \" + weekday + \" в' p\";\n  }\n}\n\nconst lastWeekFormatToken = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return lastWeek(day);\n  }\n};\n\nconst nextWeekFormatToken = (dirtyDate, baseDate, options) => {\n  const date = toDate(dirtyDate);\n  const day = date.getDay();\n  if (isSameWeek(date, baseDate, options)) {\n    return thisWeek(day);\n  } else {\n    return nextWeek(day);\n  }\n};\n\nconst formatRelativeLocale = {\n  lastWeek: lastWeekFormatToken,\n  yesterday: \"'вчера в' p\",\n  today: \"'днес в' p\",\n  tomorrow: \"'утре в' p\",\n  nextWeek: nextWeekFormatToken,\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, baseDate, options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date, baseDate, options);\n  }\n\n  return format;\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"пр.н.е.\", \"н.е.\"],\n  abbreviated: [\"преди н. е.\", \"н. е.\"],\n  wide: [\"преди новата ера\", \"новата ера\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1-во тримес.\", \"2-ро тримес.\", \"3-то тримес.\", \"4-то тримес.\"],\n\n  wide: [\n    \"1-во тримесечие\",\n    \"2-ро тримесечие\",\n    \"3-то тримесечие\",\n    \"4-то тримесечие\",\n  ],\n};\n\nconst monthValues = {\n  abbreviated: [\n    \"яну\",\n    \"фев\",\n    \"мар\",\n    \"апр\",\n    \"май\",\n    \"юни\",\n    \"юли\",\n    \"авг\",\n    \"сеп\",\n    \"окт\",\n    \"ное\",\n    \"дек\",\n  ],\n\n  wide: [\n    \"януари\",\n    \"февруари\",\n    \"март\",\n    \"април\",\n    \"май\",\n    \"юни\",\n    \"юли\",\n    \"август\",\n    \"септември\",\n    \"октомври\",\n    \"ноември\",\n    \"декември\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"Н\", \"П\", \"В\", \"С\", \"Ч\", \"П\", \"С\"],\n  short: [\"нд\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"],\n  abbreviated: [\"нед\", \"пон\", \"вто\", \"сря\", \"чет\", \"пет\", \"съб\"],\n  wide: [\n    \"неделя\",\n    \"понеделник\",\n    \"вторник\",\n    \"сряда\",\n    \"четвъртък\",\n    \"петък\",\n    \"събота\",\n  ],\n};\n\nconst dayPeriodValues = {\n  wide: {\n    am: \"преди обяд\",\n    pm: \"след обяд\",\n    midnight: \"в полунощ\",\n    noon: \"на обяд\",\n    morning: \"сутринта\",\n    afternoon: \"следобед\",\n    evening: \"вечерта\",\n    night: \"през нощта\",\n  },\n};\n\nfunction isFeminine(unit) {\n  return (\n    unit === \"year\" || unit === \"week\" || unit === \"minute\" || unit === \"second\"\n  );\n}\n\nfunction isNeuter(unit) {\n  return unit === \"quarter\";\n}\n\nfunction numberWithSuffix(number, unit, masculine, feminine, neuter) {\n  const suffix = isNeuter(unit)\n    ? neuter\n    : isFeminine(unit)\n      ? feminine\n      : masculine;\n  return number + \"-\" + suffix;\n}\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = options?.unit;\n\n  if (number === 0) {\n    return numberWithSuffix(0, unit, \"ев\", \"ева\", \"ево\");\n  } else if (number % 1000 === 0) {\n    return numberWithSuffix(number, unit, \"ен\", \"на\", \"но\");\n  } else if (number % 100 === 0) {\n    return numberWithSuffix(number, unit, \"тен\", \"тна\", \"тно\");\n  }\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return numberWithSuffix(number, unit, \"ви\", \"ва\", \"во\");\n      case 2:\n        return numberWithSuffix(number, unit, \"ри\", \"ра\", \"ро\");\n      case 7:\n      case 8:\n        return numberWithSuffix(number, unit, \"ми\", \"ма\", \"мо\");\n    }\n  }\n\n  return numberWithSuffix(number, unit, \"ти\", \"та\", \"то\");\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern =\n  /^(\\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^((пр)?н\\.?\\s?е\\.?)/i,\n  abbreviated: /^((пр)?н\\.?\\s?е\\.?)/i,\n  wide: /^(преди новата ера|новата ера|нова ера)/i,\n};\nconst parseEraPatterns = {\n  any: [/^п/i, /^н/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,\n  wide: /^[1234](-?[врт]?о?)? тримесечие/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[нпвсч]/i,\n  short: /^(нд|пн|вт|ср|чт|пт|сб)/i,\n  abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,\n  wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i,\n};\n\nconst parseDayPatterns = {\n  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],\n  any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[ъб]/i],\n};\n\nconst matchMonthPatterns = {\n  abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,\n  wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i,\n};\n\nconst parseMonthPatterns = {\n  any: [\n    /^я/i,\n    /^ф/i,\n    /^мар/i,\n    /^ап/i,\n    /^май/i,\n    /^юн/i,\n    /^юл/i,\n    /^ав/i,\n    /^се/i,\n    /^окт/i,\n    /^но/i,\n    /^де/i,\n  ],\n};\n\nconst matchDayPeriodPatterns = {\n  any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^преди о/i,\n    pm: /^след о/i,\n    midnight: /^в пол/i,\n    noon: /^на об/i,\n    morning: /^сут/i,\n    afternoon: /^следо/i,\n    evening: /^веч/i,\n    night: /^през н/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./bg/_lib/formatDistance.js\";\nimport { formatLong } from \"./bg/_lib/formatLong.js\";\nimport { formatRelative } from \"./bg/_lib/formatRelative.js\";\nimport { localize } from \"./bg/_lib/localize.js\";\nimport { match } from \"./bg/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Bulgarian locale.\n * @language Bulgarian\n * @iso-639-2 bul\n * @author Nikolay Stoynov [@arvigeus](https://github.com/arvigeus)\n * @author Tsvetan Ovedenski [@fintara](https://github.com/fintara)\n */\nexport const bg = {\n  code: \"bg\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default bg;\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst numberValues = {\n  locale: {\n    1: \"১\",\n    2: \"২\",\n    3: \"৩\",\n    4: \"৪\",\n    5: \"৫\",\n    6: \"৬\",\n    7: \"৭\",\n    8: \"৮\",\n    9: \"৯\",\n    0: \"০\",\n  },\n  number: {\n    \"১\": \"1\",\n    \"২\": \"2\",\n    \"৩\": \"3\",\n    \"৪\": \"4\",\n    \"৫\": \"5\",\n    \"৬\": \"6\",\n    \"৭\": \"7\",\n    \"৮\": \"8\",\n    \"৯\": \"9\",\n    \"০\": \"0\",\n  },\n};\n\nconst eraValues = {\n  narrow: [\"খ্রিঃপূঃ\", \"খ্রিঃ\"],\n  abbreviated: [\"খ্রিঃপূর্ব\", \"খ্রিঃ\"],\n  wide: [\"খ্রিস্টপূর্ব\", \"খ্রিস্টাব্দ\"],\n};\n\nconst quarterValues = {\n  narrow: [\"১\", \"২\", \"৩\", \"৪\"],\n  abbreviated: [\"১ত্রৈ\", \"২ত্রৈ\", \"৩ত্রৈ\", \"৪ত্রৈ\"],\n  wide: [\"১ম ত্রৈমাসিক\", \"২য় ত্রৈমাসিক\", \"৩য় ত্রৈমাসিক\", \"৪র্থ ত্রৈমাসিক\"],\n};\n\nconst monthValues = {\n  narrow: [\n    \"জানু\",\n    \"ফেব্রু\",\n    \"মার্চ\",\n    \"এপ্রিল\",\n    \"মে\",\n    \"জুন\",\n    \"জুলাই\",\n    \"আগস্ট\",\n    \"সেপ্ট\",\n    \"অক্টো\",\n    \"নভে\",\n    \"ডিসে\",\n  ],\n\n  abbreviated: [\n    \"জানু\",\n    \"ফেব্রু\",\n    \"মার্চ\",\n    \"এপ্রিল\",\n    \"মে\",\n    \"জুন\",\n    \"জুলাই\",\n    \"আগস্ট\",\n    \"সেপ্ট\",\n    \"অক্টো\",\n    \"নভে\",\n    \"ডিসে\",\n  ],\n\n  wide: [\n    \"জানুয়ারি\",\n    \"ফেব্রুয়ারি\",\n    \"মার্চ\",\n    \"এপ্রিল\",\n    \"মে\",\n    \"জুন\",\n    \"জুলাই\",\n    \"আগস্ট\",\n    \"সেপ্টেম্বর\",\n    \"অক্টোবর\",\n    \"নভেম্বর\",\n    \"ডিসেম্বর\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"র\", \"সো\", \"ম\", \"বু\", \"বৃ\", \"শু\", \"শ\"],\n  short: [\"রবি\", \"সোম\", \"মঙ্গল\", \"বুধ\", \"বৃহ\", \"শুক্র\", \"শনি\"],\n  abbreviated: [\"রবি\", \"সোম\", \"মঙ্গল\", \"বুধ\", \"বৃহ\", \"শুক্র\", \"শনি\"],\n  wide: [\n    \"রবিবার\",\n    \"সোমবার\",\n    \"মঙ্গলবার\",\n    \"বুধবার\",\n    \"বৃহস্পতিবার \",\n    \"শুক্রবার\",\n    \"শনিবার\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"পূ\",\n    pm: \"অপ\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n  abbreviated: {\n    am: \"পূর্বাহ্ন\",\n    pm: \"অপরাহ্ন\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n  wide: {\n    am: \"পূর্বাহ্ন\",\n    pm: \"অপরাহ্ন\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"পূ\",\n    pm: \"অপ\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n  abbreviated: {\n    am: \"পূর্বাহ্ন\",\n    pm: \"অপরাহ্ন\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n  wide: {\n    am: \"পূর্বাহ্ন\",\n    pm: \"অপরাহ্ন\",\n    midnight: \"মধ্যরাত\",\n    noon: \"মধ্যাহ্ন\",\n    morning: \"সকাল\",\n    afternoon: \"বিকাল\",\n    evening: \"সন্ধ্যা\",\n    night: \"রাত\",\n  },\n};\n\nfunction dateOrdinalNumber(number, localeNumber) {\n  if (number > 18 && number <= 31) {\n    return localeNumber + \"শে\";\n  } else {\n    switch (number) {\n      case 1:\n        return localeNumber + \"লা\";\n      case 2:\n      case 3:\n        return localeNumber + \"রা\";\n      case 4:\n        return localeNumber + \"ঠা\";\n      default:\n        return localeNumber + \"ই\";\n    }\n  }\n}\n\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const localeNumber = numberToLocale(number);\n  const unit = options?.unit;\n\n  if (unit === \"date\") {\n    return dateOrdinalNumber(number, localeNumber);\n  }\n  if (number > 10 || number === 0) return localeNumber + \"তম\";\n\n  const rem10 = number % 10;\n  switch (rem10) {\n    case 2:\n    case 3:\n      return localeNumber + \"য়\";\n    case 4:\n      return localeNumber + \"র্থ\";\n    case 6:\n      return localeNumber + \"ষ্ঠ\";\n    default:\n      return localeNumber + \"ম\";\n  }\n};\n\n// function localeToNumber(locale: string): number {\n//   const enNumber = locale.toString().replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {\n//     return numberValues.number[match as keyof typeof numberValues.number]\n//   })\n//   return Number(enNumber)\n// }\n\nexport function numberToLocale(enNumber) {\n  return enNumber.toString().replace(/\\d/g, function (match) {\n    return numberValues.locale[match];\n  });\n}\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { numberToLocale } from \"./localize.js\";\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"প্রায় ১ সেকেন্ড\",\n    other: \"প্রায় {{count}} সেকেন্ড\",\n  },\n\n  xSeconds: {\n    one: \"১ সেকেন্ড\",\n    other: \"{{count}} সেকেন্ড\",\n  },\n\n  halfAMinute: \"আধ মিনিট\",\n\n  lessThanXMinutes: {\n    one: \"প্রায় ১ মিনিট\",\n    other: \"প্রায় {{count}} মিনিট\",\n  },\n\n  xMinutes: {\n    one: \"১ মিনিট\",\n    other: \"{{count}} মিনিট\",\n  },\n\n  aboutXHours: {\n    one: \"প্রায় ১ ঘন্টা\",\n    other: \"প্রায় {{count}} ঘন্টা\",\n  },\n\n  xHours: {\n    one: \"১ ঘন্টা\",\n    other: \"{{count}} ঘন্টা\",\n  },\n\n  xDays: {\n    one: \"১ দিন\",\n    other: \"{{count}} দিন\",\n  },\n\n  aboutXWeeks: {\n    one: \"প্রায় ১ সপ্তাহ\",\n    other: \"প্রায় {{count}} সপ্তাহ\",\n  },\n\n  xWeeks: {\n    one: \"১ সপ্তাহ\",\n    other: \"{{count}} সপ্তাহ\",\n  },\n\n  aboutXMonths: {\n    one: \"প্রায় ১ মাস\",\n    other: \"প্রায় {{count}} মাস\",\n  },\n\n  xMonths: {\n    one: \"১ মাস\",\n    other: \"{{count}} মাস\",\n  },\n\n  aboutXYears: {\n    one: \"প্রায় ১ বছর\",\n    other: \"প্রায় {{count}} বছর\",\n  },\n\n  xYears: {\n    one: \"১ বছর\",\n    other: \"{{count}} বছর\",\n  },\n\n  overXYears: {\n    one: \"১ বছরের বেশি\",\n    other: \"{{count}} বছরের বেশি\",\n  },\n\n  almostXYears: {\n    one: \"প্রায় ১ বছর\",\n    other: \"প্রায় {{count}} বছর\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", numberToLocale(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return result + \" এর মধ্যে\";\n    } else {\n      return result + \" আগে\";\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} {{time}} 'সময়'\",\n  long: \"{{date}} {{time}} 'সময়'\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'গত' eeee 'সময়' p\",\n  yesterday: \"'গতকাল' 'সময়' p\",\n  today: \"'আজ' 'সময়' p\",\n  tomorrow: \"'আগামীকাল' 'সময়' p\",\n  nextWeek: \"eeee 'সময়' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,\n  abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,\n  wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i,\n};\nconst parseEraPatterns = {\n  narrow: [/^খ্রিঃপূঃ/i, /^খ্রিঃ/i],\n  abbreviated: [/^খ্রিঃপূর্ব/i, /^খ্রিঃ/i],\n  wide: [/^খ্রিস্টপূর্ব/i, /^খ্রিস্টাব্দ/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[১২৩৪]/i,\n  abbreviated: /^[১২৩৪]ত্রৈ/i,\n  wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i,\n};\nconst parseQuarterPatterns = {\n  any: [/১/i, /২/i, /৩/i, /৪/i],\n};\n\nconst matchMonthPatterns = {\n  narrow:\n    /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,\n  abbreviated:\n    /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,\n  wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i,\n};\nconst parseMonthPatterns = {\n  any: [\n    /^জানু/i,\n    /^ফেব্রু/i,\n    /^মার্চ/i,\n    /^এপ্রিল/i,\n    /^মে/i,\n    /^জুন/i,\n    /^জুলাই/i,\n    /^আগস্ট/i,\n    /^সেপ্ট/i,\n    /^অক্টো/i,\n    /^নভে/i,\n    /^ডিসে/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,\n  short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,\n  abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,\n  wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^র/i, /^সো/i, /^ম/i, /^বু/i, /^বৃ/i, /^শু/i, /^শ/i],\n  short: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],\n\n  abbreviated: [\n    /^রবি/i,\n    /^সোম/i,\n    /^মঙ্গল/i,\n    /^বুধ/i,\n    /^বৃহ/i,\n    /^শুক্র/i,\n    /^শনি/i,\n  ],\n\n  wide: [\n    /^রবিবার/i,\n    /^সোমবার/i,\n    /^মঙ্গলবার/i,\n    /^বুধবার/i,\n    /^বৃহস্পতিবার /i,\n    /^শুক্রবার/i,\n    /^শনিবার/i,\n  ],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,\n  abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,\n  wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^পূ/i,\n    pm: /^অপ/i,\n    midnight: /^মধ্যরাত/i,\n    noon: /^মধ্যাহ্ন/i,\n    morning: /সকাল/i,\n    afternoon: /বিকাল/i,\n    evening: /সন্ধ্যা/i,\n    night: /রাত/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"wide\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"wide\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./bn/_lib/formatDistance.js\";\nimport { formatLong } from \"./bn/_lib/formatLong.js\";\nimport { formatRelative } from \"./bn/_lib/formatRelative.js\";\nimport { localize } from \"./bn/_lib/localize.js\";\nimport { match } from \"./bn/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Bengali locale.\n * @language Bengali\n * @iso-639-2 ben\n * @author Touhidur Rahman [@touhidrahman](https://github.com/touhidrahman)\n * @author Farhad Yasir [@nutboltu](https://github.com/nutboltu)\n */\nexport const bn = {\n  code: \"bn\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default bn;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: {\n      standalone: \"manje od 1 sekunde\",\n      withPrepositionAgo: \"manje od 1 sekunde\",\n      withPrepositionIn: \"manje od 1 sekundu\",\n    },\n    dual: \"manje od {{count}} sekunde\",\n    other: \"manje od {{count}} sekundi\",\n  },\n\n  xSeconds: {\n    one: {\n      standalone: \"1 sekunda\",\n      withPrepositionAgo: \"1 sekunde\",\n      withPrepositionIn: \"1 sekundu\",\n    },\n    dual: \"{{count}} sekunde\",\n    other: \"{{count}} sekundi\",\n  },\n\n  halfAMinute: \"pola minute\",\n\n  lessThanXMinutes: {\n    one: {\n      standalone: \"manje od 1 minute\",\n      withPrepositionAgo: \"manje od 1 minute\",\n      withPrepositionIn: \"manje od 1 minutu\",\n    },\n    dual: \"manje od {{count}} minute\",\n    other: \"manje od {{count}} minuta\",\n  },\n\n  xMinutes: {\n    one: {\n      standalone: \"1 minuta\",\n      withPrepositionAgo: \"1 minute\",\n      withPrepositionIn: \"1 minutu\",\n    },\n    dual: \"{{count}} minute\",\n    other: \"{{count}} minuta\",\n  },\n\n  aboutXHours: {\n    one: {\n      standalone: \"oko 1 sat\",\n      withPrepositionAgo: \"oko 1 sat\",\n      withPrepositionIn: \"oko 1 sat\",\n    },\n    dual: \"oko {{count}} sata\",\n    other: \"oko {{count}} sati\",\n  },\n\n  xHours: {\n    one: {\n      standalone: \"1 sat\",\n      withPrepositionAgo: \"1 sat\",\n      withPrepositionIn: \"1 sat\",\n    },\n    dual: \"{{count}} sata\",\n    other: \"{{count}} sati\",\n  },\n\n  xDays: {\n    one: {\n      standalone: \"1 dan\",\n      withPrepositionAgo: \"1 dan\",\n      withPrepositionIn: \"1 dan\",\n    },\n    dual: \"{{count}} dana\",\n    other: \"{{count}} dana\",\n  },\n\n  aboutXWeeks: {\n    one: {\n      standalone: \"oko 1 sedmicu\",\n      withPrepositionAgo: \"oko 1 sedmicu\",\n      withPrepositionIn: \"oko 1 sedmicu\",\n    },\n    dual: \"oko {{count}} sedmice\",\n    other: \"oko {{count}} sedmice\",\n  },\n\n  xWeeks: {\n    one: {\n      standalone: \"1 sedmicu\",\n      withPrepositionAgo: \"1 sedmicu\",\n      withPrepositionIn: \"1 sedmicu\",\n    },\n    dual: \"{{count}} sedmice\",\n    other: \"{{count}} sedmice\",\n  },\n\n  aboutXMonths: {\n    one: {\n      standalone: \"oko 1 mjesec\",\n      withPrepositionAgo: \"oko 1 mjesec\",\n      withPrepositionIn: \"oko 1 mjesec\",\n    },\n    dual: \"oko {{count}} mjeseca\",\n    other: \"oko {{count}} mjeseci\",\n  },\n\n  xMonths: {\n    one: {\n      standalone: \"1 mjesec\",\n      withPrepositionAgo: \"1 mjesec\",\n      withPrepositionIn: \"1 mjesec\",\n    },\n    dual: \"{{count}} mjeseca\",\n    other: \"{{count}} mjeseci\",\n  },\n\n  aboutXYears: {\n    one: {\n      standalone: \"oko 1 godinu\",\n      withPrepositionAgo: \"oko 1 godinu\",\n      withPrepositionIn: \"oko 1 godinu\",\n    },\n    dual: \"oko {{count}} godine\",\n    other: \"oko {{count}} godina\",\n  },\n\n  xYears: {\n    one: {\n      standalone: \"1 godina\",\n      withPrepositionAgo: \"1 godine\",\n      withPrepositionIn: \"1 godinu\",\n    },\n    dual: \"{{count}} godine\",\n    other: \"{{count}} godina\",\n  },\n\n  overXYears: {\n    one: {\n      standalone: \"preko 1 godinu\",\n      withPrepositionAgo: \"preko 1 godinu\",\n      withPrepositionIn: \"preko 1 godinu\",\n    },\n    dual: \"preko {{count}} godine\",\n    other: \"preko {{count}} godina\",\n  },\n\n  almostXYears: {\n    one: {\n      standalone: \"gotovo 1 godinu\",\n      withPrepositionAgo: \"gotovo 1 godinu\",\n      withPrepositionIn: \"gotovo 1 godinu\",\n    },\n    dual: \"gotovo {{count}} godine\",\n    other: \"gotovo {{count}} godina\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    if (options?.addSuffix) {\n      if (options.comparison && options.comparison > 0) {\n        result = tokenValue.one.withPrepositionIn;\n      } else {\n        result = tokenValue.one.withPrepositionAgo;\n      }\n    } else {\n      result = tokenValue.one.standalone;\n    }\n  } else if (\n    count % 10 > 1 &&\n    count % 10 < 5 && // if last digit is between 2 and 4\n    String(count).substr(-2, 1) !== \"1\" // unless the 2nd to last digit is \"1\"\n  ) {\n    result = tokenValue.dual.replace(\"{{count}}\", String(count));\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"za \" + result;\n    } else {\n      return \"prije \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d. MMMM yyyy.\",\n  long: \"d. MMMM yyyy.\",\n  medium: \"d. MMM yy.\",\n  short: \"dd. MM. yy.\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss (zzzz)\",\n  long: \"HH:mm:ss z\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'u' {{time}}\",\n  long: \"{{date}} 'u' {{time}}\",\n  medium: \"{{date}} {{time}}\",\n  short: \"{{date}} {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: (date) => {\n    switch (date.getDay()) {\n      case 0:\n        return \"'prošle nedjelje u' p\";\n      case 3:\n        return \"'prošle srijede u' p\";\n      case 6:\n        return \"'prošle subote u' p\";\n      default:\n        return \"'prošli' EEEE 'u' p\";\n    }\n  },\n  yesterday: \"'juče u' p\",\n  today: \"'danas u' p\",\n  tomorrow: \"'sutra u' p\",\n  nextWeek: (date) => {\n    switch (date.getDay()) {\n      case 0:\n        return \"'sljedeće nedjelje u' p\";\n      case 3:\n        return \"'sljedeću srijedu u' p\";\n      case 6:\n        return \"'sljedeću subotu u' p\";\n      default:\n        return \"'sljedeći' EEEE 'u' p\";\n    }\n  },\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, _baseDate, _options) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date);\n  }\n\n  return format;\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"pr.n.e.\", \"AD\"],\n  abbreviated: [\"pr. Hr.\", \"po. Hr.\"],\n  wide: [\"Prije Hrista\", \"Poslije Hrista\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1.\", \"2.\", \"3.\", \"4.\"],\n  abbreviated: [\"1. kv.\", \"2. kv.\", \"3. kv.\", \"4. kv.\"],\n  wide: [\"1. kvartal\", \"2. kvartal\", \"3. kvartal\", \"4. kvartal\"],\n};\n\nconst monthValues = {\n  narrow: [\n    \"1.\",\n    \"2.\",\n    \"3.\",\n    \"4.\",\n    \"5.\",\n    \"6.\",\n    \"7.\",\n    \"8.\",\n    \"9.\",\n    \"10.\",\n    \"11.\",\n    \"12.\",\n  ],\n\n  abbreviated: [\n    \"jan\",\n    \"feb\",\n    \"mar\",\n    \"apr\",\n    \"maj\",\n    \"jun\",\n    \"jul\",\n    \"avg\",\n    \"sep\",\n    \"okt\",\n    \"nov\",\n    \"dec\",\n  ],\n\n  wide: [\n    \"januar\",\n    \"februar\",\n    \"mart\",\n    \"april\",\n    \"maj\",\n    \"juni\",\n    \"juli\",\n    \"avgust\",\n    \"septembar\",\n    \"oktobar\",\n    \"novembar\",\n    \"decembar\",\n  ],\n};\n\nconst formattingMonthValues = {\n  narrow: [\n    \"1.\",\n    \"2.\",\n    \"3.\",\n    \"4.\",\n    \"5.\",\n    \"6.\",\n    \"7.\",\n    \"8.\",\n    \"9.\",\n    \"10.\",\n    \"11.\",\n    \"12.\",\n  ],\n\n  abbreviated: [\n    \"jan\",\n    \"feb\",\n    \"mar\",\n    \"apr\",\n    \"maj\",\n    \"jun\",\n    \"jul\",\n    \"avg\",\n    \"sep\",\n    \"okt\",\n    \"nov\",\n    \"dec\",\n  ],\n\n  wide: [\n    \"januar\",\n    \"februar\",\n    \"mart\",\n    \"april\",\n    \"maj\",\n    \"juni\",\n    \"juli\",\n    \"avgust\",\n    \"septembar\",\n    \"oktobar\",\n    \"novembar\",\n    \"decembar\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"N\", \"P\", \"U\", \"S\", \"Č\", \"P\", \"S\"],\n  short: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n  abbreviated: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n  wide: [\n    \"nedjelja\",\n    \"ponedjeljak\",\n    \"utorak\",\n    \"srijeda\",\n    \"četvrtak\",\n    \"petak\",\n    \"subota\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"popodne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"popodne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n  wide: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"poslije podne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"popodne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"popodne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n  wide: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"ponoć\",\n    noon: \"podne\",\n    morning: \"ujutru\",\n    afternoon: \"poslije podne\",\n    evening: \"uveče\",\n    night: \"noću\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n  return String(number) + \".\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingMonthValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)\\./i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(pr\\.n\\.e\\.|AD)/i,\n  abbreviated: /^(pr\\.\\s?Hr\\.|po\\.\\s?Hr\\.)/i,\n  wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^pr/i, /^(po|nova)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^[1234]\\.\\s?kv\\.?/i,\n  wide: /^[1234]\\. kvartal/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^(10|11|12|[123456789])\\./i,\n  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,\n  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^1/i,\n    /^2/i,\n    /^3/i,\n    /^4/i,\n    /^5/i,\n    /^6/i,\n    /^7/i,\n    /^8/i,\n    /^9/i,\n    /^10/i,\n    /^11/i,\n    /^12/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^maj/i,\n    /^jun/i,\n    /^jul/i,\n    /^avg/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[npusčc]/i,\n  short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,\n  abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,\n  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|poslije podne|ujutru)/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^pono/i,\n    noon: /^pod/i,\n    morning: /jutro/i,\n    afternoon: /(poslije\\s|po)+podne/i,\n    evening: /(uvece|uveče)/i,\n    night: /(nocu|noću)/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./bs/_lib/formatDistance.js\";\nimport { formatLong } from \"./bs/_lib/formatLong.js\";\nimport { formatRelative } from \"./bs/_lib/formatRelative.js\";\nimport { localize } from \"./bs/_lib/localize.js\";\nimport { match } from \"./bs/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Bosnian locale.\n * @language Bosnian\n * @iso-639-2 bos\n * @author Branislav Lazić [@branislavlazic](https://github.com/branislavlazic)\n */\nexport const bs = {\n  code: \"bs\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4,\n  },\n};\n\n// Fallback for modularized imports:\nexport default bs;\n", "/**\n * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposició de igual que si estiguessin escrits amb lletres.\n *    l'1 de juliol ('l'u')\n *    l'11 de novembre ('l'onze')\n *    l'11a clàusula del contracte ('l'onzena')\n *    la contractació d'11 jugadors ('d'onze')\n *    l'aval d'11.000 socis ('d'onze mil')\n *\n * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes\n */\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"menys d'un segon\",\n    eleven: \"menys d'onze segons\",\n    other: \"menys de {{count}} segons\",\n  },\n\n  xSeconds: {\n    one: \"1 segon\",\n    other: \"{{count}} segons\",\n  },\n\n  halfAMinute: \"mig minut\",\n\n  lessThanXMinutes: {\n    one: \"menys d'un minut\",\n    eleven: \"menys d'onze minuts\",\n    other: \"menys de {{count}} minuts\",\n  },\n\n  xMinutes: {\n    one: \"1 minut\",\n    other: \"{{count}} minuts\",\n  },\n\n  aboutXHours: {\n    one: \"aproximadament una hora\",\n    other: \"aproximadament {{count}} hores\",\n  },\n\n  xHours: {\n    one: \"1 hora\",\n    other: \"{{count}} hores\",\n  },\n\n  xDays: {\n    one: \"1 dia\",\n    other: \"{{count}} dies\",\n  },\n\n  aboutXWeeks: {\n    one: \"aproximadament una setmana\",\n    other: \"aproximadament {{count}} setmanes\",\n  },\n\n  xWeeks: {\n    one: \"1 setmana\",\n    other: \"{{count}} setmanes\",\n  },\n\n  aboutXMonths: {\n    one: \"aproximadament un mes\",\n    other: \"aproximadament {{count}} mesos\",\n  },\n\n  xMonths: {\n    one: \"1 mes\",\n    other: \"{{count}} mesos\",\n  },\n\n  aboutXYears: {\n    one: \"aproximadament un any\",\n    other: \"aproximadament {{count}} anys\",\n  },\n\n  xYears: {\n    one: \"1 any\",\n    other: \"{{count}} anys\",\n  },\n\n  overXYears: {\n    one: \"més d'un any\",\n    eleven: \"més d'onze anys\",\n    other: \"més de {{count}} anys\",\n  },\n\n  almostXYears: {\n    one: \"gairebé un any\",\n    other: \"gairebé {{count}} anys\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else if (count === 11 && tokenValue.eleven) {\n    result = tokenValue.eleven;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", String(count));\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"en \" + result;\n    } else {\n      return \"fa \" + result;\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d 'de' MMMM y\",\n  long: \"d 'de' MMMM y\",\n  medium: \"d MMM y\",\n  short: \"dd/MM/y\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss zzzz\",\n  long: \"HH:mm:ss z\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'a les' {{time}}\",\n  long: \"{{date}} 'a les' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'el' eeee 'passat a la' LT\",\n  yesterday: \"'ahir a la' p\",\n  today: \"'avui a la' p\",\n  tomorrow: \"'demà a la' p\",\n  nextWeek: \"eeee 'a la' p\",\n  other: \"P\",\n};\n\nconst formatRelativeLocalePlural = {\n  lastWeek: \"'el' eeee 'passat a les' p\",\n  yesterday: \"'ahir a les' p\",\n  today: \"'avui a les' p\",\n  tomorrow: \"'demà a les' p\",\n  nextWeek: \"eeee 'a les' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date, _baseDate, _options) => {\n  if (date.getHours() !== 1) {\n    return formatRelativeLocalePlural[token];\n  }\n  return formatRelativeLocale[token];\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\n/**\n * General information\n * Reference: https://aplicacions.llengua.gencat.cat\n * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html\n */\n\n/**\n * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes\n * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes\n */\nconst eraValues = {\n  narrow: [\"aC\", \"dC\"],\n  abbreviated: [\"a. de C.\", \"d. de C.\"],\n  wide: [\"abans de Crist\", \"després de Crist\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"T1\", \"T2\", \"T3\", \"T4\"],\n  wide: [\"1r trimestre\", \"2n trimestre\", \"3r trimestre\", \"4t trimestre\"],\n};\n\n/**\n * Dins d'un text convé fer servir la forma sencera dels mesos, ja que sempre és més clar el mot sencer que l'abreviatura, encara que aquesta sigui força coneguda.\n * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els gràfics, les taules o quadres estadístics, els textos publicitaris, etc.\n *\n * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes\n */\nconst monthValues = {\n  narrow: [\n    \"GN\",\n    \"FB\",\n    \"MÇ\",\n    \"AB\",\n    \"MG\",\n    \"JN\",\n    \"JL\",\n    \"AG\",\n    \"ST\",\n    \"OC\",\n    \"NV\",\n    \"DS\",\n  ],\n\n  /**\n   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.\n   * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.\n   * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.\n   */\n  abbreviated: [\n    \"gen.\",\n    \"febr.\",\n    \"març\",\n    \"abr.\",\n    \"maig\",\n    \"juny\",\n    \"jul.\",\n    \"ag.\",\n    \"set.\",\n    \"oct.\",\n    \"nov.\",\n    \"des.\",\n  ],\n\n  wide: [\n    \"gener\",\n    \"febrer\",\n    \"març\",\n    \"abril\",\n    \"maig\",\n    \"juny\",\n    \"juliol\",\n    \"agost\",\n    \"setembre\",\n    \"octubre\",\n    \"novembre\",\n    \"desembre\",\n  ],\n};\n\n/**\n * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.\n * Tot seguit porten la consonant següent a la i, excepte en el cas de dimarts, dimecres i diumenge, en què aquesta consonant és la m i, per tant, hi podria haver confusió.\n * Per evitar-ho, s'ha substituït la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.\n *\n * Seguint la norma general d'ús de les abreviatures, les dels dies de la setmana sempre porten punt final.\n * Igualment, van amb la primera lletra en majúscula quan la paraula sencera també hi aniria.\n * En canvi, van amb la primera lletra en minúscula quan la inicial de la paraula sencera també hi aniria.\n *\n * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot\n */\nconst dayValues = {\n  narrow: [\"dg.\", \"dl.\", \"dt.\", \"dm.\", \"dj.\", \"dv.\", \"ds.\"],\n  short: [\"dg.\", \"dl.\", \"dt.\", \"dm.\", \"dj.\", \"dv.\", \"ds.\"],\n  abbreviated: [\"dg.\", \"dl.\", \"dt.\", \"dm.\", \"dj.\", \"dv.\", \"ds.\"],\n  wide: [\n    \"diumenge\",\n    \"dilluns\",\n    \"dimarts\",\n    \"dimecres\",\n    \"dijous\",\n    \"divendres\",\n    \"dissabte\",\n  ],\n};\n\n/**\n * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes\n */\nconst dayPeriodValues = {\n  narrow: {\n    am: \"am\",\n    pm: \"pm\",\n    midnight: \"mitjanit\",\n    noon: \"migdia\",\n    morning: \"matí\",\n    afternoon: \"tarda\",\n    evening: \"vespre\",\n    night: \"nit\",\n  },\n  abbreviated: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"mitjanit\",\n    noon: \"migdia\",\n    morning: \"matí\",\n    afternoon: \"tarda\",\n    evening: \"vespre\",\n    night: \"nit\",\n  },\n  wide: {\n    am: \"ante meridiem\",\n    pm: \"post meridiem\",\n    midnight: \"mitjanit\",\n    noon: \"migdia\",\n    morning: \"matí\",\n    afternoon: \"tarda\",\n    evening: \"vespre\",\n    night: \"nit\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"am\",\n    pm: \"pm\",\n    midnight: \"de la mitjanit\",\n    noon: \"del migdia\",\n    morning: \"del matí\",\n    afternoon: \"de la tarda\",\n    evening: \"del vespre\",\n    night: \"de la nit\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"de la mitjanit\",\n    noon: \"del migdia\",\n    morning: \"del matí\",\n    afternoon: \"de la tarda\",\n    evening: \"del vespre\",\n    night: \"de la nit\",\n  },\n  wide: {\n    am: \"ante meridiem\",\n    pm: \"post meridiem\",\n    midnight: \"de la mitjanit\",\n    noon: \"del migdia\",\n    morning: \"del matí\",\n    afternoon: \"de la tarda\",\n    evening: \"del vespre\",\n    night: \"de la nit\",\n  },\n};\n\n/**\n * Quan van en singular, els nombres ordinals es representen, en forma d’abreviatura, amb la xifra seguida de l’última lletra del mot desplegat.\n * És optatiu posar punt després de la lletra.\n *\n * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18\n */\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"r\";\n      case 2:\n        return number + \"n\";\n      case 3:\n        return number + \"r\";\n      case 4:\n        return number + \"t\";\n    }\n  }\n  return number + \"è\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(è|r|n|r|t)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(aC|dC)/i,\n  abbreviated: /^(a. de C.|d. de C.)/i,\n  wide: /^(abans de Crist|despr[eé]s de Crist)/i,\n};\nconst parseEraPatterns = {\n  narrow: [/^aC/i, /^dC/i],\n  abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],\n  wide: [/^(abans de Crist)/i, /^(despr[eé]s de Crist)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^T[1234]/i,\n  wide: /^[1234](è|r|n|r|t)? trimestre/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,\n  abbreviated:\n    /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,\n  wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^GN/i,\n    /^FB/i,\n    /^MÇ/i,\n    /^AB/i,\n    /^MG/i,\n    /^JN/i,\n    /^JL/i,\n    /^AG/i,\n    /^ST/i,\n    /^OC/i,\n    /^NV/i,\n    /^DS/i,\n  ],\n\n  abbreviated: [\n    /^gen./i,\n    /^febr./i,\n    /^març/i,\n    /^abr./i,\n    /^maig/i,\n    /^juny/i,\n    /^jul./i,\n    /^ag./i,\n    /^set./i,\n    /^oct./i,\n    /^nov./i,\n    /^des./i,\n  ],\n\n  wide: [\n    /^gener/i,\n    /^febrer/i,\n    /^març/i,\n    /^abril/i,\n    /^maig/i,\n    /^juny/i,\n    /^juliol/i,\n    /^agost/i,\n    /^setembre/i,\n    /^octubre/i,\n    /^novembre/i,\n    /^desembre/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^(dg\\.|dl\\.|dt\\.|dm\\.|dj\\.|dv\\.|ds\\.)/i,\n  short: /^(dg\\.|dl\\.|dt\\.|dm\\.|dj\\.|dv\\.|ds\\.)/i,\n  abbreviated: /^(dg\\.|dl\\.|dt\\.|dm\\.|dj\\.|dv\\.|ds\\.)/i,\n  wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],\n\n  abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],\n\n  wide: [\n    /^diumenge/i,\n    /^dilluns/i,\n    /^dimarts/i,\n    /^dimecres/i,\n    /^dijous/i,\n    /^divendres/i,\n    /^disssabte/i,\n  ],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,\n  abbreviated:\n    /^([ap]\\.?\\s?m\\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,\n  wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mitjanit/i,\n    noon: /^migdia/i,\n    morning: /matí/i,\n    afternoon: /tarda/i,\n    evening: /vespre/i,\n    night: /nit/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"wide\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"wide\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"wide\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ca/_lib/formatDistance.js\";\nimport { formatLong } from \"./ca/_lib/formatLong.js\";\nimport { formatRelative } from \"./ca/_lib/formatRelative.js\";\nimport { localize } from \"./ca/_lib/localize.js\";\nimport { match } from \"./ca/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary Catalan locale.\n * @language Catalan\n * @iso-639-2 cat\n * @author Guillermo Grau [@guigrpa](https://github.com/guigrpa)\n * @author Alex Vizcaino [@avizcaino](https://github.com/avizcaino)\n */\nexport const ca = {\n  code: \"ca\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ca;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"کەمتر لە یەک چرکە\",\n    other: \"کەمتر لە {{count}} چرکە\",\n  },\n\n  xSeconds: {\n    one: \"1 چرکە\",\n    other: \"{{count}} چرکە\",\n  },\n\n  halfAMinute: \"نیو کاتژمێر\",\n\n  lessThanXMinutes: {\n    one: \"کەمتر لە یەک خولەک\",\n    other: \"کەمتر لە {{count}} خولەک\",\n  },\n\n  xMinutes: {\n    one: \"1 خولەک\",\n    other: \"{{count}} خولەک\",\n  },\n\n  aboutXHours: {\n    one: \"دەوروبەری 1 کاتژمێر\",\n    other: \"دەوروبەری {{count}} کاتژمێر\",\n  },\n\n  xHours: {\n    one: \"1 کاتژمێر\",\n    other: \"{{count}} کاتژمێر\",\n  },\n\n  xDays: {\n    one: \"1 ڕۆژ\",\n    other: \"{{count}} ژۆژ\",\n  },\n\n  aboutXWeeks: {\n    one: \"دەوروبەری 1 هەفتە\",\n    other: \"دوروبەری {{count}} هەفتە\",\n  },\n\n  xWeeks: {\n    one: \"1 هەفتە\",\n    other: \"{{count}} هەفتە\",\n  },\n\n  aboutXMonths: {\n    one: \"داوروبەری 1 مانگ\",\n    other: \"دەوروبەری {{count}} مانگ\",\n  },\n\n  xMonths: {\n    one: \"1 مانگ\",\n    other: \"{{count}} مانگ\",\n  },\n\n  aboutXYears: {\n    one: \"دەوروبەری  1 ساڵ\",\n    other: \"دەوروبەری {{count}} ساڵ\",\n  },\n\n  xYears: {\n    one: \"1 ساڵ\",\n    other: \"{{count}} ساڵ\",\n  },\n\n  overXYears: {\n    one: \"زیاتر لە ساڵێک\",\n    other: \"زیاتر لە {{count}} ساڵ\",\n  },\n\n  almostXYears: {\n    one: \"بەنزیکەیی ساڵێک  \",\n    other: \"بەنزیکەیی {{count}} ساڵ\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"لە ماوەی \" + result + \"دا\";\n    } else {\n      return result + \"پێش ئێستا\";\n    }\n  }\n\n  return result;\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'کاتژمێر' {{time}}\",\n  long: \"{{date}} 'کاتژمێر' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'هەفتەی ڕابردوو' eeee 'کاتژمێر' p\",\n  yesterday: \"'دوێنێ کاتژمێر' p\",\n  today: \"'ئەمڕۆ کاتژمێر' p\",\n  tomorrow: \"'بەیانی کاتژمێر' p\",\n  nextWeek: \"eeee 'کاتژمێر' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"پ\", \"د\"],\n  abbreviated: [\"پ-ز\", \"د-ز\"],\n  wide: [\"پێش زاین\", \"دوای زاین\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"چ1م\", \"چ2م\", \"چ3م\", \"چ4م\"],\n  wide: [\"چارەگی یەکەم\", \"چارەگی دووەم\", \"چارەگی سێیەم\", \"چارەگی چوارەم\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\n    \"ک-د\",\n    \"ش\",\n    \"ئا\",\n    \"ن\",\n    \"م\",\n    \"ح\",\n    \"ت\",\n    \"ئا\",\n    \"ئە\",\n    \"تش-ی\",\n    \"تش-د\",\n    \"ک-ی\",\n  ],\n\n  abbreviated: [\n    \"کان-دوو\",\n    \"شوب\",\n    \"ئاد\",\n    \"نیس\",\n    \"مایس\",\n    \"حوز\",\n    \"تەم\",\n    \"ئاب\",\n    \"ئەل\",\n    \"تش-یەک\",\n    \"تش-دوو\",\n    \"کان-یەک\",\n  ],\n\n  wide: [\n    \"کانوونی دووەم\",\n    \"شوبات\",\n    \"ئادار\",\n    \"نیسان\",\n    \"مایس\",\n    \"حوزەیران\",\n    \"تەمموز\",\n    \"ئاب\",\n    \"ئەیلول\",\n    \"تشرینی یەکەم\",\n    \"تشرینی دووەم\",\n    \"کانوونی یەکەم\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ی-ش\", \"د-ش\", \"س-ش\", \"چ-ش\", \"پ-ش\", \"هە\", \"ش\"],\n  short: [\"یە-شە\", \"دوو-شە\", \"سێ-شە\", \"چو-شە\", \"پێ-شە\", \"هەی\", \"شە\"],\n  abbreviated: [\n    \"یەک-شەم\",\n    \"دوو-شەم\",\n    \"سێ-شەم\",\n    \"چوار-شەم\",\n    \"پێنج-شەم\",\n    \"هەینی\",\n    \"شەمە\",\n  ],\n\n  wide: [\n    \"یەک شەمە\",\n    \"دوو شەمە\",\n    \"سێ شەمە\",\n    \"چوار شەمە\",\n    \"پێنج شەمە\",\n    \"هەینی\",\n    \"شەمە\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"پ\",\n    pm: \"د\",\n    midnight: \"ن-ش\",\n    noon: \"ن\",\n    morning: \"بەیانی\",\n    afternoon: \"دوای نیوەڕۆ\",\n    evening: \"ئێوارە\",\n    night: \"شەو\",\n  },\n  abbreviated: {\n    am: \"پ-ن\",\n    pm: \"د-ن\",\n    midnight: \"نیوە شەو\",\n    noon: \"نیوەڕۆ\",\n    morning: \"بەیانی\",\n    afternoon: \"دوای نیوەڕۆ\",\n    evening: \"ئێوارە\",\n    night: \"شەو\",\n  },\n  wide: {\n    am: \"پێش نیوەڕۆ\",\n    pm: \"دوای نیوەڕۆ\",\n    midnight: \"نیوە شەو\",\n    noon: \"نیوەڕۆ\",\n    morning: \"بەیانی\",\n    afternoon: \"دوای نیوەڕۆ\",\n    evening: \"ئێوارە\",\n    night: \"شەو\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"پ\",\n    pm: \"د\",\n    midnight: \"ن-ش\",\n    noon: \"ن\",\n    morning: \"لە بەیانیدا\",\n    afternoon: \"لە دوای نیوەڕۆدا\",\n    evening: \"لە ئێوارەدا\",\n    night: \"لە شەودا\",\n  },\n  abbreviated: {\n    am: \"پ-ن\",\n    pm: \"د-ن\",\n    midnight: \"نیوە شەو\",\n    noon: \"نیوەڕۆ\",\n    morning: \"لە بەیانیدا\",\n    afternoon: \"لە دوای نیوەڕۆدا\",\n    evening: \"لە ئێوارەدا\",\n    night: \"لە شەودا\",\n  },\n  wide: {\n    am: \"پێش نیوەڕۆ\",\n    pm: \"دوای نیوەڕۆ\",\n    midnight: \"نیوە شەو\",\n    noon: \"نیوەڕۆ\",\n    morning: \"لە بەیانیدا\",\n    afternoon: \"لە دوای نیوەڕۆدا\",\n    evening: \"لە ئێوارەدا\",\n    night: \"لە شەودا\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  return String(dirtyNumber);\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(پ|د)/i,\n  abbreviated: /^(پ-ز|د.ز)/i,\n  wide: /^(پێش زاین| دوای زاین)/i,\n};\nconst parseEraPatterns = {\n  any: [/^د/g, /^پ/g],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^م[1234]چ/i,\n  wide: /^(یەکەم|دووەم|سێیەم| چوارەم) (چارەگی)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  wide: [/چارەگی یەکەم/, /چارەگی دووەم/, /چارەگی سيیەم/, /چارەگی چوارەم/],\n\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^(ک-د|ش|ئا|ن|م|ح|ت|ئە|تش-ی|تش-د|ک-ی)/i,\n  abbreviated:\n    /^(کان-دوو|شوب|ئاد|نیس|مایس|حوز|تەم|ئاب|ئەل|تش-یەک|تش-دوو|کان-یەک)/i,\n  wide: /^(کانوونی دووەم|شوبات|ئادار|نیسان|مایس|حوزەیران|تەمموز|ئاب|ئەیلول|تشرینی یەکەم|تشرینی دووەم|کانوونی یەکەم)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^ک-د/i,\n    /^ش/i,\n    /^ئا/i,\n    /^ن/i,\n    /^م/i,\n    /^ح/i,\n    /^ت/i,\n    /^ئا/i,\n    /^ئە/i,\n    /^تش-ی/i,\n    /^تش-د/i,\n    /^ک-ی/i,\n  ],\n\n  any: [\n    /^کان-دوو/i,\n    /^شوب/i,\n    /^ئاد/i,\n    /^نیس/i,\n    /^مایس/i,\n    /^حوز/i,\n    /^تەم/i,\n    /^ئاب/i,\n    /^ئەل/i,\n    /^تش-یەک/i,\n    /^تش-دوو/i,\n    /^|کان-یەک/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^(ش|ی|د|س|چ|پ|هە)/i,\n  short: /^(یە-شە|دوو-شە|سێ-شە|چو-شە|پێ-شە|هە|شە)/i,\n  abbreviated: /^(یەک-شەم|دوو-شەم|سێ-شەم|چوار-شەم|پێنخ-شەم|هەینی|شەمە)/i,\n  wide: /^(یەک شەمە|دوو شەمە|سێ شەمە|چوار شەمە|پێنج شەمە|هەینی|شەمە)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(پ|د|ن-ش|ن| (بەیانی|دوای نیوەڕۆ|ئێوارە|شەو))/i,\n  abbreviated: /^(پ-ن|د-ن|نیوە شەو|نیوەڕۆ|بەیانی|دوای نیوەڕۆ|ئێوارە|شەو)/,\n  wide: /^(پێش نیوەڕۆ|دوای نیوەڕۆ|نیوەڕۆ|نیوە شەو|لەبەیانیدا|لەدواینیوەڕۆدا|لە ئێوارەدا|لە شەودا)/,\n  any: /^(پ|د|بەیانی|نیوەڕۆ|ئێوارە|شەو)/,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^د/i,\n    pm: /^پ/i,\n    midnight: /^ن-ش/i,\n    noon: /^ن/i,\n    morning: /بەیانی/i,\n    afternoon: /دواینیوەڕۆ/i,\n    evening: /ئێوارە/i,\n    night: /شەو/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./ckb/_lib/formatDistance.js\";\nimport { formatLong } from \"./ckb/_lib/formatLong.js\";\nimport { formatRelative } from \"./ckb/_lib/formatRelative.js\";\nimport { localize } from \"./ckb/_lib/localize.js\";\nimport { match } from \"./ckb/_lib/match.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary Central Kurdish locale.\n * @language Central Kurdish\n * @iso-639-2 kur\n * @author Revan Sarbast [@Revan99]{@link https://github.com/Revan99}\n */\nexport const ckb = {\n  code: \"ckb\",\n  formatDistance,\n  formatLong,\n  formatRelative,\n  localize,\n  match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default ckb;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: {\n      regular: \"méně než 1 sekunda\",\n      past: \"před méně než 1 sekundou\",\n      future: \"za méně než 1 sekundu\",\n    },\n    few: {\n      regular: \"méně než {{count}} sekundy\",\n      past: \"před méně než {{count}} sekundami\",\n      future: \"za méně než {{count}} sekundy\",\n    },\n    many: {\n      regular: \"méně než {{count}} sekund\",\n      past: \"před méně než {{count}} sekundami\",\n      future: \"za méně než {{count}} sekund\",\n    },\n  },\n\n  xSeconds: {\n    one: {\n      regular: \"1 sekunda\",\n      past: \"před 1 sekundou\",\n      future: \"za 1 sekundu\",\n    },\n    few: {\n      regular: \"{{count}} sekundy\",\n      past: \"před {{count}} sekundami\",\n      future: \"za {{count}} sekundy\",\n    },\n    many: {\n      regular: \"{{count}} sekund\",\n      past: \"před {{count}} sekundami\",\n      future: \"za {{count}} sekund\",\n    },\n  },\n\n  halfAMinute: {\n    type: \"other\",\n    other: {\n      regular: \"půl minuty\",\n      past: \"před půl minutou\",\n      future: \"za půl minuty\",\n    },\n  },\n\n  lessThanXMinutes: {\n    one: {\n      regular: \"méně než 1 minuta\",\n      past: \"před méně než 1 minutou\",\n      future: \"za méně než 1 minutu\",\n    },\n    few: {\n      regular: \"méně než {{count}} minuty\",\n      past: \"před méně než {{count}} minutami\",\n      future: \"za méně než {{count}} minuty\",\n    },\n    many: {\n      regular: \"méně než {{count}} minut\",\n      past: \"před méně než {{count}} minutami\",\n      future: \"za méně než {{count}} minut\",\n    },\n  },\n\n  xMinutes: {\n    one: {\n      regular: \"1 minuta\",\n      past: \"před 1 minutou\",\n      future: \"za 1 minutu\",\n    },\n    few: {\n      regular: \"{{count}} minuty\",\n      past: \"před {{count}} minutami\",\n      future: \"za {{count}} minuty\",\n    },\n    many: {\n      regular: \"{{count}} minut\",\n      past: \"před {{count}} minutami\",\n      future: \"za {{count}} minut\",\n    },\n  },\n\n  aboutXHours: {\n    one: {\n      regular: \"přibližně 1 hodina\",\n      past: \"přibližně před 1 hodinou\",\n      future: \"přibližně za 1 hodinu\",\n    },\n    few: {\n      regular: \"přibližně {{count}} hodiny\",\n      past: \"přibližně před {{count}} hodinami\",\n      future: \"přibližně za {{count}} hodiny\",\n    },\n    many: {\n      regular: \"přibližně {{count}} hodin\",\n      past: \"přibližně před {{count}} hodinami\",\n      future: \"přibližně za {{count}} hodin\",\n    },\n  },\n\n  xHours: {\n    one: {\n      regular: \"1 hodina\",\n      past: \"před 1 hodinou\",\n      future: \"za 1 hodinu\",\n    },\n    few: {\n      regular: \"{{count}} hodiny\",\n      past: \"před {{count}} hodinami\",\n      future: \"za {{count}} hodiny\",\n    },\n    many: {\n      regular: \"{{count}} hodin\",\n      past: \"před {{count}} hodinami\",\n      future: \"za {{count}} hodin\",\n    },\n  },\n\n  xDays: {\n    one: {\n      regular: \"1 den\",\n      past: \"před 1 dnem\",\n      future: \"za 1 den\",\n    },\n    few: {\n      regular: \"{{count}} dny\",\n      past: \"před {{count}} dny\",\n      future: \"za {{count}} dny\",\n    },\n    many: {\n      regular: \"{{count}} dní\",\n      past: \"před {{count}} dny\",\n      future: \"za {{count}} dní\",\n    },\n  },\n\n  aboutXWeeks: {\n    one: {\n      regular: \"přibližně 1 týden\",\n      past: \"přibližně před 1 týdnem\",\n      future: \"přibližně za 1 týden\",\n    },\n\n    few: {\n      regular: \"přibližně {{count}} týdny\",\n      past: \"přibližně před {{count}} týdny\",\n      future: \"přibližně za {{count}} týdny\",\n    },\n\n    many: {\n      regular: \"přibližně {{count}} týdnů\",\n      past: \"přibližně před {{count}} týdny\",\n      future: \"přibližně za {{count}} týdnů\",\n    },\n  },\n\n  xWeeks: {\n    one: {\n      regular: \"1 týden\",\n      past: \"před 1 týdnem\",\n      future: \"za 1 týden\",\n    },\n\n    few: {\n      regular: \"{{count}} týdny\",\n      past: \"před {{count}} týdny\",\n      future: \"za {{count}} týdny\",\n    },\n\n    many: {\n      regular: \"{{count}} týdnů\",\n      past: \"před {{count}} týdny\",\n      future: \"za {{count}} týdnů\",\n    },\n  },\n\n  aboutXMonths: {\n    one: {\n      regular: \"přibližně 1 měsíc\",\n      past: \"přibližně před 1 měsícem\",\n      future: \"přibližně za 1 měsíc\",\n    },\n\n    few: {\n      regular: \"přibližně {{count}} měsíce\",\n      past: \"přibližně před {{count}} měsíci\",\n      future: \"přibližně za {{count}} měsíce\",\n    },\n\n    many: {\n      regular: \"přibližně {{count}} měsíců\",\n      past: \"přibližně před {{count}} měsíci\",\n      future: \"přibližně za {{count}} měsíců\",\n    },\n  },\n\n  xMonths: {\n    one: {\n      regular: \"1 měsíc\",\n      past: \"před 1 měsícem\",\n      future: \"za 1 měsíc\",\n    },\n\n    few: {\n      regular: \"{{count}} měsíce\",\n      past: \"před {{count}} měsíci\",\n      future: \"za {{count}} měsíce\",\n    },\n\n    many: {\n      regular: \"{{count}} měsíců\",\n      past: \"před {{count}} měsíci\",\n      future: \"za {{count}} měsíců\",\n    },\n  },\n\n  aboutXYears: {\n    one: {\n      regular: \"přibližně 1 rok\",\n      past: \"přibližně před 1 rokem\",\n      future: \"přibližně za 1 rok\",\n    },\n    few: {\n      regular: \"přibližně {{count}} roky\",\n      past: \"přibližně před {{count}} roky\",\n      future: \"přibližně za {{count}} roky\",\n    },\n    many: {\n      regular: \"přibližně {{count}} roků\",\n      past: \"přibližně před {{count}} roky\",\n      future: \"přibližně za {{count}} roků\",\n    },\n  },\n\n  xYears: {\n    one: {\n      regular: \"1 rok\",\n      past: \"před 1 rokem\",\n      future: \"za 1 rok\",\n    },\n    few: {\n      regular: \"{{count}} roky\",\n      past: \"před {{count}} roky\",\n      future: \"za {{count}} roky\",\n    },\n    many: {\n      regular: \"{{count}} roků\",\n      past: \"před {{count}} roky\",\n      future: \"za {{count}} roků\",\n    },\n  },\n\n  overXYears: {\n    one: {\n      regular: \"více než 1 rok\",\n      past: \"před více než 1 rokem\",\n      future: \"za více než 1 rok\",\n    },\n    few: {\n      regular: \"více než {{count}} roky\",\n      past: \"před více než {{count}} roky\",\n      future: \"za více než {{count}} roky\",\n    },\n    many: {\n      regular: \"více než {{count}} roků\",\n      past: \"před více než {{count}} roky\",\n      future: \"za více než {{count}} roků\",\n    },\n  },\n\n  almostXYears: {\n    one: {\n      regular: \"skoro 1 rok\",\n      past: \"skoro před 1 rokem\",\n      future: \"skoro za 1 rok\",\n    },\n    few: {\n      regular: \"skoro {{count}} roky\",\n      past: \"skoro před {{count}} roky\",\n      future: \"skoro za {{count}} roky\",\n    },\n    many: {\n      regular: \"skoro {{count}} roků\",\n      past: \"skoro před {{count}} roky\",\n      future: \"skoro za {{count}} roků\",\n    },\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let pluralResult;\n\n  const tokenValue = formatDistanceLocale[token];\n\n  // cs pluralization\n  if (tokenValue.type === \"other\") {\n    pluralResult = tokenValue.other;\n  } else if (count === 1) {\n    pluralResult = tokenValue.one;\n  } else if (count > 1 && count < 5) {\n    pluralResult = tokenValue.few;\n  } else {\n    pluralResult = tokenValue.many;\n  }\n\n  // times\n  const suffixExist = options?.addSuffix === true;\n  const comparison = options?.comparison;\n\n  let timeResult;\n  if (suffixExist && comparison === -1) {\n    timeResult = pluralResult.past;\n  } else if (suffixExist && comparison === 1) {\n    timeResult = pluralResult.future;\n  } else {\n    timeResult = pluralResult.regular;\n  }\n\n  return timeResult.replace(\"{{count}}\", String(count));\n};\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d. MMMM yyyy\",\n  long: \"d. MMMM yyyy\",\n  medium: \"d. M. yyyy\",\n  short: \"dd.MM.yyyy\",\n};\n\nconst timeFormats = {\n  full: \"H:mm:ss zzzz\",\n  long: \"H:mm:ss z\",\n  medium: \"H:mm:ss\",\n  short: \"H:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'v' {{time}}\",\n  long: \"{{date}} 'v' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const accusativeWeekdays = [\n  \"neděli\",\n  \"pondělí\",\n  \"úterý\",\n  \"středu\",\n  \"čtvrtek\",\n  \"pátek\",\n  \"sobotu\",\n];\n\nconst formatRelativeLocale = {\n  lastWeek: \"'poslední' eeee 've' p\",\n  yesterday: \"'včera v' p\",\n  today: \"'dnes v' p\",\n  tomorrow: \"'zítra v' p\",\n  nextWeek: (date) => {\n    const day = date.getDay();\n    return \"'v \" + accusativeWeekdays[day] + \" o' p\";\n  },\n  other: \"P\",\n};\n\nexport const formatRelative = (token, date) => {\n  const format = formatRelativeLocale[token];\n\n  if (typeof format === \"function\") {\n    return format(date);\n  }\n\n  return format;\n};\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"př. n. l.\", \"n. l.\"],\n  abbreviated: [\"př. n. l.\", \"n. l.\"],\n  wide: [\"před naším letopočtem\", \"našeho letopočtu\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"1. čtvrtletí\", \"2. čtvrtletí\", \"3. čtvrtletí\", \"4. čtvrtletí\"],\n\n  wide: [\"1. čtvrtletí\", \"2. čtvrtletí\", \"3. čtvrtletí\", \"4. čtvrtletí\"],\n};\n\nconst monthValues = {\n  narrow: [\"L\", \"Ú\", \"B\", \"D\", \"K\", \"Č\", \"Č\", \"S\", \"Z\", \"Ř\", \"L\", \"P\"],\n  abbreviated: [\n    \"led\",\n    \"úno\",\n    \"bře\",\n    \"dub\",\n    \"kvě\",\n    \"čvn\",\n    \"čvc\",\n    \"srp\",\n    \"zář\",\n    \"říj\",\n    \"lis\",\n    \"pro\",\n  ],\n\n  wide: [\n    \"leden\",\n    \"únor\",\n    \"březen\",\n    \"duben\",\n    \"květen\",\n    \"červen\",\n    \"červenec\",\n    \"srpen\",\n    \"září\",\n    \"říjen\",\n    \"listopad\",\n    \"prosinec\",\n  ],\n};\n\nconst formattingMonthValues = {\n  narrow: [\"L\", \"Ú\", \"B\", \"D\", \"K\", \"Č\", \"Č\", \"S\", \"Z\", \"Ř\", \"L\", \"P\"],\n  abbreviated: [\n    \"led\",\n    \"úno\",\n    \"bře\",\n    \"dub\",\n    \"kvě\",\n    \"čvn\",\n    \"čvc\",\n    \"srp\",\n    \"zář\",\n    \"říj\",\n    \"lis\",\n    \"pro\",\n  ],\n\n  wide: [\n    \"ledna\",\n    \"února\",\n    \"března\",\n    \"dubna\",\n    \"května\",\n    \"června\",\n    \"července\",\n    \"srpna\",\n    \"září\",\n    \"října\",\n    \"listopadu\",\n    \"prosince\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"],\n  short: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"],\n  abbreviated: [\"ned\", \"pon\", \"úte\", \"stř\", \"čtv\", \"pát\", \"sob\"],\n  wide: [\"neděle\", \"pondělí\", \"úterý\", \"středa\", \"čtvrtek\", \"pátek\", \"sobota\"],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"dop.\",\n    pm: \"odp.\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\",\n    morning: \"ráno\",\n    afternoon: \"odpoledne\",\n    evening: \"večer\",\n    night: \"noc\",\n  },\n  abbreviated: {\n    am: \"dop.\",\n    pm: \"odp.\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\",\n    morning: \"ráno\",\n    afternoon: \"odpoledne\",\n    evening: \"večer\",\n    night: \"noc\",\n  },\n  wide: {\n    am: \"dopoledne\",\n    pm: \"odpoledne\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\",\n    morning: \"ráno\",\n    afternoon: \"odpoledne\",\n    evening: \"večer\",\n    night: \"noc\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"dop.\",\n    pm: \"odp.\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\",\n    morning: \"ráno\",\n    afternoon: \"odpoledne\",\n    evening: \"večer\",\n    night: \"noc\",\n  },\n  abbreviated: {\n    am: \"dop.\",\n    pm: \"odp.\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\",\n    morning: \"ráno\",\n    afternoon: \"odpoledne\",\n    evening: \"večer\",\n    night: \"noc\",\n  },\n  wide: {\n    am: \"dopoledne\",\n    pm: \"odpoledne\",\n    midnight: \"půlnoc\",\n    noon: \"poledne\"