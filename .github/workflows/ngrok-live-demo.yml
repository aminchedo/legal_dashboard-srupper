name: üåê ngrok Live Demo (Fixed & Debugged)

on:
  workflow_dispatch:

jobs:
  ngrok-demo-fixed:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Pre-flight Checks
      env:
        NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      run: |
        echo "üîç Pre-flight checks..."
        
        # Check authtoken
        if [ -z "$NGROK_AUTHTOKEN" ]; then
          echo "‚ùå NGROK_AUTHTOKEN not found in secrets"
          echo "Please add the authtoken: 314Xps5bkUs1VE7JE0wk8sX9dtg_2m9fX5nrn3eX7x23kwWNf"
          echo "Go to: Repository Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
          echo "Name: NGROK_AUTHTOKEN"
          echo "Value: 314Xps5bkUs1VE7JE0wk8sX9dtg_2m9fX5nrn3eX7x23kwWNf"
          exit 1
        fi
        
        echo "‚úÖ NGROK_AUTHTOKEN found (${#NGROK_AUTHTOKEN} characters)"
        
        # Check directory structure
        [ -d "frontend" ] && echo "‚úÖ Frontend directory exists" || echo "‚ùå Frontend directory missing"
        [ -d "backend" ] && echo "‚úÖ Backend directory exists" || echo "‚ùå Backend directory missing"
        [ -f "frontend/package.json" ] && echo "‚úÖ Frontend package.json exists" || echo "‚ùå Frontend package.json missing"
        [ -f "backend/package.json" ] && echo "‚úÖ Backend package.json exists" || echo "‚ùå Backend package.json missing"
    
    - name: Install ngrok
      env:
        NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      run: |
        echo "üì• Installing ngrok..."
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        echo "üîß Configuring ngrok with authtoken..."
        ngrok config add-authtoken $NGROK_AUTHTOKEN
        ngrok config check
        echo "‚úÖ ngrok configured successfully"
    
    - name: Setup Dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        
        # Frontend
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "Installing frontend dependencies..."
          cd frontend
          npm install || {
            echo "‚ùå Frontend npm install failed"
            exit 1
          }
          cd ..
          echo "‚úÖ Frontend dependencies installed"
        fi
        
        # Backend  
        if [ -d "backend" ] && [ -f "backend/package.json" ]; then
          echo "Installing backend dependencies..."
          cd backend
          npm install || {
            echo "‚ùå Backend npm install failed"
            exit 1
          }
          cd ..
          echo "‚úÖ Backend dependencies installed"
        fi
    
    - name: Build and Start Servers
      run: |
        echo "üèóÔ∏è Building and starting servers..."
        
        # Start backend
        if [ -d "backend" ] && [ -f "backend/package.json" ]; then
          cd backend
          echo "üöÄ Starting backend..."
          npm start > ../backend.log 2>&1 &
          BACKEND_PID=$!
          echo $BACKEND_PID > ../backend.pid
          cd ..
          echo "Backend PID: $BACKEND_PID"
          sleep 8
          
          # Test backend
          curl -f http://localhost:3001/health && echo "‚úÖ Backend health OK" || echo "‚ùå Backend health failed"
        fi
        
        # Build and start frontend
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          cd frontend
          echo "üèóÔ∏è Building frontend..."
          npm run build || {
            echo "‚ùå Frontend build failed"
            exit 1
          }
          
          echo "üåê Starting frontend..."
          npm run preview --port 5173 > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo $FRONTEND_PID > ../frontend.pid
          cd ..
          echo "Frontend PID: $FRONTEND_PID"
          sleep 10
          
          # Test frontend
          curl -f http://localhost:5173 && echo "‚úÖ Frontend OK" || echo "‚ùå Frontend failed"
        fi
    
    - name: Create ngrok Tunnel
      run: |
        echo "üåê Creating ngrok tunnel..."
        
        # Start ngrok
        ngrok http 5173 --log=stdout > ngrok.log &
        NGROK_PID=$!
        echo $NGROK_PID > ngrok.pid
        echo "ngrok PID: $NGROK_PID"
        
        # Wait for tunnel to establish
        sleep 10
        
        # Extract URL using multiple methods
        echo "üîç Extracting ngrok URL..."
        
        # Method 1: API
        NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null)
        
        # Method 2: Log parsing
        if [ -z "$NGROK_URL" ] || [ "$NGROK_URL" = "null" ]; then
          NGROK_URL=$(grep -o 'https://[^[:space:]]*\.ngrok-free\.app' ngrok.log | head -1)
        fi
        
        # Method 3: Alternative pattern
        if [ -z "$NGROK_URL" ]; then
          NGROK_URL=$(grep -o 'https://[^[:space:]]*\.ngrok\.io' ngrok.log | head -1)
        fi
        
        echo "üåê Detected ngrok URL: $NGROK_URL"
        
        if [ -z "$NGROK_URL" ]; then
          echo "‚ùå Failed to extract ngrok URL"
          echo "üìã ngrok log contents:"
          cat ngrok.log
          echo "üìã ngrok API response:"
          curl -s localhost:4040/api/tunnels | jq . || echo "API call failed"
          exit 1
        fi
        
        # Save URL for artifacts
        echo "$NGROK_URL" > ngrok-url.txt
        
        # Test URL
        sleep 5
        curl -I "$NGROK_URL" && echo "‚úÖ ngrok tunnel accessible" || echo "‚ö†Ô∏è ngrok tunnel may need time to become accessible"
    
    - name: Create Demo Report
      run: |
        # Read the ngrok URL
        NGROK_URL=$(cat ngrok-url.txt 2>/dev/null || echo "URL_NOT_FOUND")
        
        cat > ngrok-live-demo-report.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>üé¨ Legal Dashboard - ngrok Live Demo</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                .live-url { background: #28a745; color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }
                .live-url a { color: white; text-decoration: none; font-size: 20px; font-weight: bold; }
                .demo-frame { width: 100%; height: 800px; border: 2px solid #ddd; border-radius: 8px; }
                h1 { color: #333; text-align: center; }
                .status { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 15px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé¨ Legal Dashboard Live Demo</h1>
                
                <div class="live-url">
                    <p>üåê <strong>LIVE DASHBOARD URL:</strong></p>
                    <a href="$NGROK_URL" target="_blank">$NGROK_URL</a>
                    <p><small>‚è∞ Available for 2 hours via ngrok</small></p>
                </div>
                
                <div class="status">
                    <h3>‚úÖ Demo Status:</h3>
                    <p>‚Ä¢ Backend: Online</p>
                    <p>‚Ä¢ Frontend: Online</p>
                    <p>‚Ä¢ ngrok Tunnel: Active</p>
                    <p>‚Ä¢ Generated: $(date)</p>
                </div>
                
                <h2>üì± Live Dashboard:</h2>
                <iframe src="$NGROK_URL" class="demo-frame"></iframe>
            </div>
        </body>
        </html>
        EOF
        
        echo "‚úÖ Demo report created"
    
    - name: Keep Demo Alive
      run: |
        echo "‚è∞ Keeping demo alive for 30 minutes (test duration)..."
        NGROK_URL=$(cat ngrok-url.txt)
        echo "üåê Dashboard URL: $NGROK_URL"
        
        # Keep alive for 30 minutes for testing
        for i in {1..30}; do
          echo "‚è±Ô∏è Demo running... ${i}/30 minutes"
          sleep 60
          
          # Periodic health check
          if [ $((i % 5)) -eq 0 ]; then
            curl -s -o /dev/null -w "%{http_code}" "$NGROK_URL" | grep -q "200" && echo "‚úÖ Still accessible" || echo "‚ö†Ô∏è Connectivity check"
          fi
        done
    
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up processes..."
        
        # Kill processes
        [ -f backend.pid ] && kill $(cat backend.pid) 2>/dev/null || true
        [ -f frontend.pid ] && kill $(cat frontend.pid) 2>/dev/null || true
        [ -f ngrok.pid ] && kill $(cat ngrok.pid) 2>/dev/null || true
        
        echo "‚úÖ Cleanup completed"
    
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ngrok-demo-results-fixed
        path: |
          ngrok-live-demo-report.html
          ngrok.log
          ngrok-url.txt
          backend.log
          frontend.log
        retention-days: 30