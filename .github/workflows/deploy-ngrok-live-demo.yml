name: 🌐 Deploy ngrok Live Demo (Authenticated)

on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: Minutes to keep the demo alive (max 120)
        required: false
        default: '120'
      node_version:
        description: Node.js version
        required: false
        default: '18'
  workflow_call:
    inputs:
      duration_minutes:
        required: false
        type: string
        default: '120'
      node_version:
        required: false
        type: string
        default: '18'
    outputs:
      demo_url:
        description: The public ngrok demo URL
        value: ${{ jobs.ngrok-demo.outputs.demo_url }}

permissions:
  contents: read

concurrency:
  group: live-demo-ngrok
  cancel-in-progress: true

jobs:
  ngrok-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    outputs:
      demo_url: ${{ steps.expose-url.outputs.demo_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || github.event.inputs.node_version || '18' }}

      - name: Install prerequisites (ngrok, jq, curl)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euxo pipefail
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok jq curl lsof

      - name: Configure ngrok authentication
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          set -euxo pipefail
          if [ -z "${NGROK_AUTHTOKEN:-}" ]; then
            echo "NGROK_AUTHTOKEN secret is missing. Please add it in repository settings."
            exit 1
          fi
          ngrok config add-authtoken "$NGROK_AUTHTOKEN"
          ngrok config check

      - name: Install dependencies (frontend + backend)
        run: |
          set -euxo pipefail
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Start backend and frontend with logging
        run: |
          set -euxo pipefail
          # Start backend
          cd backend
          node server.js > ../backend.log 2>&1 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          cd ..
          sleep 6

          # Health check backend with retries
          for i in 1 2 3 4 5; do
            if curl -sf http://localhost:3001/health > /dev/null; then
              echo "Backend healthy"
              break
            fi
            echo "Waiting for backend... attempt $i"
            sleep $((i*2))
          done

          # Build + preview frontend
          cd frontend
          npm run build
          nohup npm run preview -- --port 5173 > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          cd ..
          sleep 6

          # Health check frontend
          for i in 1 2 3 4 5; do
            if curl -sf http://localhost:5173/ > /dev/null; then
              echo "Frontend healthy"
              break
            fi
            echo "Waiting for frontend... attempt $i"
            sleep $((i*2))
          done

      - name: Open ngrok tunnel and detect URL (robust)
        id: expose-url
        run: |
          set -euxo pipefail
          echo "Starting ngrok..."
          ngrok http 5173 --log=stdout > ngrok.log 2>&1 &
          NGROK_PID=$!
          echo "NGROK_PID=$NGROK_PID" >> $GITHUB_ENV
          sleep 8

          # Try multiple extraction strategies
          URL=""
          # API
          URL=$(curl -sf localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' || echo "")
          # Logs patterns
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            URL=$(grep -Eo 'https://[a-z0-9-]+\.(ngrok-free\.app|ngrok\.io)' ngrok.log | head -1 || true)
          fi
          # Fallback: sleep and retry API up to 5 times
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            for i in 1 2 3 4 5; do
              sleep 2
              URL=$(curl -sf localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' || echo "")
              if [ -n "$URL" ] && [ "$URL" != "null" ]; then
                break
              fi
            done
          fi

          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "Failed to obtain ngrok URL"
            echo "--- ngrok.log ---"; sed -n '1,200p' ngrok.log || true
            exit 1
          fi

          echo "ngrok URL: $URL"
          echo "demo_url=$URL" >> $GITHUB_OUTPUT

          # Verify external accessibility with retries
          for i in 1 2 3 4 5; do
            if curl -s -o /dev/null -w "%{http_code}" "$URL" | grep -qE '200|301|302'; then
              echo "Public URL is reachable"
              break
            fi
            echo "URL not yet reachable, attempt $i"
            sleep $((i*3))
          done

      - name: Generate demo report
        run: |
          set -euo pipefail
          URL="${{ steps.expose-url.outputs.demo_url }}"
          cat > ngrok-live-demo-report.html << 'EOF'
          <!DOCTYPE html>
          <html><head><meta charset="utf-8"/><title>Legal Dashboard – ngrok Live Demo</title>
          <style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;margin:0;background:#f5f7fb} .wrap{max-width:1100px;margin:32px auto;background:#fff;border-radius:12px;box-shadow:0 10px 30px rgba(0,0,0,.06);overflow:hidden} .head{background:#1f2937;color:#fff;padding:24px;text-align:center} .url{background:#10b981;color:#fff;text-align:center;padding:20px} .url a{color:#fff;font-weight:700;text-decoration:none} .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px;padding:20px} .card{background:#f9fafb;border-radius:10px;padding:16px;border-left:4px solid #10b981} iframe{width:100%;height:75vh;border:0;background:#f8f9fa}</style></head>
          <body><div class="wrap"><div class="head"><h1>Legal Dashboard – ngrok Live Demo</h1><p>Authenticated tunnel (up to 2 hours)</p></div>
          <div class="url"><div>Live URL:</div><div><a href="URL_PLACEHOLDER" target="_blank">URL_PLACEHOLDER</a></div></div>
          <div class="grid">
            <div class="card"><h3>Backend API</h3><div>ONLINE</div><div>Port: 3001</div></div>
            <div class="card"><h3>Frontend App</h3><div>ONLINE</div><div>Port: 5173</div></div>
            <div class="card"><h3>Tunnel</h3><div>ngrok (authenticated)</div><div>HTTPS</div></div>
            <div class="card"><h3>Duration</h3><div>Up to 120 minutes</div></div>
          </div>
          <iframe src="URL_PLACEHOLDER" title="Live Demo"></iframe>
          </div></body></html>
          EOF
          sed -i "s|URL_PLACEHOLDER|$URL|g" ngrok-live-demo-report.html

      - name: Keep alive and monitor health
        env:
          DURATION_MINUTES: ${{ inputs.duration_minutes || github.event.inputs.duration_minutes || '120' }}
        run: |
          set -euo pipefail
          URL="${{ steps.expose-url.outputs.demo_url }}"
          DURATION=${DURATION_MINUTES}
          if [ "$DURATION" -gt 120 ]; then DURATION=120; fi
          echo "Keeping demo alive for ${DURATION} minutes"
          for i in $(seq 1 "$DURATION"); do
            if (( i % 10 == 0 )); then
              CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo 000)
              echo "Minute $i – health check HTTP $CODE"
            else
              echo "Minute $i running..."
            fi
            sleep 60
          done

      - name: Cleanup processes
        if: always()
        run: |
          set +e
          kill $BACKEND_PID $FRONTEND_PID $NGROK_PID 2>/dev/null || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ngrok-live-demo
          path: |
            ngrok-live-demo-report.html
            ngrok.log
            backend.log
            frontend.log