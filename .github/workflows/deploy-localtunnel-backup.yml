name: ðŸš€ Deploy LocalTunnel Backup Demo

on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: Minutes to keep the demo alive (max 60)
        required: false
        default: '60'
      node_version:
        description: Node.js version
        required: false
        default: '18'
  workflow_call:
    inputs:
      duration_minutes:
        required: false
        type: string
        default: '60'
      node_version:
        required: false
        type: string
        default: '18'
    outputs:
      demo_url:
        description: The public LocalTunnel demo URL
        value: ${{ jobs.localtunnel-demo.outputs.demo_url }}

permissions:
  contents: read

concurrency:
  group: live-demo-lt
  cancel-in-progress: true

jobs:
  localtunnel-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    outputs:
      demo_url: ${{ steps.expose-url.outputs.demo_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || github.event.inputs.node_version || '18' }}

      - name: Install LocalTunnel
        run: npm install -g localtunnel

      - name: Install dependencies (frontend + backend)
        run: |
          set -euxo pipefail
          cd frontend && (npm ci || npm install)
          cd ../backend && (npm ci || npm install)

      - name: Start backend and frontend with logging
        run: |
          set -euxo pipefail
          # Start backend
          cd backend
          node server.js > ../backend.log 2>&1 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          cd ..
          sleep 6

          # Backend health retries
          for i in 1 2 3 4 5; do
            if curl -sf http://localhost:3001/health > /dev/null; then
              echo "Backend healthy"
              break
            fi
            echo "Waiting for backend... attempt $i"
            sleep $((i*2))
          done

          # Build + preview frontend
          cd frontend
          npm run build
          nohup npm run preview -- --port 5173 > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          cd ..
          sleep 6

          # Frontend health retries
          for i in 1 2 3 4 5; do
            if curl -sf http://localhost:5173/ > /dev/null; then
              echo "Frontend healthy"
              break
            fi
            echo "Waiting for frontend... attempt $i"
            sleep $((i*2))
          done

      - name: Open LocalTunnel and expose URL
        id: expose-url
        run: |
          set -euxo pipefail
          SUBDOMAIN="legal-dashboard-$(date +%s)"
          lt --port 5173 --subdomain "$SUBDOMAIN" > tunnel.log 2>&1 &
          LT_PID=$!
          echo "LT_PID=$LT_PID" >> $GITHUB_ENV
          sleep 8

          URL="https://${SUBDOMAIN}.loca.lt"
          # Verify accessibility with retries (LT may show warning page first)
          for i in 1 2 3 4 5; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo 000)
            echo "Attempt $i â€“ HTTP $CODE"
            if echo "$CODE" | grep -qE '200|401|403|301|302'; then
              break
            fi
            sleep $((i*3))
          done

          echo "demo_url=$URL" >> $GITHUB_OUTPUT
          echo "LocalTunnel URL: $URL"

      - name: Generate demo report
        run: |
          set -euo pipefail
          URL="${{ steps.expose-url.outputs.demo_url }}"
          cat > localtunnel-demo-report.html << 'EOF'
          <!DOCTYPE html>
          <html><head><meta charset="utf-8"/><title>Legal Dashboard â€“ LocalTunnel Demo</title>
          <style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;margin:0;background:#f5f7fb} .wrap{max-width:1100px;margin:32px auto;background:#fff;border-radius:12px;box-shadow:0 10px 30px rgba(0,0,0,.06);overflow:hidden} .head{background:#1f2937;color:#fff;padding:24px;text-align:center} .url{background:#2563eb;color:#fff;text-align:center;padding:20px} .url a{color:#fff;font-weight:700;text-decoration:none} .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px;padding:20px} .card{background:#f9fafb;border-radius:10px;padding:16px;border-left:4px solid #2563eb} iframe{width:100%;height:75vh;border:0;background:#f8f9fa}</style></head>
          <body><div class="wrap"><div class="head"><h1>Legal Dashboard â€“ LocalTunnel Demo</h1><p>No authentication required (up to 60 minutes)</p></div>
          <div class="url"><div>Live URL:</div><div><a href="URL_PLACEHOLDER" target="_blank">URL_PLACEHOLDER</a></div><div style="opacity:.7;margin-top:6px">If you see a warning page, click Continue</div></div>
          <div class="grid">
            <div class="card"><h3>Backend API</h3><div>ONLINE</div><div>Port: 3001</div></div>
            <div class="card"><h3>Frontend App</h3><div>ONLINE</div><div>Port: 5173</div></div>
            <div class="card"><h3>Tunnel</h3><div>LocalTunnel</div><div>Warning page possible</div></div>
            <div class="card"><h3>Duration</h3><div>Up to 60 minutes</div></div>
          </div>
          <iframe src="URL_PLACEHOLDER" title="Live Demo"></iframe>
          </div></body></html>
          EOF
          sed -i "s|URL_PLACEHOLDER|$URL|g" localtunnel-demo-report.html

      - name: Keep alive and monitor
        env:
          DURATION_MINUTES: ${{ inputs.duration_minutes || github.event.inputs.duration_minutes || '60' }}
        run: |
          set -euo pipefail
          URL="${{ steps.expose-url.outputs.demo_url }}"
          DURATION=${DURATION_MINUTES}
          if [ "$DURATION" -gt 60 ]; then DURATION=60; fi
          echo "Keeping demo alive for ${DURATION} minutes"
          for i in $(seq 1 "$DURATION"); do
            if (( i % 10 == 0 )); then
              CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo 000)
              echo "Minute $i â€“ health check HTTP $CODE"
            else
              echo "Minute $i running..."
            fi
            sleep 60
          done

      - name: Cleanup
        if: always()
        run: |
          set +e
          kill $BACKEND_PID $FRONTEND_PID $LT_PID 2>/dev/null || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: localtunnel-live-demo
          path: |
            localtunnel-demo-report.html
            tunnel.log
            backend.log
            frontend.log