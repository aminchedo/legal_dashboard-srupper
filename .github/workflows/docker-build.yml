name: Build and Push Docker Image

on:
  push:
    branches: ["main", "master", "*/*", "*" ]
  pull_request:
    branches: ["main", "master"]

env:
  DOCKERHUB_USERNAME: 24498743
  DOCKERHUB_TOKEN: dckr_pat_11XAFYII0Y7K9QGZD0X5A11Z18
  IMAGE_NAME: legal-dashboard

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=sha,format=short,prefix={{branch}}-

      - name: Build and push multi-platform image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Select a tag to test
        id: pick_tag
        run: |
          set -e
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Use local image digest or buildx output; for PR we didn't push, so use first tag in metadata without push
            TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          else
            # Prefer latest for default branch, else use first generated tag
            if [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "master" ]; then
              TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            else
              TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
            fi
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Run basic container test
        if: always()
        run: |
          set -e
          IMAGE_TO_TEST="${{ steps.pick_tag.outputs.tag }}"
          echo "Testing image: $IMAGE_TO_TEST"
          # For PRs, we need a local tag; if not pushed, try loading from local build cache by building for linux/amd64 and loading
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            docker buildx build \
              --file ./Dockerfile \
              --platform linux/amd64 \
              --load \
              --tag test-local:${{ github.sha }} \
              --cache-from type=gha \
              .
            IMAGE_TO_TEST="test-local:${{ github.sha }}"
          fi

          docker run -d --name ld-test -p 8000:8000 "$IMAGE_TO_TEST"
          for i in $(seq 1 20); do
            sleep 0.5
            if curl -sSf http://localhost:8000/health >/dev/null 2>&1; then
              echo "Container responded OK"
              break
            fi
            if [ "$i" -eq 20 ]; then
              echo "Health check did not respond in time" && docker logs ld-test || true
              exit 1
            fi
          done
          docker stop ld-test >/dev/null 2>&1 || true
          docker rm ld-test >/dev/null 2>&1 || true

      - name: Security scan (non-blocking)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      - name: Upload Trivy results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Deployment summary
        if: always()
        run: |
          echo "## Docker Image Build Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- Image: \`${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Branch: \`${{ github.ref_name }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Event: \`${{ github.event_name }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Tags pushed/generated:" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "${{ steps.meta.outputs.tags }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "### Run locally" >> "$GITHUB_STEP_SUMMARY"
          echo '```bash' >> "$GITHUB_STEP_SUMMARY"
          echo "docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> "$GITHUB_STEP_SUMMARY"
          echo "docker run -d -p 8000:8000 --name legal-dashboard ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"