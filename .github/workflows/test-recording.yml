# .github/workflows/test-recording-demo.yml
name: üé¨ Test Legal Dashboard Recording Demo

on:
  workflow_dispatch:  # Manual trigger button
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - frontend-only
        - demo-script
  push:
    branches: [ main, master ]
    paths: 
      - 'record_demo.sh'
      - 'frontend/**'
      - 'backend/**'

jobs:
  test-legal-dashboard-recording:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: üîß Fix Package Dependencies
      run: |
        echo "üîÑ Fixing frontend dependencies..."
        cd frontend
        
        # Remove lock file and node_modules to start fresh
        rm -f package-lock.json
        rm -rf node_modules
        
        # Install dependencies fresh
        npm install
        
        echo "‚úÖ Frontend dependencies fixed"
        
    - name: üîß Fix Backend Dependencies (if exists)
      run: |
        if [ -d "backend" ]; then
          echo "üîÑ Fixing backend dependencies..."
          cd backend
          rm -f package-lock.json
          rm -rf node_modules
          npm install
          echo "‚úÖ Backend dependencies fixed"
        else
          echo "‚ÑπÔ∏è No backend directory found"
        fi
        
    - name: üéØ Make Demo Script Executable
      run: |
        if [ -f "record_demo.sh" ]; then
          chmod +x record_demo.sh
          echo "‚úÖ record_demo.sh is now executable"
        else
          echo "‚ùå record_demo.sh not found"
        fi
        
    - name: üîß Setup Virtual Display for Browser Testing
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb ffmpeg
        
    - name: üåê Install Chrome for Testing
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: üöÄ Test Record Demo Script
      if: github.event.inputs.test_type == 'demo-script' || github.event.inputs.test_type == 'full'
      run: |
        echo "üé¨ Testing record_demo.sh script..."
        
        if [ -f "record_demo.sh" ]; then
          # Run the demo script in background
          timeout 30s ./record_demo.sh || echo "Script completed or timed out"
          
          echo "üìä Checking what the script created:"
          ls -la
          
          # Check for any output files
          find . -name "*.mp4" -o -name "*.webm" -o -name "*.avi" 2>/dev/null || echo "No video files found"
          find . -name "*demo*" -o -name "*record*" 2>/dev/null || echo "No demo files found"
          
        else
          echo "‚ùå record_demo.sh not found!"
          exit 1
        fi
        
    - name: üåç Start Frontend Server
      if: github.event.inputs.test_type == 'frontend-only' || github.event.inputs.test_type == 'full'
      run: |
        cd frontend
        
        echo "üèóÔ∏è Building frontend..."
        npm run build
        
        echo "üöÄ Starting frontend server..."
        npm run preview &
        
        # Wait for server to start
        sleep 10
        
        # Test if server is accessible
        curl -f http://localhost:4173 || echo "Frontend server not accessible"
        
    - name: üåê Start Backend Server (if exists)
      if: github.event.inputs.test_type == 'full'
      run: |
        if [ -d "backend" ] && [ -f "backend/package.json" ]; then
          cd backend
          
          # Check if there's a start script
          if npm run | grep -q "start"; then
            echo "üöÄ Starting backend server..."
            npm start &
            sleep 5
            
            # Test backend health
            curl -f http://localhost:3001/health || curl -f http://localhost:3000/health || echo "Backend health check failed"
          else
            echo "‚ÑπÔ∏è No start script found in backend"
          fi
        else
          echo "‚ÑπÔ∏è No backend to start"
        fi
        
    - name: üì∏ Take Screenshots of Application
      run: |
        # Install puppeteer globally
        npm install -g puppeteer
        
        # Create comprehensive screenshot script
        cat > capture-legal-dashboard.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        
        (async () => {
          console.log('üöÄ Starting Legal Dashboard screenshot capture...');
          
          const browser = await puppeteer.launch({
            headless: true,
            args: [
              '--no-sandbox',
              '--disable-setuid-sandbox',
              '--disable-dev-shm-usage',
              '--disable-gpu',
              '--use-fake-ui-for-media-stream',
              '--use-fake-device-for-media-stream',
              '--disable-web-security',
              '--allow-running-insecure-content'
            ]
          });
          
          const page = await browser.newPage();
          await page.setViewport({ width: 1920, height: 1080 });
          
          // Grant all permissions
          await page.setPermissions('http://localhost:4173', ['camera', 'microphone', 'notifications']);
          
          const results = {
            screenshots: [],
            errors: [],
            features_found: []
          };
          
          try {
            console.log('üì± Testing main dashboard...');
            await page.goto('http://localhost:4173', { 
              waitUntil: 'networkidle0',
              timeout: 15000 
            });
            
            await page.screenshot({ 
              path: 'legal-dashboard-main.png',
              fullPage: true 
            });
            results.screenshots.push('legal-dashboard-main.png');
            
            // Look for recording-related elements
            const recordingElements = await page.evaluate(() => {
              const elements = [];
              
              // Look for recording buttons
              document.querySelectorAll('button').forEach(btn => {
                const text = btn.textContent.toLowerCase();
                if (text.includes('record') || text.includes('demo') || text.includes('capture')) {
                  elements.push({
                    type: 'button',
                    text: btn.textContent,
                    tag: btn.tagName
                  });
                }
              });
              
              // Look for recording-related text
              document.querySelectorAll('*').forEach(el => {
                const text = el.textContent;
                if (text && (text.includes('recording') || text.includes('capture') || text.includes('demo'))) {
                  elements.push({
                    type: 'text',
                    text: text.substring(0, 100),
                    tag: el.tagName
                  });
                }
              });
              
              return elements.slice(0, 10); // Limit results
            });
            
            results.features_found = recordingElements;
            
            console.log('üéØ Testing recording route...');
            try {
              await page.goto('http://localhost:4173/recording', { 
                waitUntil: 'networkidle0',
                timeout: 10000 
              });
              
              await page.screenshot({ 
                path: 'legal-dashboard-recording.png',
                fullPage: true 
              });
              results.screenshots.push('legal-dashboard-recording.png');
              
            } catch (routeError) {
              console.log('‚ö†Ô∏è Recording route not accessible:', routeError.message);
              results.errors.push('Recording route not accessible');
            }
            
            console.log('üé¨ Testing demo functionality...');
            try {
              await page.goto('http://localhost:4173/demo', { 
                waitUntil: 'networkidle0',
                timeout: 10000 
              });
              
              await page.screenshot({ 
                path: 'legal-dashboard-demo.png',
                fullPage: true 
              });
              results.screenshots.push('legal-dashboard-demo.png');
              
            } catch (demoError) {
              console.log('‚ö†Ô∏è Demo route not accessible:', demoError.message);
              results.errors.push('Demo route not accessible');
            }
            
          } catch (error) {
            console.log('‚ùå Main error:', error.message);
            results.errors.push(error.message);
            
            // Take error screenshot
            await page.screenshot({ 
              path: 'legal-dashboard-error.png',
              fullPage: true 
            });
            results.screenshots.push('legal-dashboard-error.png');
          }
          
          // Save results to JSON
          fs.writeFileSync('screenshot-results.json', JSON.stringify(results, null, 2));
          
          console.log('‚úÖ Screenshot capture completed');
          console.log('üì∏ Screenshots taken:', results.screenshots.length);
          console.log('üéØ Features found:', results.features_found.length);
          console.log('‚ùå Errors encountered:', results.errors.length);
          
          await browser.close();
        })();
        EOF
        
        # Run screenshot capture with virtual display
        xvfb-run -a node capture-legal-dashboard.js
        
    - name: üîç Analyze Project Structure
      run: |
        echo "üèóÔ∏è Legal Dashboard Project Analysis:"
        echo "=================================="
        
        echo "üìÅ Root files:"
        ls -la | grep -E "\.(sh|md|json|html)$" || echo "No script/config files found"
        
        echo "üìÇ Frontend structure:"
        if [ -d "frontend" ]; then
          find frontend -name "*.tsx" -o -name "*.ts" | head -10
        fi
        
        echo "üìÇ Backend structure:"
        if [ -d "backend" ]; then
          find backend -name "*.js" -o -name "*.ts" | head -10
        fi
        
        echo "üé¨ Recording-related files:"
        find . -name "*record*" -o -name "*demo*" -o -name "*capture*" 2>/dev/null || echo "No recording files found"
        
        echo "üìä Package.json analysis:"
        if [ -f "frontend/package.json" ]; then
          echo "Frontend dependencies:"
          cat frontend/package.json | grep -A 20 '"dependencies"' || echo "No dependencies section found"
        fi
        
    - name: üìä Generate Comprehensive Test Report
      run: |
        cat > legal-dashboard-test-report.md << 'EOF'
        # üé¨ Legal Dashboard Recording Test Report
        
        ## Test Information
        - **Date:** $(date)
        - **Repository:** ${{ github.repository }}
        - **Commit:** ${{ github.sha }}
        - **Test Type:** ${{ github.event.inputs.test_type || 'auto' }}
        - **Workflow:** ${{ github.workflow }}
        
        ## Test Results Summary
        
        ### ‚úÖ Successful Components
        EOF
        
        # Add dynamic results
        if [ -f "legal-dashboard-main.png" ]; then
          echo "- ‚úÖ Main dashboard interface captured" >> legal-dashboard-test-report.md
        fi
        
        if [ -f "legal-dashboard-recording.png" ]; then
          echo "- ‚úÖ Recording interface accessible" >> legal-dashboard-test-report.md
        fi
        
        if [ -f "record_demo.sh" ]; then
          echo "- ‚úÖ Demo script found and executed" >> legal-dashboard-test-report.md
        fi
        
        cat >> legal-dashboard-test-report.md << 'EOF'
        
        ### üìä Project Analysis
        EOF
        
        # Add project structure info
        echo "- **Frontend Status:** $([ -d "frontend" ] && echo "Present" || echo "Missing")" >> legal-dashboard-test-report.md
        echo "- **Backend Status:** $([ -d "backend" ] && echo "Present" || echo "Missing")" >> legal-dashboard-test-report.md
        echo "- **Demo Script:** $([ -f "record_demo.sh" ] && echo "Found" || echo "Missing")" >> legal-dashboard-test-report.md
        
        # Add screenshot results if available
        if [ -f "screenshot-results.json" ]; then
          echo "" >> legal-dashboard-test-report.md
          echo "### üéØ Feature Detection Results" >> legal-dashboard-test-report.md
          cat screenshot-results.json >> legal-dashboard-test-report.md
        fi
        
        cat >> legal-dashboard-test-report.md << 'EOF'
        
        ## üì∏ Available Screenshots
        Check the artifacts section to download:
        - Main dashboard interface
        - Recording interface (if accessible)
        - Demo interface (if accessible)
        - Error states (if any)
        
        ## üé¨ How to Access Your Recording System
        1. **Clone the repository**
        2. **Run the demo script:** `./record_demo.sh`
        3. **Or start manually:**
           - `cd frontend && npm install && npm run dev`
           - Open `http://localhost:5173`
        4. **Look for recording/demo features in the interface**
        
        ## üîß Next Steps
        - Review screenshots to see the actual interface
        - Check if recording routes need to be added
        - Verify demo script functionality
        - Test recording features manually
        EOF
        
        echo "üìã Test report generated"
        cat legal-dashboard-test-report.md
        
    - name: üéØ Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: legal-dashboard-recording-test-${{ github.run_number }}
        path: |
          *.png
          *.json
          *.md
          record_demo.sh
        retention-days: 30
        
    - name: ‚úÖ Final Status Summary
      run: |
        echo "üéä Legal Dashboard Recording Test Completed!"
        echo "========================================"
        echo "üìä Artifacts created:"
        ls -la *.png *.json *.md 2>/dev/null || echo "No artifacts found"
        echo ""
        echo "üìÅ Download the artifacts above to see:"
        echo "  - Screenshots of your dashboard"
        echo "  - Test results and analysis" 
        echo "  - Recording interface (if found)"
        echo ""
        echo "üöÄ To run locally: ./record_demo.sh"