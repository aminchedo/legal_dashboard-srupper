# .github/workflows/test-recording.yml
name: 🎬 Test Recording System

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-recording:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: 📦 Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 📦 Install Backend Dependencies  
      run: |
        cd backend
        npm ci
        
    - name: 🔧 Setup Virtual Display (for browser testing)
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        
    - name: 🌐 Install Browser Dependencies
      run: |
        # Install Chrome for testing
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: 🚀 Start Backend Server
      run: |
        cd backend
        npm start &
        sleep 10  # Wait for server to start
        
    - name: 🎯 Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: 🌍 Start Frontend Server
      run: |
        cd frontend
        npm run preview &
        sleep 5  # Wait for frontend to start
        
    - name: 🧪 Test Server Connectivity
      run: |
        # Test if servers are running
        curl -f http://localhost:3001/health || echo "Backend not ready"
        curl -f http://localhost:4173 || echo "Frontend not ready"
        
    - name: 📸 Take Screenshot of Recording Interface
      run: |
        # Install puppeteer for screenshots
        npm install -g puppeteer
        
        # Create screenshot script
        cat > screenshot.js << 'EOF'
        const puppeteer = require('puppeteer');
        
        (async () => {
          const browser = await puppeteer.launch({
            headless: true,
            args: [
              '--no-sandbox',
              '--disable-setuid-sandbox',
              '--disable-dev-shm-usage',
              '--disable-gpu',
              '--use-fake-ui-for-media-stream',
              '--use-fake-device-for-media-stream'
            ]
          });
          
          const page = await browser.newPage();
          
          // Grant camera/mic permissions
          await page.setPermissions('http://localhost:4173', ['camera', 'microphone']);
          
          try {
            // Navigate to recording demo
            await page.goto('http://localhost:4173/recording', { 
              waitUntil: 'networkidle0',
              timeout: 30000 
            });
            
            // Take screenshot of the interface
            await page.screenshot({ 
              path: 'recording-interface.png',
              fullPage: true 
            });
            
            // Try to find and click recording button
            await page.waitForSelector('button', { timeout: 10000 });
            
            // Take screenshot after interface loads
            await page.screenshot({ 
              path: 'recording-interface-loaded.png',
              fullPage: true 
            });
            
            console.log('✅ Screenshots taken successfully');
            
          } catch (error) {
            console.log('❌ Error:', error.message);
            
            // Take screenshot of error state
            await page.screenshot({ 
              path: 'recording-error.png',
              fullPage: true 
            });
          }
          
          await browser.close();
        })();
        EOF
        
        # Run screenshot script with virtual display
        xvfb-run -a node screenshot.js
        
    - name: 🎬 Test Recording Functionality
      run: |
        # Create recording test script
        cat > test-recording.js << 'EOF'
        const puppeteer = require('puppeteer');
        
        (async () => {
          const browser = await puppeteer.launch({
            headless: true,
            args: [
              '--no-sandbox',
              '--disable-setuid-sandbox',
              '--use-fake-ui-for-media-stream',
              '--use-fake-device-for-media-stream',
              '--allow-running-insecure-content'
            ]
          });
          
          const page = await browser.newPage();
          await page.setPermissions('http://localhost:4173', ['camera', 'microphone']);
          
          try {
            await page.goto('http://localhost:4173/recording', { 
              waitUntil: 'networkidle0' 
            });
            
            // Look for recording controls
            const hasRecordButton = await page.$('button:contains("Record")') !== null;
            const hasDemoButton = await page.$('button:contains("Demo")') !== null;
            
            console.log('🔍 Recording Interface Analysis:');
            console.log('- Record button found:', hasRecordButton);
            console.log('- Demo button found:', hasDemoButton);
            
            // Try to test the standalone HTML demo
            await page.goto('file://' + process.cwd() + '/demo-recording-test.html');
            await page.waitForTimeout(3000);
            
            await page.screenshot({ 
              path: 'standalone-demo.png',
              fullPage: true 
            });
            
            console.log('✅ Standalone demo tested');
            
          } catch (error) {
            console.log('❌ Recording test error:', error.message);
          }
          
          await browser.close();
        })();
        EOF
        
        xvfb-run -a node test-recording.js
        
    - name: 📁 Check Created Files
      run: |
        echo "🔍 Checking for recording system files:"
        echo "Frontend files:"
        find frontend/src -name "*record*" -o -name "*Record*" || echo "No recording files found"
        
        echo "Demo file:"
        ls -la demo-recording-test.html || echo "Standalone demo not found"
        
        echo "Screenshot files:"
        ls -la *.png || echo "No screenshots created"
        
    - name: 📊 Generate Test Report
      run: |
        echo "# 🎬 Recording System Test Report" > test-report.md
        echo "" >> test-report.md
        echo "## Test Results" >> test-report.md
        echo "- Date: $(date)" >> test-report.md
        echo "- Repository: ${{ github.repository }}" >> test-report.md
        echo "- Commit: ${{ github.sha }}" >> test-report.md
        echo "" >> test-report.md
        
        if [ -f "recording-interface.png" ]; then
          echo "✅ Recording interface screenshot captured" >> test-report.md
        else
          echo "❌ Recording interface not accessible" >> test-report.md
        fi
        
        if [ -f "demo-recording-test.html" ]; then
          echo "✅ Standalone demo file exists" >> test-report.md
        else
          echo "❌ Standalone demo file missing" >> test-report.md
        fi
        
        echo "" >> test-report.md
        echo "## Files Created:" >> test-report.md
        find . -name "*record*" -o -name "*Record*" | head -10 >> test-report.md
        
        cat test-report.md
        
    - name: 🎯 Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: recording-test-results
        path: |
          *.png
          test-report.md
          demo-recording-test.html
        retention-days: 30
        
    - name: 📝 Comment Results (on PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🎬 Recording System Test Results\n\n';
          
          try {
            const report = fs.readFileSync('test-report.md', 'utf8');
            comment += report;
          } catch (error) {
            comment += '❌ Could not read test report\n';
          }
          
          comment += '\n📸 Screenshots and test files are available in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });