name: ðŸ¤– Deploy Orchestrator (Smart Fallbacks)

on:
  workflow_dispatch:
    inputs:
      prefer:
        description: Preferred method (ngrok|localtunnel|auto)
        required: false
        default: 'auto'
      node_version:
        description: Node.js version
        required: false
        default: '18'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: deploy-orchestrator
  cancel-in-progress: true

jobs:
  live-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 150
    outputs:
      final_url: ${{ steps.finalize.outputs.final_url }}
      method_used: ${{ steps.finalize.outputs.method_used }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version || '18' }}

      - name: Install prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euxo pipefail
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -y
          sudo apt-get install -y ngrok jq curl lsof
          npm install -g localtunnel

      - name: Install dependencies (frontend + backend)
        run: |
          set -euxo pipefail
          cd frontend && (npm ci || npm install)
          cd ../backend && (npm ci || npm install)

      - name: Start backend and frontend with logging
        run: |
          set -euxo pipefail
          cd backend
          node server.js > ../backend.log 2>&1 &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV
          cd ..
          sleep 6

          for i in 1 2 3 4 5; do
            curl -sf http://localhost:3001/health > /dev/null && break || true
            echo "Waiting for backend... $i"; sleep $((i*2))
          done

          cd frontend
          npm run build
          nohup npm run preview -- --port 5173 > ../frontend.log 2>&1 &
          echo "FRONTEND_PID=$!" >> $GITHUB_ENV
          cd ..
          sleep 6

          for i in 1 2 3 4 5; do
            curl -sf http://localhost:5173/ > /dev/null && break || true
            echo "Waiting for frontend... $i"; sleep $((i*2))
          done

      - name: Determine method
        id: method
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          set -euo pipefail
          PREFER='${{ github.event.inputs.prefer || 'auto' }}'
          if [ "$PREFER" = "ngrok" ]; then
            echo "value=ngrok" >> $GITHUB_OUTPUT
          elif [ "$PREFER" = "localtunnel" ]; then
            echo "value=localtunnel" >> $GITHUB_OUTPUT
          else
            if [ -n "${NGROK_AUTHTOKEN:-}" ]; then echo "value=ngrok" >> $GITHUB_OUTPUT; else echo "value=localtunnel" >> $GITHUB_OUTPUT; fi
          fi

      - name: Configure ngrok if needed
        if: steps.method.outputs.value == 'ngrok'
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          set -euxo pipefail
          if [ -z "${NGROK_AUTHTOKEN:-}" ]; then
            echo "Missing NGROK_AUTHTOKEN, will fallback"
            exit 0
          fi
          ngrok config add-authtoken "$NGROK_AUTHTOKEN"
          ngrok config check

      - name: Try ngrok
        id: try_ngrok
        if: steps.method.outputs.value == 'ngrok'
        continue-on-error: true
        run: |
          set -euxo pipefail
          ngrok http 5173 --log=stdout > ngrok.log 2>&1 &
          echo "NGROK_PID=$!" >> $GITHUB_ENV
          sleep 8
          URL=$(curl -sf localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' || true)
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            URL=$(grep -Eo 'https://[a-z0-9-]+\.(ngrok-free\.app|ngrok\.io)' ngrok.log | head -1 || true)
          fi
          if [ -n "$URL" ] && [ "$URL" != "null" ]; then
            echo "demo_url=$URL" >> $GITHUB_OUTPUT
            echo "method=ngrok" >> $GITHUB_OUTPUT
          fi

      - name: Try LocalTunnel (fallback)
        id: try_lt
        if: steps.try_ngrok.outputs.demo_url == '' || steps.method.outputs.value == 'localtunnel'
        run: |
          set -euxo pipefail
          SUBDOMAIN="legal-dashboard-$(date +%s)"
          lt --port 5173 --subdomain "$SUBDOMAIN" > tunnel.log 2>&1 &
          echo "LT_PID=$!" >> $GITHUB_ENV
          sleep 8
          URL="https://${SUBDOMAIN}.loca.lt"
          echo "demo_url=$URL" >> $GITHUB_OUTPUT
          echo "method=localtunnel" >> $GITHUB_OUTPUT

      - name: Finalize URL and method
        id: finalize
        run: |
          set -euo pipefail
          URL_NGROK='${{ steps.try_ngrok.outputs.demo_url }}'
          URL_LT='${{ steps.try_lt.outputs.demo_url }}'
          if [ -n "$URL_NGROK" ]; then
            echo "final_url=$URL_NGROK" >> $GITHUB_OUTPUT
            echo "method_used=ngrok" >> $GITHUB_OUTPUT
          else
            echo "final_url=$URL_LT" >> $GITHUB_OUTPUT
            echo "method_used=localtunnel" >> $GITHUB_OUTPUT
          fi

      - name: Keep alive and monitor
        env:
          URL: ${{ steps.finalize.outputs.final_url }}
        run: |
          set -euo pipefail
          for i in $(seq 1 60); do
            if (( i % 10 == 0 )); then
              CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo 000)
              echo "Minute $i â€“ HTTP $CODE"
            else
              echo "Minute $i running..."
            fi
            sleep 60
          done

      - name: Cleanup
        if: always()
        run: |
          set +e
          kill $BACKEND_PID $FRONTEND_PID $NGROK_PID $LT_PID 2>/dev/null || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: orchestrator-logs
          path: |
            backend.log
            frontend.log
            ngrok.log
            tunnel.log

  pages-deploy:
    runs-on: ubuntu-latest
    needs: live-demo
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Build frontend
        run: |
          set -euxo pipefail
          cd frontend
          (npm ci || npm install)
          npm run build
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/dist
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4